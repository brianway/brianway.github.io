<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brian&#39;s Homepage</title>
  
  <subtitle>猥琐发育，别浪！</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://brianway.github.io/"/>
  <updated>2019-04-15T15:40:11.256Z</updated>
  <id>https://brianway.github.io/</id>
  
  <author>
    <name>Brian Way</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用GitHub+Hexo搭建个人网站</title>
    <link href="https://brianway.github.io/2019/04/14/hexo-github-pages-practice/"/>
    <id>https://brianway.github.io/2019/04/14/hexo-github-pages-practice/</id>
    <published>2019-04-14T04:40:07.000Z</published>
    <updated>2019-04-15T15:40:11.256Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录我将 GitHub 的个人博客从 Jekyll 迁移到 Hexo 的一些踩坑实践。</p><a id="more"></a><h2 id="为什么迁移"><a href="#为什么迁移" class="headerlink" title="为什么迁移"></a>为什么迁移</h2><ul><li>Jekyll搭建博客所需的技术栈（如Liquid语言、Ruby、gem等）我不太熟悉，每次想改点啥都不方便；而 Hexo 是基于Node.js的，js相对熟悉一点，定制起来方便一些。</li><li>Hexo 生成站点的速度更快，且该框架是台湾人贡献的，中文文档很多。</li></ul><blockquote><p>网上对比的文章 <a href="https://www.techiediaries.com/jekyll-hugo-hexo/" target="_blank" rel="noopener">How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo</a></p></blockquote><h2 id="Hexo和博客主题"><a href="#Hexo和博客主题" class="headerlink" title="Hexo和博客主题"></a>Hexo和博客主题</h2><h3 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h3><p>Hexo的安装可以参考<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>，需要先安装node.js和git，照着文档安装就行了。</p><p>常用指令有：</p><ul><li>清除缓存： <code>hexo clean</code></li><li>生成静态文件：<code>hexo generate</code>，简写<code>hexo g</code></li><li>启动服务器：<code>hexo server</code>，简写<code>hexo s</code></li><li>部署到远程站点： <code>hexo deploy</code>，简写<code>hexo d</code></li></ul><blockquote><p>更多指令：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a></p></blockquote><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>Hexo的主题有很多，可以从下面几篇推荐里挑挑：</p><ul><li><a href="https://www.zhihu.com/question/39388850" target="_blank" rel="noopener">知乎 - 在github中有哪些好的hexo博客模板？</a></li><li><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">Hexo博客主题推荐</a></li></ul><p>我主要有几个需求：</p><ul><li><strong>支持搜索</strong></li><li><strong>目录显示当前所处章节</strong>：阅读文章时显示目录TOC，且滑动到文章相应位置时，目录同步定位</li><li>支持赞赏展示和自定义页面</li><li>支持标签和分类</li></ul><p>简单比较了下，选择了<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a> </p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>大致以下几个步骤：</p><ol><li>安装Hexo</li><li>选用主题，并根据主题的安装步骤去更改配置项</li><li>本地<code>hexo clean &amp; hexo g</code>生成本地文件，<code>hexo s</code>启动本地服务器，访问<code>http://localhost:4000/</code>查看效果</li></ol><p>可以通读以下博客了解细节：</p><ul><li><a href="http://www.cnblogs.com/MuYunyun/p/5927491.html#_label7" target="_blank" rel="noopener">基于hexo+github搭建一个独立博客</a></li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a></li></ul><blockquote><p>indigo 主题的wiki: <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki</a></p></blockquote><h2 id="我的定制修改"><a href="#我的定制修改" class="headerlink" title="我的定制修改"></a>我的定制修改</h2><p>我写了个Java程序把原来Jekyll下博客的md文件copy到了新的文件夹下，并对每个md文件需要适配的地方(如摘要是通过<code>&lt;!-- more --&gt;</code>来区分的)进行了批量处理。</p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>很多主题都支持访问统计，一般需要在配置文件配置自己对应账号的key，我一般使用Google Analytics+百度统计：</p><ul><li>Google Analytics: <a href="https://analytics.google.com/analytics/web/" target="_blank" rel="noopener">https://analytics.google.com/analytics/web/</a><ul><li><a href="https://support.google.com/analytics/answer/1008080" target="_blank" rel="noopener">https://support.google.com/analytics/answer/1008080</a></li><li><a href="http://cn.analyticsbook.org/google-analytics-tracking-codes/" target="_blank" rel="noopener">Analytics Book 中文版</a>：16年的，感觉过时了。</li></ul></li><li>百度统计: <a href="https://tongji.baidu.com/web/homepage/index" target="_blank" rel="noopener">https://tongji.baidu.com/web/homepage/index</a></li></ul><p>其中有官方提供的统计js代码，indigo的代码有些过时了，可通过配置文件里统计配置对应的关键字全局搜索，找到对应代码，并更新成最新的js。</p><p>具体地，indigo主题的统计代码在<code>themes/indigo/layout/_partial/plugins</code>目录下的<code>baidu.ejs</code>和<code>google-analytics.ejs</code>，其他主题也可通过类似方法修改</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>针对无数据库的静态博客搜索方案一般有两种：</p><ul><li>第三方搜索服务；</li><li>序列化站点内容作为数据源，然后自己写查询方法。</li></ul><p>indigo作者是通过自定义搜索实现的，搜索方案为：<a href="https://yscoder.github.io/20160511/hexo-search.html#%E6%90%9C%E7%B4%A2%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">Hexo添加站内搜索功能初步完成</a>。原理比较简单，简单概括就是：<br>先通过<code>hexo-generator-json-content</code>插件生成json格式的数据文件，然后将这个数据文件作为数据源，对输入进行正则匹配。由于我只需要简单搜索，简单正则就能满足我的要求，该方案基本可以，所有没有增加分词等高级搜索的功能。</p><p>但有他的实现有几个问题：</p><ul><li>没有对输入转义，直接根据输入生成正则，当输入包含正则元字符时前端会报错，且把空格替换为了<code>或</code>的逻辑，而不是<code>且</code>的逻辑</li><li>没有权重，标题、正文等只要出现关键字就显示，导致我很多文章都有git地址，只要输入git，全匹配了，没有区分度</li><li>没有对摘要进行搜索</li></ul><p>所以我做了简单的修改：</p><ul><li>转义用户输入中的正则元字符</li><li>生成json数据文件时增加摘要字段，去掉正文字段，以减少json文件大小（可选，也可以不去掉）</li><li>增加权重，权重大小：标题&gt;摘要&gt;标签&gt;正文</li></ul><p>修改<code>themes/indigo/source/js/search.js</code>即可在本地测试，发布线上的话，需要mimify js文件，然后替换掉原来的<code>themes/indigo/source/js/search.min.js</code>，压缩js的工具网站：<a href="https://javascript-minifier.com/" target="_blank" rel="noopener">https://javascript-minifier.com/</a></p><p><em>以下是具体实现，没兴趣可略过</em></p><p>修改前后的正则(注释的为修改前的)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi');</span></span><br><span class="line"><span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(escapeRegExp(key), <span class="string">'gmi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string.replace(<span class="regexp">/([.*+?^=!:$&#123;&#125;()|[\]\/\\])/g</span>, <span class="string">'\\$&amp;'</span>);</span><br><span class="line">        <span class="comment">//$&amp;表示整个被匹配的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>function escapeRegExp(string)</code>参考<strong>正则escape</strong>：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li><li><a href="https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript</a></li></ul><p>同时，匹配结果不再只返回<code>true/false</code>，而是返回权重，搜索结果更根据权重排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配文章内容返回结果，返回值代表权重。按照标题，摘要，标签，正文的顺序递减</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcher</span>(<span class="params">post, regExp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (regtest(post.title, regExp)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (regtest(post.excerpt, regExp)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (post.tags.some(<span class="function"><span class="keyword">function</span> (<span class="params">tag</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regtest(tag.name, regExp);</span><br><span class="line">    &#125;)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(regtest(post.text, regExp))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配文章内容返回结果</span></span><br><span class="line">loadData(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 结果按照匹配程度过滤并排序</span></span><br><span class="line">    <span class="keyword">var</span> result = data.map(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">        post.search_order = matcher(post, regExp);</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;);</span><br><span class="line">    result = result.filter(<span class="function"><span class="params">post</span> =&gt;</span> post.search_order &amp;&amp; post.search_order &gt; <span class="number">0</span>);</span><br><span class="line">    result = result.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.search_order - a.search_order);</span><br><span class="line"></span><br><span class="line">    render(result);</span><br><span class="line">    Control.show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="安装hexo失败"><a href="#安装hexo失败" class="headerlink" title="安装hexo失败"></a>安装hexo失败</h3><ul><li>报错：<code>Missing write access to /usr/local/lib/node_modules/hexo-cli</code></li><li>解决： 进入文件夹<code>/usr/local/lib</code>，修改权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/lib where the global node_module folder is found</span><br><span class="line">$ sudo chown -R username:group node_modules</span><br></pre></td></tr></table></figure><ul><li>参考：<ul><li><a href="https://github.com/hexojs/hexo/issues/2545" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/2545</a></li><li><a href="https://github.com/npm/npm/issues/10683" target="_blank" rel="noopener">https://github.com/npm/npm/issues/10683</a></li></ul></li></ul><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><ul><li>问题：绑定失败</li><li>解决：<ul><li>申请并购买一个自定义域名 </li><li>ping你的github.io域名，得到一个IP</li><li>在你的域名的 DNS 配置中添加A类型的记录，主机记录为<code>@</code>，记录值为上述IP</li><li>在仓库根目录添加<code>CNAME</code>文件，并在文件中填写绑定的顶级域名</li><li>在对应仓库的设置里<code>Settings-&gt;GitHub Pages-&gt;Custom domain</code>写上你的自定义域名</li><li>有的博客说还要更换DNS服务器地址为<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code>，我没换也成功了。</li></ul></li><li>参考<ul><li><a href="https://www.zhihu.com/question/31377141" target="_blank" rel="noopener">https://www.zhihu.com/question/31377141</a></li><li><a href="https://help.github.com/en/articles/using-a-custom-domain-with-github-pages" target="_blank" rel="noopener">https://help.github.com/en/articles/using-a-custom-domain-with-github-pages</a> </li></ul></li></ul><p>由于自定义域名后原来的统计数据就从零重计了，所以就放弃了，还是使用github.io的域名算了。</p><h3 id="清理DNS缓存"><a href="#清理DNS缓存" class="headerlink" title="清理DNS缓存"></a>清理DNS缓存</h3><ul><li>问题：配置自定义域名失败，一直跳空白或者找不到地址，删除DNS解析配置也没用</li><li>解决：需要清除本地DNS缓存以及chrome缓存</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder; sleep 2;</span><br><span class="line">sudo killall mDNSResponderHelper</span><br><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure><p>chrome缓存清理：<code>设置-&gt;高级-&gt;隐私设置和安全性-&gt;清除浏览数据</code>或者<code>右上角三个点-&gt;更多工具-&gt;清除浏览数据</code></p><ul><li>参考：<ul><li><a href="https://www.hongkiat.com/blog/how-to-clear-dns-cache-in-macos-mojave/" target="_blank" rel="noopener">How to Clear DNS Cache in macOS Mojave</a></li><li><a href="https://coolestguidesontheplanet.com/clear-the-local-dns-cache-in-osx/" target="_blank" rel="noopener">Flush DNS cache locally in macOS Mojave, Sierra, OSX, Linux and Windows</a></li><li><a href="https://www.cnblogs.com/qq952693358/p/9126860.html" target="_blank" rel="noopener">Mac OS X 清除DNS缓存</a></li></ul></li></ul><h3 id="博客原文的备份"><a href="#博客原文的备份" class="headerlink" title="博客原文的备份"></a>博客原文的备份</h3><ul><li>问题：使用Hexo后，仓库只有生成的public文件夹下的文件，博客都是html，原来的博客原文没有版本管理</li><li>解决：新建分支<code>hexo-public</code>（名字自取），将hexo的根目录作为仓库根目录，这样发布的内容在<code>master</code>分支，而编辑的内容和各种配置等原始信息在<code>hexo-public</code>实现版本管理<ul><li>使用的主题的对应文件夹下会包含<code>.git</code>，<code>git add</code>时会有一些提示，根据自己需要删除<code>.git</code>，或者作为子模块进行管理。最好不要直接<code>git rm --cached</code>，否则后续对主题的修改不会被追踪</li></ul></li><li>参考：<ul><li><a href="https://lrscy.github.io/2018/01/26/Hexo-Github-Backup/#%E5%9C%A8Github%E4%B8%8A%E5%A4%87%E4%BB%BD" target="_blank" rel="noopener">在Github上备份Hexo博客</a> </li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://threehao.com/2016/08/22/Github%20Pages%20+%20Hexo/" target="_blank" rel="noopener">利用Github Pages + Hexo搭建个人博客</a></li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a></li><li><a href="http://www.cylong.com/blog/2016/04/25/hexo-faq/" target="_blank" rel="noopener">Hexo 使用总结 &amp; 常见问题</a></li><li><a href="https://xuanwo.io/2014/08/14/hexo-usual-problem/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">Hexo常见问题解决方案</a></li><li><a href="http://blog.geekaholic.cn/2017/03/06/%E5%88%B6%E4%BD%9CHexo%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/" target="_blank" rel="noopener">制作Hexo主题详细教程（2）</a></li><li><a href="https://liam.page/2017/09/21/local-search-engine-in-Hexo-site/" target="_blank" rel="noopener">为 Hexo 博客创建本地搜索引擎</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录我将 GitHub 的个人博客从 Jekyll 迁移到 Hexo 的一些踩坑实践。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="GitHub" scheme="https://brianway.github.io/tags/GitHub/"/>
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>狼人杀新手进阶指南</title>
    <link href="https://brianway.github.io/2017/10/05/advanced-guide-to-werewolf-kill/"/>
    <id>https://brianway.github.io/2017/10/05/advanced-guide-to-werewolf-kill/</id>
    <published>2017-10-05T04:16:07.000Z</published>
    <updated>2019-04-07T16:16:59.871Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是未昊，之前答应过找完工作做一次狼人杀经验分享，录视频比较麻烦，所以就写一篇文章来向你展示一个 2.5 阶选手的狼人杀世界观。主要会从基本规则，基本/多重逻辑，心态视角等几个方面进行阐述。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文主要面向新手(打过几局，大致清楚规则)</li><li>本文主要偏介绍，旨在启发，没有过多探讨技巧性的东西</li></ul><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><p>狼人杀是一个发言+逻辑游戏，常见的是 9 人局或者 12 人局，下面我主要以 12 人局为例进行介绍。</p><p>所有玩家分为狼人阵营和好人阵营。一般是 4+4+4 的板子，即 4 张狼人、4 张神牌和 4 张村民牌。狼人晚上可以杀死一名玩家，所有玩家白天发言交流，所有玩家发言完毕后一起投票，得票最多的人出局。最终狼人杀光所有神牌或者所有村民牌，则狼人胜利；好人投票处决/杀死所有狼人，则好人胜利。</p><p>所以这个游戏从结果上是一个 <strong>抢轮次</strong> 的游戏，即无论好人还是狼人，都是以最快干掉敌对阵营的人为目的。能够分清楚每一轮的出人顺序和形势优劣，是区分一个玩家是否入门的依据。</p><h3 id="阵营介绍"><a href="#阵营介绍" class="headerlink" title="阵营介绍"></a>阵营介绍</h3><p>我一般玩两方阵营的，三方有点复杂，我玩的少。</p><ul><li>狼人：四张狼人牌晚上是可以睁眼相互认识队友的，所以狼队可以晚上交流信息、安排战术</li><li>神牌：一般比较平衡，出镜率最高的四张神牌是：预言家，女巫，猎人，白痴<ul><li>预言家：每晚可以知道一个玩家是好人还是狼人</li><li>女巫：有两瓶药(每瓶药整局游戏只能用一次，且同一晚不能同时用俩)，解药可以救一个人，毒药可以杀死一个人。（高端局为了游戏平衡，女巫只有第一天晚上可以救自己，甚至永远不能自救，游戏前需要沟通好）</li><li>猎人：被狼人杀死或者被投票死可以开枪打死一人，被毒死不能开枪</li><li>白痴：被投票出局不会死，可以继续发言，但不能投票了。</li></ul></li><li>村民：晚上全程闭眼，白天可以发言投票，没有特殊功能。</li></ul><p>以上就是常见的“预女猎白”的板子，根据偏好不同，白痴可换成守卫，即“预女猎守”，有守卫的话，一只普通狼人可以换成白狼王。</p><p>很多人拿狼人就很虚，仿佛自己是罪人一样，其实这是不对的，这个游戏叫“狼人杀”，不是“好人杀”，狼人赢是不可耻的，心态一定要摆正。</p><h3 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h3><p>一般玩多了，为了使发言简练（装逼），会有一些术语和行话，这里简单介绍一些。</p><ul><li>焊跳：狼人冒充预言家，称为“焊跳”</li><li>金水：预言家验出的好人。焊跳狼发的金水是“假金水”</li><li>查杀：预言家验出的狼人叫做“查杀”</li><li>银水：女巫夜里使用解药救起来的人</li><li>轮次：出人的顺序，本轮该出谁。例如“今天是 2 号的轮次，不是 3 号的轮次”</li><li>自刀：狼人杀人称之为“刀”，自刀就是狼人自杀</li><li>穿衣服：冒充别的角色。例如“穿女巫衣服”、“不要穿我衣服”</li><li>冲锋：狼人站队自己狼队友</li><li>倒钩：狼人冒充好人，混到好人队伍里帮好人玩</li><li>抗推：好人在白天被票出局</li><li>警徽：投票时多 1 票或者 0.5 票，拥有警徽的人即为警长</li><li>警长：好人玩家投票选举出来的领导者，可以指定发言顺序，警长 <strong>夜里</strong> 死后可以把警徽移交其他玩家</li><li>撕警徽：投票处决警长，白天被票死不可移交警徽，故称“撕警徽”</li><li>警徽流：一般都是预言家拿警徽，警徽流表示预言家打算验人的顺序，警徽流可以让好人多一轮验人信息。</li></ul><p>这里主要想说一下警徽流。假如没有警徽，狼人杀死预言家，预言家是没有遗言的（第二天开始，夜里死的人没有遗言），那预言家昨晚的验人就报不出来。所以有警徽流的话，验出好人，把警徽给他；验出狼人，把警徽给你之前验的好人或者撕掉。而为了防止狼人两连爆（比如，自曝刀预言家，被女巫救起来，再自曝一个继续刀，这样就会有两轮验人），一般会留两轮警徽流，示例发言：“警徽流先 3 后 5”或者“先验 3，再验 5”。验出一个好人一个狼人，警徽给那个好人；验出两个狼人，警徽外置位随便给（因为已经有两个狼人了，外置位好人多，狼人少，给到好人概率大）；如果验出两个好人，警徽撕掉（因为已经两个好人被验出，外置位狼多好人少）。所以预言家一定要尊重自己的警徽流，不要擅自修改。</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>狼人杀是一个有一定逻辑分析的游戏，里面有各式各样的逻辑，正逻辑、反逻辑、一重逻辑、多重逻辑，等等。有些是铁逻辑，有些则是“伪逻辑”。</p><h3 id="基本逻辑"><a href="#基本逻辑" class="headerlink" title="基本逻辑"></a>基本逻辑</h3><p>这个游戏只有一个逻辑是铁逻辑：<strong>真预言家</strong> 验出的金水，一定是好人，查杀一定是狼人。其他的东西都是可以正反解读的。所以游戏的关键，在于找准真的预言家，并以此为你的逻辑基点进行分析，一旦预言家找错了，后面的分析都是错的。</p><p>身份的高低：A 发 B 金水，那 B 的身份一定比 A 高，要出 B 之前一定要先出 A，理由很简单，觉得 B 是狼人的话，那 A 发的是假金水，则 A 一定焊跳狼而非预言家，得死在 B 前面。但 A 发 B 查杀，就不一定了，因为狼和预言家都可以发查杀。</p><h3 id="正反逻辑"><a href="#正反逻辑" class="headerlink" title="正反逻辑"></a>正反逻辑</h3><p>新手常犯的错误就是把“伪逻辑”当作“铁逻辑”，比如 A 查杀了 B，B 自曝，那 A 一定是好人？不一定，因为 A 是预言家可以查杀 B，A 是狼人也可以查杀自己狼队友 B，做好自己身份。但相反，A <strong>跳预言家且从未脱衣服</strong>，发 B 金水，结果 B 自爆，那 A 一定是狼人。</p><p>再比如：你是女巫，A、B 都跳了预言家 ，狼人 C 跳了一个女巫站队 A，你就觉得 B 是真预言家，A 是假的。一定吗？不一定，这只是正逻辑，还有反逻辑。因为 C 是不是狼、站队谁，和 A、B 谁是预言家一点关系都没有，C 完全可以故意站队真预言家 A，使你这个真女巫站到狼人 B 的队伍，这样他的目的就达到了。这招通常叫做“阴阳倒钩”。</p><p>类似的例子还有很多，新手往往只盘一层逻辑/正逻辑，而不盘反逻辑，比如 A 把 B 聊爆了，A 就是好人；另一种新手是只盘反逻辑，不盘正逻辑，比如总喜欢盘狼自刀（正逻辑就是夜里被刀的是好人）。这两种都是不对的，<strong>一个高手，应该正反逻辑都盘，综合判断后做出决策</strong> 。</p><p>下面聊聊 <strong>多重逻辑</strong>。其实狼人杀只有两层逻辑，正和反。反逻辑再进一层，就是所谓的三重逻辑，其实就是正逻辑了。比如，上文的“阴阳倒钩”，打多了的话，再有狼人 C 站队 A，你就会觉得 A 是预言家，狼人C 故意站队 A 来让你站错队（盘的反逻辑），那狼人可以反其道而行之，就明目张胆站队自己狼队友 A，打冲锋，在思维层级上属于第三层了，但从结果上看，就回到了新人都知道的最简单的正逻辑：C 是坏人，站队 A，那么 A 是坏人。当然这个推理并不是铁逻辑，因为 A、C 的身份是独立事件。</p><p>所以狼人杀的逻辑，无论往上怎么叠加，化简之后，就是两层：正逻辑和反逻辑，看你信哪个罢了。高手的厉害之处就在于，能够洞悉在场每位玩家的思维层级，然后用高你一级的思维层级来发言，让你站错队、投错票。</p><h2 id="心态视角"><a href="#心态视角" class="headerlink" title="心态视角"></a>心态视角</h2><p>既然逻辑有正有反，那怎么才能去伪存真呢？主要就是看心态和视角。</p><h3 id="轮次"><a href="#轮次" class="headerlink" title="轮次"></a>轮次</h3><p>首先，简单说一说“轮次”的问题，由于游戏结束条件极端情况下最快是“死 4 个人”，比如第一夜狼人杀了真预言家，白天把猎人投票出局，开枪带走女巫，第二天夜里再杀死白痴，游戏就结束了，这就是好人雪崩的对局。所以一般正常的进度都是狼人晚上杀“神牌”，好人白天投出去“狼人牌”。如果没有神牌没有毒药或者开枪等技能的话，就会杀一个神牌(或者村民)，投一个狼人…如此循环四次，总是先死好人，再死狼人，直至狼人杀死最后一个神牌(或者村民)，狼人一定赢。为了提高好人胜率，所以才有了毒药/开枪 等帮助好人抢轮次的功能。特别是女巫，可以追两个轮次（救一个人，毒一个人，各是一个轮次）。</p><p>狼人的游戏目的就是找出所有的神牌，杀死他们就赢了；好人的目的是找出所有狼人，投票/开枪打死/毒死，好人就赢了。一般优先杀 4 个神而不是 4 个村民，因为通常预言家必死，所以至少有一刀要用在预言家身上，如果刀民，就需要 5 刀，刀神只用 4 刀，不过特殊情况下也会刀民，比如女巫和猎人都弄死的是村民，或者刀神轮次不够，需要狼人混在民坑里，这时狼人可选择找民刀。</p><p>所以，很多新人打到最后都不清楚还剩几只狼人，觉得谁发言不好就投谁，处于懵逼状态，很容易被狼人蒙混过关。一旦算清楚轮次的话，把铁狼和疑似狼人出局的 X 身份算清楚，看看场上最好和最差情况分别是几只活狼，有助于对局势的把握；同理，狼人一旦发现狼人比好人多，或者最后的神牌已经确定的话，也没必要装了，直接绑票或者爆刀就行了。</p><p>一般的轮次顺序是：有查杀优先走查杀，对跳的神牌下轮再说，优先票明狼，再票冲票狼，最后是倒钩狼。如果搞不清轮次，可能会被狼人绑票投出好人。比如 A、B 跳预言家分别发 C、D 查杀，E、F 都跳白痴，且明显 E 像假白痴。这时肯定是 C、D 的轮次，要么信 A 出 C,要么信 B 出 D，F 是真白痴也不要投 E 分票。同理，如果 A、B 跳预言家分别发 C、D 金水，那么就是 A、B 的轮次，因为金水身份高于发他金水的预言家，这时就不要什么“两个预言家分不清，我们都留一轮，外置位投”了，就是拉开阵型站边搏杀了。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>最简单的是看预言家发言的状态，一般真预言家发言更轻松，焊跳狼则会紧张，这属于比较明显的心态对比。<br>再比如一个人拿了神牌往往底气比较足，一副老子很牛逼的态度，想 carry 好人，各种指点江山，这个角度仅供参考。还有，一个神牌被别人穿了自己的衣服，往往是很抵触的，会去关注和质疑那个人。</p><p>可能有些人比较看状态，但状态这个东西可以演，更有所谓的“情绪式发言”，所以我不太看，我更看一个人发言的逻辑和视角。</p><h3 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h3><p>视角这个东西，模仿起来难度比较高，需要你换位思考，身临其境地模拟别人，看看你在他那个位置，会发出什么样的言，如果他的发言和你出入过大，那可能有问题。这就需要你首先对各种角色都玩过，能够再现自己拿那个牌时在那个情景下的心态和心路历程。</p><p>比如一个预言家第一轮就在站边自己的人里盘倒钩狼，不敢打和自己作对的人，大概率是狼人焊跳，怕打到好人让好人产生逆反心理导致树敌太多，于是打站边自己的狼队友。比如狼人会默认吃刀的人是好人，不敢打（女巫可以知道，当然，狼人也故意猛打银水来装自己不知道夜里刀形，就涉及正反逻辑的判断了）。比如一个被查杀的人跳女巫，是拿毒威胁，疯狂踩全场，连银水都不报；还是万念俱灰，全程劝好人回头，讲清楚自己救人的心路历程。</p><p>狼人由于夜里吃信息，所以发言时会不自觉的透露一些闭眼村民不知道的信息。比如不小心透露出刀形，像一夜双死，不知道谁被刀谁被毒，他却知道；或者明显的谁被刀谁被毒，可以分析出来的，却闭口不谈，担心暴露自己，等等。</p><p>还有就是整个游戏的连贯性和故事性。不是逮着谁发言最差就投谁出去，而是要结合整个游戏的进程，弄清楚各个玩家之间的关系，因为好人可以发言很差，狼人可以发言很好，每次都需要联系前几轮 <strong>每个人的发言的关联</strong> 以及 <strong>每个人每一轮发言的差别</strong> 综合判断。例如明显场上还剩最后两狼一神了，这时有个前几轮发言很低调划水的人突然说自己是最后一神，要带票投 xx，你觉得他是挡刀概率大，还是找神刀的概率大？再比如一个人发言巨烂，被全场踩，他是一个要被抗推的好人，还是连狼队友都不要他的弃狼？</p><p>这个东西更多靠实战领悟，简单举例也不太好讲清楚，所以只是抛出这个角度供大家思考。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>狼人杀是一个老少咸宜的游戏，虽然本文通篇都是介绍狼人杀的“规矩”和“套路”，但我觉得游戏不按固定章法去玩也是别样的体验。希望高阶玩家可以对新人可以友好一点，大家玩的开心就好，不要因为新人没有“遵循规矩”而嫌弃或者喷人。当然，竞技向的话，狼人杀其实还涉及很多技巧，比如位置学、心理学、微表情、洗脑传销式发言等等，我还没有特别深入的钻研，以后有机会会慢慢学习，不断进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是未昊，之前答应过找完工作做一次狼人杀经验分享，录视频比较麻烦，所以就写一篇文章来向你展示一个 2.5 阶选手的狼人杀世界观。主要会从基本规则，基本/多重逻辑，心态视角等几个方面进行阐述。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://brianway.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://brianway.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何准备校招技术面试</title>
    <link href="https://brianway.github.io/2017/09/29/how-to-prepare-a-technical-interview/"/>
    <id>https://brianway.github.io/2017/09/29/how-to-prepare-a-technical-interview/</id>
    <published>2017-09-28T21:16:07.000Z</published>
    <updated>2019-04-07T16:16:59.827Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年互联网校招已近尾声，作为一个非 CS 专业的应届生，零 ACM 经验、零期刊论文发表，我通过自己的努力和准备，从找实习到校招一路运气不错，面试全部通过，谨以此文记录我的校招感悟。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>写作动机</strong></p><ul><li>记录自己的经历、反思与总结</li><li>在互联网上看到了很多前人的经验帖，作为回馈，也分享自己的经验</li><li>赚一点打赏(可扫描我个人网站里的二维码 <a href="http://brianway.github.io/about/">http://brianway.github.io/about/</a>)</li></ul><p><strong>你可以从这篇文章获取哪些信息</strong></p><ul><li>如何看待校招面试</li><li>以 <em>后台研发</em> 为例，校招技术面试的考核范围和难度</li><li>如何提升自己的技术内功(长期)</li><li>如何有针对性地做面试准备(短期)</li><li>面试交谈中的一些技巧</li><li>一线互联网公司的校招面试流程</li></ul><p><strong>这篇文章不能带给你什么</strong></p><ul><li>本文并不是速成宝典/突击手册</li><li>本文不会罗列面试原题和题解</li></ul><h2 id="我的面试经历"><a href="#我的面试经历" class="headerlink" title="我的面试经历"></a>我的面试经历</h2><p>春招找实习，投了三家（阿里，腾讯，美团），全部拿到实习 Offer，去了阿里。</p><ul><li>阿里：菜鸟网络；3 面技术电面 + 1 面 HR 视频面。二面布置了一个工程小作业，做了两天</li><li>腾讯：投的后台开发(事业群无意向)，被转到 SNG 运营开发；简历评级 S，2 面电话面试 + 线路现场面试 2 面技术 + 1 面 HR</li><li>美团：美团餐饮平台；2 面电话面试 + HR  直接通知 offer。历时一周多，最效率</li></ul><p>秋招为了稳妥地转正，拿一个好的评级，在专心准备转正面试，错过了提前批，正式批投了五家，面了三家（阿里，腾讯，网易），基本都是 special offer：</p><ul><li>阿里：菜鸟网络；成功转正，评级不错</li><li>腾讯：投的微信 Web 开发，被调到 IEG 后台开发(不知道为什么多了一个阿里实习，我的简历评级反而从 S 变成了  A+)；在线笔试 + 现场 2 技术面 + 1 HR面。HR 面时我期望薪资提的 sp 的价格，offer 报批中。</li><li>网易：跨境电商(考拉海购)；在线笔试 + 现场 2 技术面 + 1 HR 面。HR 说技术面评价不错，问题不大。结合身边同学，我应该是 sp。网易面试体验最好，面试官(尤其一面那位)很专业，很佩服</li><li>头条(放弃面试)：来校园宣讲，免笔试直接面试，没去</li><li>网易游戏(放弃面试)：计费应用系统开发；电话通知笔试过了，手里有 3 个 offer 了，就主动告知不面了。</li></ul><h2 id="如何看待校招面试"><a href="#如何看待校招面试" class="headerlink" title="如何看待校招面试"></a>如何看待校招面试</h2><p>招聘，对公司而言，是寻找劳动力；对员工而言，是寻找未来的同事。所以考核的东西肯定有如下几点：</p><ul><li>技术能力：招你进来是干活的，公司不是慈善机构，不养闲人，所以你需要 <strong>证明你能胜任这项工作</strong></li><li>学习能力/潜力：要能干活的走社招就行了，应届的优势就是潜力，你得  <strong>向公司证明值得培养你</strong></li><li>软技能：招你进来是和其他人共事的，所以为人处事、沟通能力、是否合群、三观等等， <strong>你的“调性”要和公司/组里的吻合</strong></li></ul><p>所以很多人挂的原因就很明显了：技术能力不佳，挂；看不到学习的悟性，只会已有技能，挂；聊天思路不清晰，沟通障碍，挂…………</p><p>当然，招聘本来就是一个双向选择的过程，公司在选择你的同时，你也在选择公司，比如工作要拼还是要 balance，这种事见仁见智。</p><h2 id="技术面试考核的技术范围"><a href="#技术面试考核的技术范围" class="headerlink" title="技术面试考核的技术范围"></a>技术面试考核的技术范围</h2><p>虽然面试考核的东西很多，但技术面试最主要的还是考核技术能力，记得学长告诉过我：<strong>“技术基础和项目经历，至少得有一个拿得出手”</strong>，所以下面谈谈所谓的“技术基础”。</p><p>我投的所有岗位都是 Java 研发，所以就以 Java 研发为例，以文字的形式写出大致的知识图谱/思维导图。很多我就只点到为止，不可能面面俱到。</p><ul><li>算法和数据结构基础<ul><li>数据结构：数组，链表，哈希表，堆，队列，栈，二叉树，B树/B+树，红黑树，图(研发问图不多)</li><li>常见的排序算法(冒泡，插入，快排，堆排，归并排序…)</li><li>简单的动态规划问题(背包，上楼梯)</li><li>各种时间空间复杂度分析</li></ul></li><li>Java 基础<ul><li>最基本的语言基础：语法，关键字含义，面向对象….</li><li>集合类(ArrayList, HashMap, ConcurrentHashmap…等等)</li><li>多线程(锁，CAS，线程池，concurrent 包下的类)</li><li>语言特性：反射，动态代理，泛型，Java 8 新特性</li><li>IO (装饰器模式，NIO)</li><li>JVM：内存模型，垃圾回收，类加载机制</li></ul></li><li>Java Web<ul><li>Tomcat，Servlet，JSP，Cookie/Session 等基本概念</li><li>框架使用和原理：Spring(AOP，IoC)，MyBatis 等</li></ul></li><li>数据库(主要是 MySQL)<ul><li>基本 SQL 语句，索引优化</li><li>存储引擎(InnoDB，MyISAM)，索引原理</li><li>事务 ACID，隔离级别</li><li>分库分表，主从复制，读写分离</li></ul></li><li>计算机网络<ul><li>OSI 7 层模型和 TCP 4 层模型</li><li>传输层：TCP/IP 相关知识，和 UDP 比较</li><li>HTTP 协议：报文结构，POST/GET 方法</li><li>网络编程 (socket, NIO, select 等)</li></ul></li><li>操作系统<ul><li>基本 Linux 的操作指令</li><li>进程/线程比较，进程间通信方式，P/V 操作</li><li>磁盘调度，虚拟内存</li><li>死锁，中断</li></ul></li></ul><p>1.这么多东西，从哪学起呢？</p><p>我自己的学习路线规划：技能的主线是 <strong>Java 语言基础 -&gt; Spring 框架开发业务 -&gt; 分布式系统解决高并发</strong>，基础方面 <strong>算法，网络协议，操作系统</strong> 带着学</p><p>2.学到什么程度呢？</p><ul><li>概念性的程度：了解是啥，能够口述含义</li><li>使用的程度：可以熟练使用，比如调用 API，写 SQL 查询</li><li>原理的程度：能够讲清楚底层实现</li><li>提出见解的程度：从任意技术可以引申出相关技术，并能够分析联系和区别，提出自己的见解和体会</li></ul><p>以上四种程度逐层加深，当然越深越好，<strong>通常前两种程度只能称之为“了解”；而写上简历迎接考核的，至少需要掌握到「原理」的程度</strong>。</p><p>比如，Java 你至少得看过常用类的 JDK 源码；数据库只会增删改查肯定不够，起码得把底层索引结构讲清楚；常见算法起码能讲清楚关键步骤，分析时间空间复杂度，并且 bug free 地写出来。</p><p><strong>技术储备是一切的基础，如果基础都不会，那后面的简历撰写，临场引导面试官等技巧根本无从下手</strong>，只有被虐的份</p><h2 id="如何提升自己的技术内功"><a href="#如何提升自己的技术内功" class="headerlink" title="如何提升自己的技术内功"></a>如何提升自己的技术内功</h2><p>“冰冻三尺非一日之寒”，功夫在平时，与其背面经寄希望于碰原题，不如扎实学习，以不变应万变。</p><p>可以通过  <strong>看书＋记笔记</strong> 的形式来学习，书上的代码可以对着敲一敲，学习笔记和代码可以发到 GitHub 上，用来展示自己的学习热情。</p><p>下面是我这一年多来看过的书，每一本我读之前都做了充分的调研和筛选，豆瓣评分一般都在 7~9 分：</p><ul><li>《算法》（第四版）图以前章节</li><li>《剑指 Offer》</li><li>《Java 编程思想》</li><li>《Java多线程编程核心技术》(高洪岩 著)</li><li>《Java 并发编程实战》</li><li>《深入理解 Java 虚拟机》</li><li>《Java 8 实战》</li><li>《鸟哥的 Linux 私房菜》</li><li>《MySQL 必知必会》</li><li>《Maven 实战》</li><li>《图解 HTTP》</li><li>《敏捷软件开发》</li><li>《架构探险－从零开始写 Java Web 框架》</li><li>《Spring 3.x 企业应用开发实战》</li><li>《Head First 设计模式》</li><li>《大型网站技术架构》（李智慧 著）</li><li>《大型网站系统与 Java 中间件实践》</li></ul><p>少看了一本《深入理解计算机系统》，所以被问到系统相关问题就很虚。</p><p>附上买书的截图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2017-9_%E4%B9%A61.jpg" alt="书1" title>                </div>                <div class="image-caption">书1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2017-9_%E4%B9%A62.jpg" alt="书2" title>                </div>                <div class="image-caption">书2</div>            </figure><p>我整理了一些学习笔记和源码：</p><ul><li>Java 语言基础的学习笔记可以参考我的 GitHub 仓库：<a href="https://github.com/brianway/java-learning" target="_blank" rel="noopener">java-learning</a></li><li>算法主要就是刷普林斯顿的算法公开课(偏重数据结构)和牛客网的课程<a href="https://www.nowcoder.com/study/vod/1" target="_blank" rel="noopener">《算法面试精品课》</a>，我整理的博客和每一题成功提交的源码：<a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">algorithms-learning</a>。后来才发现，70% 以上都和《剑指Offer》重复。</li><li>框架主要就是看视频，整理的学习笔记：<a href="http://brianway.github.io/2016/03/30/springmvc-learn-TOC/">springmvc+mybatis学习笔记(汇总)</a></li></ul><h2 id="如何有针对性地做面试准备"><a href="#如何有针对性地做面试准备" class="headerlink" title="如何有针对性地做面试准备"></a>如何有针对性地做面试准备</h2><p>首先 <strong>最重要的就是写简历</strong>，找工作就像相亲，简历就是颜值，在这个看脸的社会，只有长得过关，别人才愿意深入发掘你。从我面试的感受来说，通过与否，简历可以占到 50% 以上。</p><p>建议尽早的开始准备简历，因为写简历时才会发现自己的简历没什么东西可写，才会有一种危机感。如果等到校招才开始写，就晚了。</p><p>怎么写一个好的简历网上很多帖子，就不赘述了，这里简单说几点：</p><ul><li>亮点：名校本硕，专业排名，大赛获奖，名企实习。（如果一个没有只能自求多福）</li><li>技能：这些可能是面试官的提问点，不熟别写</li><li>项目：技术栈，难点，贡献/产出</li><li>事实：一万句“我学习能力很强”不如一句“我专业排名第一”，一万句“我爱打游戏”不如一句“我王者农药打了 1000 多盘，每天投入 4 小时以上”</li></ul><p>项目经历的提炼可以从以下几个方面着手准备，这些问题都可以事先想好，多口述演练，以免临场紧张出错</p><ul><li>基本问题<ul><li>项目简介</li><li>项目详解</li><li>项目用到的技术</li></ul></li><li>开放问题<ul><li>遇到的困难及解决</li><li>项目的优缺点及改进</li><li>收获</li></ul></li></ul><p><strong>没有项目经历可以自己找找开源的项目做，或者找一些自己感兴趣的方向做一些玩具项目</strong>，世上无难事，只怕有心人。</p><h2 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h2><p><strong>面试本质是信息沟通，是你向面试官展示你能胜任这个岗位，而不是一问一答。你应该尽量主导面试，引导面试官，而不是被动答题</strong>。即便同一个众人皆知的问题，也不应止步于答出来即可，要争取尽量回答的和别人不一样，展现出自己独到的研究和体会。</p><p>所以很多人疑惑：为什么我每一问都答上来了，为啥还挂了？多半就是自我感觉良好，其实答的不咋样，或者就是被面试官牵着鼻子走，给人一种是在背面经的感觉。其实很多问题没有标准答案，<strong>面试官看的是你解决问题的思路，思考问题的方式，而不是这个问题答案是什么</strong></p><p>我从自己被问过的问题和反思中简单说几点：</p><ul><li>1.不止步于问题，多展示自己会的</li></ul><p>比如最经典一个问题：输入一个网址到看到页面，经历了哪些过程。如果只是回答 DNS，OSI 的几层协议，那格局未免太小，同时会把面试官引导往网络协议提问，接踵而至的可能就是 TCP/IP(三次握手，TIME_WAIT，滑动窗口)，HTTP(keep-alive，HTTPS)等一系列协议细节，就把自己的展示机会限制在很小的范围了。</p><p>而这个问题其实可以从网站架构的层面先宏观描述，如 DNS，负载均衡，静态页面/动态页面，数据库访问，缓存，甚至前端的浏览器渲染等等，这样你可以聊得东西就很多，同时证明你有实际的项目经验，知道业界是如何做的，然后再回头把网络层面的东西简单提一提。</p><p>再比如被问到有哪些 hash 方法？因为一般都是问哈希冲突解决方法，很多人会说开放地址法，链表法等等。至于 hash 方法，真的有点懵逼，凭下意识说了一个取模(取余数)，答到这肯定不够，于是我把 Java 几个基本类型的包装类 Integer, Boolean, String 的 <code>hashcode</code> 方法的实现说了一遍，一方面作为例子填充回答，另一方面，表示我研究过 JDK 源码</p><ul><li>2.结合例子，不要背书</li></ul><p>譬如，被问到 AOP，IoC 这些概念时，不要官方的解释背一遍，最好结合自己的使用经验，把使用场景和感受到的好处说一下，会比较生动。</p><ul><li>3.从更高的层面去总结和阐释问题</li></ul><p>之前被问到“倒排索引”的问题时，我只是举了个例子把这个概念讲清楚了，后来觉得并不是太好，只是停留在解释的层面，如果能首先提纲挈领的来一句“一般的索引，是文档到单词的映射；而倒排索引，是单词到文档的映射”，整个回答的高度就不一样了。</p><p>再比如“二叉树搜索和哈希查找的区别”，如果能答出搜索二叉树是基于比较的排序，所以时间复杂度为 <code>O(log n)</code>，哈希查找是一个函数映射，所以能做到 <code>O(1)</code>，说明你不是背面经的。</p><ul><li>4.不会的先把丑话说在前面</li></ul><p>面试中难免会遇到不会的，这时千万不要不懂装懂，如果觉得有想法、能说一点，可以先坦诚承认自己不会，但愿意尝试回答一下，这样即使说错了，也不会被怼，因为你已经把场子捡开了。</p><p>比如当问到“JVM 如何标记要回收的内存”，我其实记不得了，就说不清楚，但标记无非就那么几种方法，所以提了两种：要么在每块内存留一点标识位(比如一个字节)来标识，要么另外用一个调度表之类的存储结构来统一记录和管理。这样还可以和面试官进一步交流学习。</p><ul><li>5.复盘反思</li></ul><p>每一场面完都要反思总结，看看哪里答得不好。如果是知识性的缺陷，就赶快补起来；知道答案但答得不好的，就重新组织措辞和表达方式；即使是回答上来的，也可以反思一下如何答得更好。</p><p>当然，<strong>所有技巧的前提，是认真踏实的基础准备</strong></p><h2 id="一线互联网公司的校招面试流程"><a href="#一线互联网公司的校招面试流程" class="headerlink" title="一线互联网公司的校招面试流程"></a>一线互联网公司的校招面试流程</h2><ul><li>笔试</li></ul><p>我觉得很多公司的笔试是过场，主要还是根据简历刷人。因为我笔试从来没全部 AC 过，但都通过笔试了，认识的一些朋友三题 AC，却没过笔试。</p><ul><li>电话面试</li></ul><p>有的大公司会全程电话面试(如阿里)，有的是先电话面试筛选简历，然后通知现场面(如网易)。电话面试的好处就是不用手写代码，缺点就是语言很多时候传递的信息是不够的，很多面部反馈、手势和图例都无法展示。</p><ul><li>现场面试</li></ul><p>大多数公司还是会安排现场面试，要么安排你去公司面试（大公司会报销路费），要么安排公司员工到你学校来，通常就是 2 面技术面＋1 面 HR 面 。每个公司风格不同，比如腾讯一般是一天一面，战线有三天，而网易是一天面完。</p><p>另外，<strong>其实校招的战线已经从每年的 9 月份提前到了 3 月份</strong>，尤其是阿里，实习生留用会占很大一个比例。所以希望认清紧迫的形式，越早准备越好。3 月能不能找到一个好的实习，对找工作影响还是挺大的，毕竟，如果没实习经历，那面试只能全程怼基础了，而基础是个无底洞。而且，手里是否有一个保底的转正 offer，你面试的心态是不一样的。</p><h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h2><ul><li>简历越早投越好：就像《中国好声音》导师转椅子一样，刚开始觉得不错的就啪啪啪四转，后来坑不够了，越来越纠结</li><li>只投一种岗位：我全程只投了“Java 研发岗/服务器端开发”，这样可以统一准备，避免战线过长</li><li>分梯度精投几个公司：不要海投，这样会疲于奔命，劳民伤财还没有时间准备。可以根据自己的能力，投几个不同档次的公司（如：高于自己水平的，希望比较大的，很有把握的，这几档），争取拿到保底的，冲刺心仪的，而不是看到一个公司招人就去面试。</li></ul><p>最后祝各位找工作顺利，这篇文章主要是写给学弟学妹的，希望尽早重视起来，开始准备。如果读完觉得有收获的话，欢迎给我打赏(<a href="http://brianway.github.io/about/">http://brianway.github.io/about/</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年互联网校招已近尾声，作为一个非 CS 专业的应届生，零 ACM 经验、零期刊论文发表，我通过自己的努力和准备，从找实习到校招一路运气不错，面试全部通过，谨以此文记录我的校招感悟。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://brianway.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://brianway.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(六)-字符串篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-6-string/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-6-string/</id>
    <published>2017-09-28T05:46:07.000Z</published>
    <updated>2019-04-07T16:16:59.873Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>字符串</strong> 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.string</code>包</li></ul><h2 id="最长无重复字符子串"><a href="#最长无重复字符子串" class="headerlink" title="最长无重复字符子串"></a>最长无重复字符子串</h2><p>题目见 <code>DistinctSubstring</code></p><p>思路：对于每个字符，向左延伸找无重复子串，要知道该字符(记为 <code>s[i]</code>)上次在哪个位置出现过，还要知道之前其他字符中出现过重复且最近一次出现重复的那个位置 pre，则以 <code>s[i]</code> 结尾的向左最长无重复的长度为: <code>s[i]</code> 上次出现位置和 pre 中较大者到现在 <code>s[i]</code> 的距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//例子1</span><br><span class="line">i:0 1 2 3 4 5</span><br><span class="line">s:b a c b a d</span><br><span class="line"></span><br><span class="line">i=4 =&gt; s[4] = a, pre = 0(b 重复了),map[a] = 1(a 上次出现在 i=1)</span><br><span class="line">    =&gt; cur = 4-1 = 3, 即 cba</span><br><span class="line">i=5 =&gt; s[5] = d, pre = 1(a 重复了), map[d] = -1</span><br><span class="line">    =&gt; cur = 5-1 =4, 即 cbad</span><br><span class="line"></span><br><span class="line">//例子2</span><br><span class="line">i:0 1 2 3 4 5</span><br><span class="line">s:a b c b a d</span><br><span class="line"></span><br><span class="line">i=4 =&gt; s[4] = a, pre = 1(b 重复了), map[a] = 0(a 上次出现在 i=0)</span><br><span class="line">    =&gt; cur = 4-1 = 3, 即 cba</span><br><span class="line">i=5 =&gt; s[5] = d, pre = 1(b 重复了), map[d] = -1</span><br><span class="line">    =&gt; cur = 5-1 =4, 即 cbad</span><br></pre></td></tr></table></figure><ul><li>使用一个哈希表 <code>map[256]</code> 来记录每种字符之前最新出现过的位置。</li><li>使用一个整型变量 pre 来记录以 <code>s[i-1]</code> 结尾的字符串向左延伸且无重复字符时的最左下标(不包括该下标)。</li></ul><p>对字符串中每个字符 <code>s[i]</code> 进行如下操作：</p><ol><li>对字符串中每个字符，找出 <code>pre</code> 和 <code>map[s[i]]</code> 中的较大值并更新为 <code>pre</code></li><li>以当前字符 <code>s[i]</code> 结尾向左无重复的长度则为 <code>cur = i - pre</code></li><li>根据这个 cur 和历史最大长度比较，更新最大长度</li><li>更新 <code>map[s[i]]</code> 为 i</li></ol><p>注意：</p><ul><li>map 中每个元素和 pre 均初始值为 -1</li><li>有个现象：当未出现过某字符且字符均未出现过重复时，<code>pre</code> 和 <code>map[s[i]]</code> 均为 -1, <code>cur = i+1</code>，cur 随 i 递增</li></ul><h2 id="拓扑结构相同子树"><a href="#拓扑结构相同子树" class="headerlink" title="拓扑结构相同子树"></a>拓扑结构相同子树</h2><p>题目见 <code>IdenticalTree</code></p><p>思路：</p><ol><li>使用特殊格式打印的二叉树中序遍历结果时唯一的，打印两个树的中序遍历字符串</li><li>使用 KMP 算法进行子串匹配，能匹配则</li></ol><p>注意：</p><ul><li>中序遍历时，空节点也要打印，所有值要以特殊字符结尾以免歧义</li><li>KMP 的原理、实现以及小优化<ul><li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">字符串匹配的KMP算法</a></li><li><a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener"> 从头到尾彻底理解KMP</a></li></ul></li></ul><h2 id="合法括号序列"><a href="#合法括号序列" class="headerlink" title="合法括号序列"></a>合法括号序列</h2><p>题目见 <code>Parenthesis</code></p><p>思路：每个右括号出现时必已有一个左括号与之对应，计数即可，正负抵消。对每个元素进行如下操作：</p><ol><li>遇到非括号字符返回 false</li><li>遇到左括号则计数器加一</li><li>遇到右括号则计数器减一，计数器为负值则返回  false</li><li>循环结束计数器值为零则 true，否则 false</li></ol><h2 id="拼接最小字典序"><a href="#拼接最小字典序" class="headerlink" title="拼接最小字典序"></a>拼接最小字典序</h2><p>题目见 <code>Prior</code></p><p>思路：排序不是以单个字符串来比较，而是把待比较的两个字符串(记为 sa 和 sb)拼接起来进行比较，即比较 sa+sb 和 sb+sa 的字典序</p><p>注意：</p><ul><li>由于两个串无论什么顺序拼接，拼接后字符串长度相同，所以无论谁在前，拼接后的串对其他字符串影响是一致的</li></ul><h2 id="空格替换"><a href="#空格替换" class="headerlink" title="空格替换"></a>空格替换</h2><p>题目见 <code>Replacement</code></p><p>思路：</p><ol><li>先统计下空格数量，分配空间</li><li>直接逐个字符复制，遇到空格就替换即可</li></ol><p>注意：</p><ul><li>新的字符串长度为 <code>length + 2 * count</code>，length 为原字符串长度， count 为空格个数，<code>%20</code>比空格多了两个字符</li></ul><h2 id="句子逆序"><a href="#句子逆序" class="headerlink" title="句子逆序"></a>句子逆序</h2><p>题目见 <code>Reverse</code></p><p>思路：</p><ol><li>先对整个字符串反转</li><li>再对以空格分隔的每个单词反转</li></ol><p>注意：</p><ul><li>能做到 in place 反转，无需额外空间，有点像“负负得正”</li><li>每个单词反转是以其末尾的空格触发的，所以对最后一个单词，需要单独判断处理</li></ul><h2 id="两串旋转"><a href="#两串旋转" class="headerlink" title="两串旋转"></a>两串旋转</h2><p>题目见 <code>Rotation</code></p><p>思路：</p><ol><li>判断两串是否长度相等</li><li>将原串与自身拼接，看另一字符串是否是拼接串的子串即可</li></ol><h2 id="词语变形"><a href="#词语变形" class="headerlink" title="词语变形"></a>词语变形</h2><p>题目见 <code>Transform</code></p><p>思路：</p><ol><li>判断两串长度是否相等</li><li>遍历 A 串，统计 A 串中每种字符出现的次数（计数累加）</li><li>遍历 B 串，做 2 中的统计结果做减法，若 B 中出现了 A 中未出现的字符或者 B 中某种字符出现次数比 A 多（表现形式为：减 1 前 <code>counts[b[i]] == 0</code>），返回 false，否则 true</li></ol><p>注意：</p><ul><li>遍历 B 串不是计数累加而是利用 A 的结果</li></ul><h2 id="字符串移位问题"><a href="#字符串移位问题" class="headerlink" title="字符串移位问题"></a>字符串移位问题</h2><p>题目见 <code>Translation</code></p><p>思路：以移位长度为分界点，分别将各部分对其中轴线做镜像反转，再对整个字符串以其中轴线做镜像反转。</p><ol><li>将下标 <code>0 ~ len-1</code> 的字符反转</li><li>将下标 <code>len ~ n-1</code> 的字符反转</li><li>将整个字符串 <code>0 ~ n-1</code> 反转</li></ol><p>注意：</p><ul><li>无需申请额外空间</li><li>各部分做了两次镜像反转，所以内部保持相对顺序不变</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;字符串&lt;/strong&gt; 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(五)-队列和栈篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-5-stack-and-queue/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-5-stack-and-queue/</id>
    <published>2017-09-28T05:45:07.000Z</published>
    <updated>2019-04-07T16:16:59.917Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>队列和栈</strong> 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.stack</code>包</li></ul><h2 id="构造-MaxTree"><a href="#构造-MaxTree" class="headerlink" title="构造 MaxTree"></a>构造 MaxTree</h2><p>题目见 <code>MaxTree</code></p><p>思路：使用一个栈来储存某个元素左边比它大的元素的下标，该栈满足这样的特性：栈中每个元素 m 以及 m 出栈后的栈顶元素 peek，总有对应的数组值 <code>arr[peek]</code> 为 <code>arr[m]</code> 向左数第一个比它大的数组值。下面的 1～3 步只是为了使栈保持这个特性。</p><p>对数组中每个元素，执行如下操作：</p><ol><li>将当前元素与栈顶元素对应的数组值进行比较。如果栈非空且栈顶元素对应的数组值小于当前数组值，则出栈，并根据当前数组值与出栈后栈顶元素对应的数组值相对大小来赋值结果数组。一直执行该操作直到循环结束</li><li>将当前元素下标对应的结果数组赋值<ul><li>栈为空则赋值为 -1</li><li>栈非空则赋值为栈顶元素</li></ul></li><li>将当前元素下标入栈</li></ol><p>注意：</p><ul><li>第 1，2 步中，比较时注意岀栈后栈为空的情况</li></ul><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>题目见 <code>SlideWindow</code></p><p>思路：使用一个双向队列来存储当前窗口里可能称为最大值的备选元素的下标。每次从头部取最大值，从尾部删除非备选项。</p><ol><li>对数组中每个元素，循环进行以下操作：</li><li>从双向队列尾部依次删除对应数组值小于当前数组值的元素，并将当前元素下标加入队列尾部</li><li>判断队列头部下标是否已经不在窗口内，若过期则删除</li><li>此时的队列头部元素对应的数组值即为滑动窗口内的最大值</li></ol><p>注意：</p><ul><li>尾部的为最新的值，头部的为较老的值</li><li>删除时注意队列为空的情况</li></ul><h2 id="得到栈最小元素"><a href="#得到栈最小元素" class="headerlink" title="得到栈最小元素"></a>得到栈最小元素</h2><p>题目见 <code>StackMin</code></p><p>思路：使用两个栈，一个数据栈，一个最小栈，每次入栈和岀栈时，同时更新两个栈即可。</p><p>注意：</p><ul><li>入栈：最小栈为空或者新元素 <strong>小于等于</strong> 其栈顶元素时才入栈</li><li>岀栈：最小栈栈顶元素等于数据栈栈顶元素时才出栈</li></ul><h2 id="栈的反转"><a href="#栈的反转" class="headerlink" title="栈的反转"></a>栈的反转</h2><p>题目见 <code>StackReverse</code></p><p>思路：利用递归函数和栈本身的 pop 操作来实现反转，分三步</p><ol><li>取出栈底元素<ul><li>弹出栈顶元素 current</li><li>若此时栈为空，说明已是栈底元素，则返回 current</li><li>若此时栈不为空，则取剩下的栈的栈底元素 last，并将 current 压入栈中，返回 last</li></ul></li><li>反转剩下的栈</li><li>将底部元素压入栈顶</li></ol><p>注意：</p><ul><li>反转栈和取出栈底元素这两个操作都是个递归调用</li></ul><h2 id="双栈实现队列"><a href="#双栈实现队列" class="headerlink" title="双栈实现队列"></a>双栈实现队列</h2><p>题目见 <code>TwoStack</code></p><p>思路：使用一个数据栈，一个辅助栈。两次“后进先出”的最终结果就是“先进先出”</p><ol><li>先将数组元素按顺序压入数据栈</li><li>再将数据栈中的数据全部依次弹出并压入辅助栈</li><li>从辅助栈中依次弹出栈顶数据即可</li></ol><p>注意：</p><ul><li>数据需要在两个栈中全部腾挪一遍</li><li>因为先进先出，无论什么时候出队，结果一样，所以无需按输入顺序一个一个出队，只用统计出队次数，一次性出队即可</li></ul><h2 id="双栈排序"><a href="#双栈排序" class="headerlink" title="双栈排序"></a>双栈排序</h2><p>题目见 <code>TwoStacks</code></p><p>思路：使用一个辅助栈，该辅助栈中的元素永远保持升序排列（即大的元素在栈顶）。简单来说就是每次将数据栈中的元素压入辅助栈，使得该元素位于辅助栈栈顶且最大，所以辅助栈若已有更大的元素，则回压给数据栈即可。进行如下的操作来是辅助栈保持这个特性，有点类似“插入排序”</p><ol><li>每次从数据栈弹出栈顶元素 m，依次和辅助栈的每个栈顶元素比较大小，若辅助栈栈顶元素较大，则将辅助栈栈顶元素压入数据栈，直到辅助栈为空或者 m 大于辅助栈栈顶元素为止</li><li>将该元素 m 压入辅助栈中</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;队列和栈&lt;/strong&gt; 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(四)-二分搜索篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-4-binarysearch/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-4-binarysearch/</id>
    <published>2017-09-28T05:44:07.000Z</published>
    <updated>2019-04-07T16:16:59.884Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>二分搜素</strong> 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.binarysearch</code>包</li></ul><h2 id="求完全二叉树的节点个数"><a href="#求完全二叉树的节点个数" class="headerlink" title="求完全二叉树的节点个数"></a>求完全二叉树的节点个数</h2><p>题目见 <code>CountNodes</code></p><p>思路：</p><ol><li>计算根节点到最左节点的高度 h</li><li>同理，计算根节点到其右孩子的最左节点的高度 hr</li><li>如果 h &gt; hr，则节点个数为：根节点右子树的节点数+1(根节点)+根节点左子树的节点数</li><li>如果 h &lt;= hr，则节点个数为 根节点左子树的节点数+1(根节点)+根节点右子树的节点数</li></ol><p>注意：</p><ul><li>计算 hr 时，<code>current = root.right</code>, 初始值为 1（代表根节点）</li><li>h &gt; hr，说明右子树为满二叉树，高度为 h-2，<code>根节点右子树的节点数+1</code> 可直接计算,为<code>2^(h-2)</code></li><li>同理，h &lt;= hr，说明左子树为满二叉树，高度为 h-1</li></ul><h2 id="最左原位"><a href="#最左原位" class="headerlink" title="最左原位"></a>最左原位</h2><p>题目见 <code>Find</code></p><p>思路：类似二分搜索，当 <code>a[i]=i</code>时终止，有序数组且元素各不相等，所有 a[i] 每次的增量是要大于下标 i 每次的增量 1 的。</p><ol><li>判断边界条件</li><li>lo = 0, hi = n-1，开始二分搜索</li><li>若 <code>a[i] &gt; i</code>，则 任意 j &gt; i，有 <code>a[j] &gt; j</code>，所以只可能出现在左半部分，故 hi = mid - 1</li><li>若 <code>a[i] &lt; i</code>，则 任意 j &lt; i，有 <code>a[j] &lt; j</code>，所以只可能出现在右半部分，故 lo = mid + 1</li></ol><p>注意：</p><ul><li>边界条件：<code>arr[0] &gt; n - 1 || arr[n - 1] &lt; 0</code> 时无解，直接返回</li><li>最后求得 <code>arr[mid] ＝ mid</code> -&gt; <code>res ＝ arr[mid]</code> 后，记得赋值 <code>hi = mid - 1</code> ，且不能跳出循环，因为要找 <strong>最左原位</strong>，所以需要继续循环下去。</li></ul><h2 id="元素最左出现"><a href="#元素最左出现" class="headerlink" title="元素最左出现"></a>元素最左出现</h2><p>题目见 <code>LeftMostAppearance</code></p><p>思路：这里就是一个简单的二分查找，唯一不同的是，当 <code>arr[mid] ＝ num</code> 时，不是在 <code>res ＝ mid</code> 后直接退出循环，而是需要赋值 <code>hi = mid - 1</code> 继续循环</p><h2 id="局部最小值位置"><a href="#局部最小值位置" class="headerlink" title="局部最小值位置"></a>局部最小值位置</h2><p>题目见 <code>LocalMin</code></p><p>思路：</p><ol><li>判断两端边界情况，满足条件（<code>arr[0]&lt;arr[1]</code> 或者 <code>arr[n-2]&gt;arr[n-1]</code>）则直接返回结果</li><li>判断 <code>arr[mid]</code> 和 <code>arr[mid - 1]</code> 的大小，若 <code>arr[mid]</code> 大，则一定有个局部最小出现在左边</li><li>否则，判断 <code>arr[mid]</code> 和 <code>arr[mid + 1]</code> 的大小，若 <code>arr[mid]</code> 大，则一定有个局部最小出现在右边</li><li>若都不满足，则局部最小为 <code>arr[mid]</code></li></ol><p>注意：</p><ul><li>注意数组为空，长度为 1，以及其他边界情况</li><li>思路中 2，3 步的依据就是，先有 1 中段边界判断，所以一定有两端元素大于其紧邻元素（<code>arr[0]&gt;arr[1]</code> 且 <code>arr[n-1]&gt;arr[n-2]</code>）。数组要么一直递减到边界的紧邻元素从而结束循环，要么在这个过程中遇到某个局部最小，所以一定是有解的。</li></ul><h2 id="循环有序数组最小值"><a href="#循环有序数组最小值" class="headerlink" title="循环有序数组最小值"></a>循环有序数组最小值</h2><p>题目见 <code>MinValue</code></p><p>思路：循环有序数组截出一个连续的子数组还是循环有序的。在每次循环中进行一下判断：</p><ol><li>若 <code>arr[lo] &lt; arr[hi]</code>，说明子数组已经升序，直接返回 <code>arr[lo]</code>。 否则，说明数组不升序，进行下面的步骤</li><li>若 <code>arr[lo] &gt; arr[mid]</code>，最小值出现在左半部分</li><li>若 <code>arr[lo] &lt; arr[mid]</code>，最小值出现在右半部分（因为说明 <code>arr[lo] ~ arr[mid]</code> 是升序的）</li><li>若 <code>arr[lo] ＝ arr[mid]</code>，最小值为第一个小于 <code>arr[lo]</code> 或者就是 <code>arr[lo]</code>本身</li></ol><p>注意：</p><ul><li>注意可能有重复元素的问题，所以在遇到 <code>arr[lo] = arr[mid]</code> 时，需要遍历 <code>lo ~ hi</code> 之间的元素来找到最小值</li><li>这里的左右指针更新需要注意，<code>hi = mid</code> 和 <code>lo = mid</code>,而不是 <code>mid-1</code> 和 <code>mid+1</code>,因为不能漏掉元素</li></ul><h2 id="快速N次方"><a href="#快速N次方" class="headerlink" title="快速N次方"></a>快速N次方</h2><p>题目见 <code>QuickPower</code></p><p>思路：求出 k 的 1，2，4，8….次方作为中间值 tmp，减少相乘的次数</p><ol><li>每次把 N 右移一位，若该位为 1，则将结果乘以中间值 tmp</li><li>每次令中间值 tmp 等于自己的平方（对应于第一步中的位移操作）</li></ol><p>注意：</p><ul><li>注意越界问题，按题目要求，求 mod 某个数后的结果</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;二分搜素&lt;/strong&gt; 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(三)-二叉树篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-3-binarytree/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-3-binarytree/</id>
    <published>2017-09-28T05:43:07.000Z</published>
    <updated>2019-04-07T16:16:59.833Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>二叉树</strong> 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.binarytree</code>包</li></ul><h2 id="判断是否为平衡二叉树"><a href="#判断是否为平衡二叉树" class="headerlink" title="判断是否为平衡二叉树"></a>判断是否为平衡二叉树</h2><p>题目见 <code>CheckBalance</code></p><p>思路：</p><ol><li>判断左子树是否为平衡二叉树，是则返回高度，不是返回 -1</li><li>判断右子树是否为平衡二叉树，是则返回高度，不是返回 -1</li><li>若左右子树均时平衡二叉树，则看两者高度差是否大于 1。是则返回 -1，不是则取两者中大的再加上 1</li></ol><p>注意：</p><ul><li>这里对返回值意义复用了，非负数则表示高度，负数表示不是平衡二叉树</li></ul><h2 id="判断是否为完全二叉树"><a href="#判断是否为完全二叉树" class="headerlink" title="判断是否为完全二叉树"></a>判断是否为完全二叉树</h2><p>题目见 <code>CheckCompletion</code></p><p>思路：</p><ol><li>使用队列，按层遍历二叉树，分以下几种情况依次判断：<ul><li>如果只有右孩子，返回 false</li><li>如果已经遍历过最后一个非叶子节点，当前节点还是非叶子节点，返回 false</li><li>如果左孩子非空，入队</li><li>如果右孩子非空，入队；如果右孩子空，表示该节点应为最后一个非叶子节点</li></ul></li><li>若遍历完，则是完全二叉树</li></ol><h2 id="找出搜索二叉树中换位的两个节点"><a href="#找出搜索二叉树中换位的两个节点" class="headerlink" title="找出搜索二叉树中换位的两个节点"></a>找出搜索二叉树中换位的两个节点</h2><p>题目见 <code>FindErrorNode</code></p><p>思路：</p><ol><li>中序遍历二叉树，找到出现降序的节点。第一次出现降序的较大值为换位的两个节点中的较大值，最后一次降序的较小值为换位节点中的较小值</li></ol><p>注意：</p><ul><li>可能出现一次降序，可能出现两次降序。<ul><li>若出现一次降序，则这两个值就是换位节点；</li><li>若出现两次降序，则第一次降序的较大值和第二次降序的较小值为换位节点</li></ul></li><li>可以用非递归方式中序遍历二叉搜索树来实现</li></ul><h2 id="打印纸的折痕"><a href="#打印纸的折痕" class="headerlink" title="打印纸的折痕"></a>打印纸的折痕</h2><p>题目见 <code>FoldPaper</code></p><p>思路：</p><ol><li>使用一个队列才存结果</li><li>每个 fold 里，先递归调用 fold，再将当前折痕方向入队，再递归调用 fold</li><li>从队列依次取出折痕即可</li></ol><p>注意：</p><ul><li>每个 fold 里的前后两次调用，方向相反，一上一下，和折纸方向有关</li></ul><h2 id="二叉树整棵树上节点间最大距离"><a href="#二叉树整棵树上节点间最大距离" class="headerlink" title="二叉树整棵树上节点间最大距离"></a>二叉树整棵树上节点间最大距离</h2><p>题目见 <code>LongestDistance</code></p><p>思路：</p><ol><li>递归的调用 find,每步迭代更新这两个值(当前子树的节点最大距离，到当前子树根结点的最大长度)：(MaxLength,MaxToRoot)，并将其返回</li><li>当前的 MaxToRoot = max(左子树的 MaxToRoot,右子树的 MaxToRoot) + 1</li><li>当前的 MaxLength ＝ max(一边的最大距离，两边的最大距离)<ul><li>一边的最大距离 ＝ max(左子树的 MaxLength,右子树的 MaxLength)</li><li>两边的最大距离 ＝ 左子树的 MaxToRoot + 右子树的 MaxToRoot + 1</li></ul></li></ol><p>注意：</p><ul><li>需要返回两个值，所以用数组当返回类型</li><li>分类/划分标准和思路理清了，代码很简单</li></ul><h2 id="找到含有节点最多的搜索二叉子树"><a href="#找到含有节点最多的搜索二叉子树" class="headerlink" title="找到含有节点最多的搜索二叉子树"></a>找到含有节点最多的搜索二叉子树</h2><p>题目见 <code>MaxSubtree</code></p><p>思路：</p><ol><li>需要记录满足条件搜索二叉树的最大值，最小值，节点个数，记为数组 <code>info[]</code>，并返回该搜索二叉树的根节点</li><li>每一步递归对左孩子和右孩子调用，然后分情况讨论<ul><li>左孩子的调用结果是左孩子，右孩子的的调用结果是右孩子，且左右孩子和根节点满足大小关系，更新上述 <code>info[]</code>，返回根节点</li><li>不满足上面的条件则从左右调用结果中选择节点个数大的结果（题目要求），更新上述 <code>info[]</code>，返回调用结果</li><li>左右节点个数相等，选择根结点值大的，更新上述 <code>info[]</code>，返回调用结果</li></ul></li></ol><p>注意：</p><ul><li>空节点判断，数组初始化(最大值，最小值，个数0)</li><li>更新 <code>info[]</code> 时，尤其对情况一，需要判断左右孩子是否为空的情况</li></ul><h2 id="按层打印二叉树并换行"><a href="#按层打印二叉树并换行" class="headerlink" title="按层打印二叉树并换行"></a>按层打印二叉树并换行</h2><p>题目见 <code>TreePrinter</code></p><p>思路：</p><ol><li>使用队列，先将根节点入队</li><li>使用两个指针 last 和 nlast 分别代表当前行的最后一个节点和下一行的最后一个节点，初始值均为 root</li><li>每次从队列取出一个节点，并将其左右节点入队，每入队一个，更新 nlast 为入队的节点</li><li>判断当前取出的节点是否为 last，若是，则说明这时此行最后一个，故更新 last = nlast</li></ol><p>注意：</p><ul><li>每出队一个节点，入队其左右孩子，这里 <strong>每次</strong> 都需要更新 nlast，因为不知道下一行在何时开始没新节点加入</li><li>结尾条件需要注意，只有当前节点为 last 且此时队列还非空时，才进行 last 的更新，同时换行，非空这个需要判断，否则会多出一个空行</li></ul><h2 id="递归方式实现二叉树的先序、中序和后序的遍历"><a href="#递归方式实现二叉树的先序、中序和后序的遍历" class="headerlink" title="递归方式实现二叉树的先序、中序和后序的遍历"></a>递归方式实现二叉树的先序、中序和后序的遍历</h2><p>一定是先左后右，先序、中序和后序指的是根节点遍历的先后</p><p>题目见 <code>TreeToSequence</code></p><p>思路：</p><ol><li>递归调用即可，终止条件是该节点为 null</li><li>不为 null，则将二叉树的“左”，“根”，“右”按遍历顺序的要求打印</li></ol><p>注意：</p><ul><li>没啥注意的，三四行代码就完了</li></ul><h2 id="非递归方式实现二叉树的先序、中序和后序的遍历"><a href="#非递归方式实现二叉树的先序、中序和后序的遍历" class="headerlink" title="非递归方式实现二叉树的先序、中序和后序的遍历"></a>非递归方式实现二叉树的先序、中序和后序的遍历</h2><p>题目见 <code>TreeToSequence2</code></p><p>都是使用 <strong>栈</strong> 来实现的</p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>思路：有点像深度优先遍历</p><ol><li>使用一个栈，先将根节点压栈，当栈非空时进行以下步骤</li><li>每次出栈一个节点，并先将其右孩子压栈，再将其左孩子压栈</li></ol><p>注意：</p><ul><li>利用栈“后进先出”的特性，使得右孩子会在左孩子之后出栈</li></ul><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>思路：</p><ol><li>使用栈，先将根节点入栈，当栈非空时进行以下步骤</li><li>当当前节点和其左孩子均不为空时，将其左孩子入栈，当前节点指向左孩子</li><li>当当前节点为空或者左孩子为空时，从栈顶取出一个，并将当前节点指向右孩子(可能为空)。若该取出的节点有右孩子，则将右孩子入栈。</li></ol><p>注意：</p><ul><li>“当前节点左孩子为空则出栈”用于触发左子树到顶的情况</li><li>“当前节点为空则出栈”用于触发右孩子为空的回退</li></ul><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>思路：核心在于使用最近访问节点 last 来标记是从左孩子还是右孩子遍历完返回的，从而确定是入栈还是出栈</p><ol><li>使用栈，先将根节点入栈，当栈非空时进行以下步骤</li><li>每次查看栈顶节点(但不出栈)，根据栈顶节点的情况分类判断：<ul><li>左孩子非空且上次访问既不为左孩子也不为右孩子，则左孩子入栈</li><li>否则，若右孩子非空且上次访问不为右孩子，则右孩子入栈</li><li>否则，表示此时左右孩子均为空或均访问过，栈顶出栈，并记为最近访问节点 last</li></ul></li></ol><p>注意：</p><ul><li>按上面的逻辑左孩子出栈后，右孩子才会入栈，所以是先左后右的顺序</li><li>右孩子是上次访问的节点时，前两条都不满足，所以一定会是孩子的根结点出栈</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;二叉树&lt;/strong&gt; 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(二)-链表篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-2-linkedlist/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-2-linkedlist/</id>
    <published>2017-09-28T05:41:00.000Z</published>
    <updated>2019-04-07T16:16:59.807Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>链表</strong> 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.linkedlist</code>包</li></ul><p><strong>记号约定：链表未特殊说明则未单链表</strong></p><h2 id="判断一个单链表是否有环"><a href="#判断一个单链表是否有环" class="headerlink" title="判断一个单链表是否有环"></a>判断一个单链表是否有环</h2><p>题目见 <code>ChkLoop</code></p><p>思路：</p><ol><li>判断环：使用快慢两个指针遍历链表，快指针一次移动两个节点，慢指针一次移动一个节点。终止条件为遍历到链表结尾或者快指针和慢指针相遇</li><li>找入环第一个节点：假如快慢指针相遇，则此时将慢指针指向头节点，然后均以每次一个节点的速度同步移动快慢指针，再次相遇点即为入环点</li></ol><p>注意：</p><ul><li>快指针移动时需要判断 next 和 next.next 均不为空才行</li><li>第二步的证明可以参考<ul><li><a href="http://blog.csdn.net/wuzhekai1985/article/details/6725263" target="_blank" rel="noopener">http://blog.csdn.net/wuzhekai1985/article/details/6725263</a></li><li><a href="http://blog.sina.com.cn/s/blog_6a0e04380101a9o2.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_6a0e04380101a9o2.html</a></li></ul></li></ul><h2 id="判断两无环单链表是否相交"><a href="#判断两无环单链表是否相交" class="headerlink" title="判断两无环单链表是否相交"></a>判断两无环单链表是否相交</h2><p>题目见 <code>CheckIntersect</code></p><p>思路：</p><ol><li>分别遍历两个链表，得到长度 l1 和 l2</li><li>将较长的链表先遍历 <code>|l1-l2|</code> 个节点，再对两个链表同步遍历</li><li>若在遍历完前有相同节点，则相交，否则不相交</li></ol><p>注意：</p><ul><li>用新的变量指向链表，不要影响原链表结构</li></ul><h2 id="判断两有环单链表是否相交"><a href="#判断两有环单链表是否相交" class="headerlink" title="判断两有环单链表是否相交"></a>判断两有环单链表是否相交</h2><p>题目见 <code>ChkIntersection</code></p><p>思路：</p><ol><li>先判断两链表是否均有环，有一个无环则不相交</li><li>若入环节点一样，则相交</li><li>若入环节点不一样，则从一个入环点往后遍历，若能和另一个链表的入环点相遇则相交，若遍历回自己的入环点还没相遇，则不相交</li></ol><p>注意：</p><ul><li>第 3 步里从一个入环点往后遍历，注意起始条件</li></ul><h2 id="判断两单链表是否相交"><a href="#判断两单链表是否相交" class="headerlink" title="判断两单链表是否相交"></a>判断两单链表是否相交</h2><p>题目见 <code>ChkIntersection2</code></p><p>思路：为前面几题的整合</p><ol><li>先判断两链表是否均有环</li><li>若均无环，按照“判断两无环单链表是否相交”来解</li><li>若均有环，按照“判断两有环单链表是否相交”来解</li><li>若一个有环，一个无环，则不相交</li></ol><h2 id="删除特定值的节点"><a href="#删除特定值的节点" class="headerlink" title="删除特定值的节点"></a>删除特定值的节点</h2><p>题目见 <code>ClearValue</code></p><p>思路：</p><ol><li>找到第一个不为特定值的节点作为新的头节点</li><li>使用双指针 pre 和 current，current 用于依次遍历，pre 用于跳过为特定值的节点，只依次经过满足条件的其余节点</li></ol><p>注意：</p><ul><li>一定要循环跳过头节点里为特定值的节点，第二步必须以非特定值节点或者空节点开始</li><li>pre 和 current 的初始化以及移动赋值细节要留意</li></ul><h2 id="打印两个升序链表公共部分"><a href="#打印两个升序链表公共部分" class="headerlink" title="打印两个升序链表公共部分"></a>打印两个升序链表公共部分</h2><p>题目见 <code>Common</code></p><p>思路：</p><p>新建一个数组用于容纳公共部分，同时遍历两个链表，根据当前的节点值分情况进行处理：</p><ol><li>一个链表当前节点值大于另一个链表当前节点值，则较小值的链表节点向后移动一步</li><li>两个链表当前值相等，将公共部分存入数组，两个链表均向后移动一步</li></ol><h2 id="复制复杂链表"><a href="#复制复杂链表" class="headerlink" title="复制复杂链表"></a>复制复杂链表</h2><p>题目见 <code>CopyList</code></p><p>思路：</p><ol><li>在每个节点的后面插入该节点的直接拷贝</li><li>对每个 copy 节点，更新其 random 指针为 random 指向节点的下一个节点(即指向其对应 copy 节点)</li><li>将 copy 节点从中分离出来即可</li></ol><p>注意：</p><ul><li>该题的难点主要在于每个节点的随机指针不是简单的直接拷贝就行了（那样会指向原链表中的节点），而需要在复制的链表里指向对应的复制节点</li><li>无论是插入拷贝还是分离节点，都要注意空指针判断和更新指针操作</li></ul><h2 id="链表partition"><a href="#链表partition" class="headerlink" title="链表partition"></a>链表partition</h2><p>题目见 <code>Divide</code></p><p>思路：</p><ol><li>使用两个链表分别收集大于阈值和小于等于阈值的节点</li><li>每次取出当前节点，归入其中一个链表，原链表向后移动一个</li><li>将两个链表首尾相连即可</li></ol><p>注意：</p><ul><li>两个链表的首尾节点都要记录</li><li>大于/小于等于的划分要全覆盖</li><li>取出的节点记得“断尾”，即  next 置为 null</li></ul><h2 id="有序环链表中插入值"><a href="#有序环链表中插入值" class="headerlink" title="有序环链表中插入值"></a>有序环链表中插入值</h2><p>题目见 <code>InsertValue</code></p><p>思路：</p><ol><li>以一个节点(head)开始，用两个指针指向前后相邻的节点依次向后遍历，满足 <code>pre.val &lt;= val &lt; after.val</code> 则插入并停止遍历</li><li>若遍历完(<code>after == head</code>)，说明还没插入，此时应插入在 head 前</li><li>若 val 比 head.val 小，则更新头节点</li></ol><p>注意：</p><ul><li>注意空链表时该节点自己组环</li><li>插入节点时判断条件，前后的开闭要注意，<code>[pre,after)</code> 还是 <code>(pre,after]</code></li><li>注意特殊情况，此时不满足 <code>pre.val&lt;=val&lt;after.val</code>（例如环全等，插入值是最小/最大等），这时需要插入在头节点之前及更新头节点</li></ul><h2 id="链表K逆序"><a href="#链表K逆序" class="headerlink" title="链表K逆序"></a>链表K逆序</h2><p>题目见 <code>KInverse</code></p><p>思路：</p><ol><li>用 kHead 指向每次 k 个节点的头节点（初始值为头节点）</li><li>遍每计数到 k 时，逆序这部分并返回逆序后的头节点<ul><li>若新的头节点为空，则初始化新的头节点</li><li>否则，将该返回的头节点接在上次逆序完的尾节点 lastTail 后</li></ul></li><li>更新 lastTail 指向该次逆序完的尾节点(即逆序前的 kHead)</li><li>更新 kHead 指向下一个节点继续重复上述步骤直到遍历结束</li></ol><p>逆序部分：</p><ol><li>使用 pre, current, next 分别指向当前节点及其前后节点</li><li>每次先用 pre 保存 newHead，用 next 保存 current.next；再更新 newhead 为 current，更新 newHead.next 指向 pre；最后移动 current 指向 next 即可</li><li>进一步优化，其实只需要 pre 和 current 两个指针就够了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通反转整个链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">    ListNode current = head;</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(current != <span class="keyword">null</span>)&#123;</span><br><span class="line">        pre = newHead;</span><br><span class="line">        newHead = current;</span><br><span class="line">        current = current.next;</span><br><span class="line">        newHead.next = pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>逆序前需要用 next 指针保留好下一个节点，这样才能正确更新 kHead</li><li>注意循环中计数和清零的位置</li><li>逆序部分，需要把之前的头的 next 置为原末尾的 next，衔接起来</li></ul><h2 id="检查链表是否回文"><a href="#检查链表是否回文" class="headerlink" title="检查链表是否回文"></a>检查链表是否回文</h2><p>题目见 <code>Palindrome</code></p><p>思路：</p><ol><li>通过快慢指针得到链表中点</li><li>将后一半链表逆序</li><li>分别从头尾向中间遍历链表依次比较值，不等则停止，看能否在中点相遇</li><li>将逆序链表还原</li></ol><p>注意：</p><ul><li>注意逆序需要根据链表总节点数的分单双讨论<ul><li>单数(<code>quick.next = null</code>)则 slow 指向正中间的节点，所以设置 <code>mid = slow</code></li><li>双数时 slow 指向前一半的最后一个节点，所以设置 <code>mid = slow.next</code></li></ul></li><li>双数时从两头遍历前需要将 slow.next 置为 null，否则两边遍历终止条件不同</li></ul><h2 id="删除单节点"><a href="#删除单节点" class="headerlink" title="删除单节点"></a>删除单节点</h2><p>题目见 <code>Remove</code></p><p>思路：</p><ol><li>若该节点为空或者为最后一个节点，返回 false</li><li>否则将下一个节点的 val 和 next 赋值给当前节点，达到“删除”的效果</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;链表&lt;/strong&gt; 有关的常见算法基础题思路分类进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见算法基础题思路简析(一)-排序篇</title>
    <link href="https://brianway.github.io/2017/09/28/algorithms-common-1-sort/"/>
    <id>https://brianway.github.io/2017/09/28/algorithms-common-1-sort/</id>
    <published>2017-09-28T05:16:07.000Z</published>
    <updated>2019-04-07T16:16:59.957Z</updated>
    
    <content type="html"><![CDATA[<p>本文对和 <strong>排序</strong> 有关的常见算法基础题思路进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节</p><a id="more"></a><ul><li>相关题目和代码在 GitHub: <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">https://github.com/brianway/algorithms-learning</a></li><li>题目见 <code>com.brianway.learning.algorithms.lectures.sort</code>包</li></ul><p><strong>记号约定：按升序排，数组 A 大小记为 n</strong></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>思路：</p><ol><li>依次交换相邻两个数，使大的在后，每趟在末尾确定一个最大值</li><li>外循环 n 趟依次确定最大值，次大值，….，确定排序</li></ol><p>注意：</p><ul><li>内循环的相邻元素下标写法和内循环下标起始</li></ul><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>思路：</p><ol><li>找到数组最大值 max 和最小值 min，以差值(max-min)作为桶数组的长度</li><li>遍历数组入桶计数</li><li>遍历桶，写回原数组</li></ol><p>注意：</p><ul><li>入桶时，对应桶下标为 <code>A[i]-min</code></li><li>写回数组时下标依次递增， <code>A[i++] = j + min;</code></li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>思路：</p><ol><li>初始化成大根堆</li><li>将堆顶元素(即最大值)和末尾元素交换，并下沉该换上来的末尾元素</li><li>将堆的长度减1，重复第二步</li></ol><p>注意：</p><ul><li>下标从 1 开始较方便，子节点下标就对应为 <code>2*i</code> 和 <code>2*i+1</code></li><li>初始化时从一半位置依次递减下标使用下沉操作</li><li>下沉操作挑子节点中较大值与父节点交换，<strong>直至</strong> 满足父节点大于两个子节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] pq, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; N &amp;&amp; less(pq, j, j + <span class="number">1</span>)) j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(pq, k, j)) <span class="keyword">break</span>;</span><br><span class="line">        exch(pq, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>思路：</p><ol><li>将数组前一部作为一个“有序数组”，该“有序数组”长度逐步扩大</li><li>每趟循环将当前元素依次和前一个元素比对，插入到“有序数组”中的相应位置</li></ol><p>注意：</p><ul><li>注意下标起始，外循环 n-1 次，内循环下标递减</li><li>插入效果可以使用两两相邻交换来实现</li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>这里使用非递归的 bottom-up 的实现方式</p><p>思路：</p><ol><li>每次合并的单位长度为 size ， size 依次取 1，2，… ，直到 size&gt;=n</li><li>对于每个 size，从前往后按照步长为 2*size 依次合并</li><li>归并的内部逻辑是，先从原数组拷贝一份到辅助数组，再按序填回原数组</li></ol><p>注意：</p><ul><li>需要分配一个辅助数组用于合并</li><li>每次合并需要传递五个参数：原数组，辅助数组以及合并的起止下标和中点下标</li><li>归并的截止下标需要取小避免越界 <code>Math.min(n, i + 2 * size);</code></li><li>内循环的终止条件是 <code>i + size &lt; n</code>，步长是 <code>2*size</code></li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>思路：</p><ol start="0"><li>shuffle(可选):先把原数组随机打乱</li><li>partition:随机选一个数作为参考值，比其小的放左边，大的放右边</li><li>递归地排序上述结果的左半部分和右半部分</li></ol><p>注意：</p><ul><li>一般参考值就取第一个元素，对后面的元素进行划分</li><li>划分时注意循环终止条件，大于小于带不带等号，都要注意</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>思路：</p><ol><li>每次遍历一趟挑取最小元素，将该元素与起始元素交换</li><li>起始元素下标依次为0，1，…，n-1</li></ol><p>注意：</p><ul><li>比较的是值，记录的是下标</li></ul><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>以元素小于等于 2000 为例，位数为 4</p><p>思路：</p><ol><li>准备一个 10*n 的桶数组(10 代表 0～9 的数字，n代表某个数字下最多容纳的个数，这里为原数组大小 n)</li><li>由低位到高位，将3，4步执行位数次循环</li><li>遍历数组，按照某一位的数字将元素入桶</li><li>从大数字到小数字，依次将桶内元素从后往前写回原数组</li></ol><p>注意：</p><ul><li>需要两个辅助数组，一个用于存放元素，一个用于记录每个数字桶的元素个数</li><li>入桶时一定要先低位，再高位，这样才能保证最高位影响最大</li><li>取桶内元素返到数组时一定要倒着取，这样才能保证之前排序的顺序</li></ul><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>思路：</p><ol><li>对数组进行步长为1，4，13,…,（3*前一个步长+1）的插入排序，步长由大到小</li></ol><p>注意：</p><ul><li>最外层先计算好最大步长，每次除以三</li><li>插入排序的外层起始下标为 h，每次下标递增 1</li><li>插入排序的内层递减步长为 h</li></ul><h2 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h2><p>题目:<code>Merge</code></p><p>思路：</p><ol><li>从两个数组末端取值，每次取较大者，从后往前填空</li><li>当数组 B 的元素分配完时结束</li></ol><h2 id="判断数组中是否有重复值"><a href="#判断数组中是否有重复值" class="headerlink" title="判断数组中是否有重复值"></a>判断数组中是否有重复值</h2><p>题目见 <code>Checker</code></p><p>时间最快 O(n)，遍历一遍使用哈希表即可。</p><p>若要保证额外空间复杂度为O(1)，则使用排序，再遍历，看相邻是否有重值</p><h2 id="行列排序矩阵找值"><a href="#行列排序矩阵找值" class="headerlink" title="行列排序矩阵找值"></a>行列排序矩阵找值</h2><p>题目见 <code>lectures.sort.Finder</code></p><p>思路：由于行列分别有序（升序），从矩阵右上/左下开始找均可在 O(行数＋列数) 时间复杂度找到。以右上为例，当前数大于待找数，则同行往前找，否则同列往下找。</p><h2 id="排序后相邻两数的最大差值"><a href="#排序后相邻两数的最大差值" class="headerlink" title="排序后相邻两数的最大差值"></a>排序后相邻两数的最大差值</h2><p>题目见 <code>Gap</code></p><p>直接排序做最快是  O(n*log n)的时间复杂度，这里讨论的是 O(n) 的时间复杂度</p><p>思路：来源于桶排序</p><ol><li>找到数组的最大值和最小值，准备 n+1 个桶（n为数组元素个数）</li><li>最大值放在第 n+1 个桶中，其它桶以 (max-min)/n 的间隔均匀分布（所以最小值一定落在第一个第一个桶中）</li><li>将数组中元素依次落入桶中，找出空桶前的桶内元素的最大值和空桶后的桶内元素的最小值，求差即可</li></ol><p>注意：</p><ul><li>n+1 个桶放 n 个元素，一定会有空桶，同一桶内元素的差值一定小于桶区间，所以来自不同桶之间的相邻元素差值更大。</li><li>分别使用 <code>hasNum[n+1]</code>, <code>maxs[n+1]</code>, <code>mins[n+1]</code> 来表示桶是否为空以及桶内元素的最大最小值</li></ul><h2 id="计算需要排序的最短子数组的长度"><a href="#计算需要排序的最短子数组的长度" class="headerlink" title="计算需要排序的最短子数组的长度"></a>计算需要排序的最短子数组的长度</h2><p>题目见 <code>Subsequence</code></p><p>思路：</p><ol><li>从左到右遍历，记录元素值比该元素左边的最大值要小的最右下标 right</li><li>从右往左遍历，记录元素值比该元素右边的最小值要大的最左下标 left</li><li>如果 right &gt; left，则需要排序的长度为 right-left +1</li></ol><p>注意：</p><ul><li>right 的初始值为 0，left 的初始值为 n-1</li><li>遍历的每一步，要么满足递增（减），更新最大（小）值；要么更新下标</li></ul><h2 id="荷兰旗问题"><a href="#荷兰旗问题" class="headerlink" title="荷兰旗问题"></a>荷兰旗问题</h2><p>题目见 <code>ThreeColor</code></p><p>思路一：计数排序，先入桶再出桶即可。</p><p>思路二：类似三路快排，下标[0,lo]，(lo,mid]，(mid,n-1] 之间的元素各表示一个数值区间</p><p>注意：</p><ul><li>lo, hi, mid 的起始值要注意</li><li>交换时的增减顺序要注意，参考示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lo = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> hi = n;</span><br><span class="line"><span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (mid &lt; hi) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A[mid] &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        swap(A, ++lo, mid++);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        swap(A, --hi, mid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mid++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对和 &lt;strong&gt;排序&lt;/strong&gt; 有关的常见算法基础题思路进行分析和总结，并以 Java 为例，适当指出需要注意的编程细节&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局经典问题初步整理</title>
    <link href="https://brianway.github.io/2017/05/18/css-layout-classical-problems/"/>
    <id>https://brianway.github.io/2017/05/18/css-layout-classical-problems/</id>
    <published>2017-05-18T06:51:07.000Z</published>
    <updated>2019-04-07T16:16:59.933Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 CSS 布局中常见的经典问题进行简单说明，并提供相关解决方案的参考链接，涉及到三栏式布局，负 margin，清除浮动，居中布局，响应式设计，Flexbox 布局，等等。</p><a id="more"></a><h2 id="CSS-基础知识"><a href="#CSS-基础知识" class="headerlink" title="CSS 基础知识"></a>CSS 基础知识</h2><p>下面几个入门教程不错：</p><ul><li><a href="http://www.imooc.com/learn/9" target="_blank" rel="noopener">幕课网 - HTML+CSS基础课程</a>：偏基础，可以在线练习和预览</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started" target="_blank" rel="noopener">MDN - CSS入门教程</a>: MDN 的官方文档</li><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习 CSS 布局</a>：排版和配色特别舒服，简短但不深入，适合概览入门</li></ul><h2 id="CSS-定位问题"><a href="#CSS-定位问题" class="headerlink" title="CSS 定位问题"></a>CSS 定位问题</h2><p>主要就是经典的绝对定位，相对定位问题。</p><ul><li><a href="http://www.barelyfitz.com/screencast/html-training/css/positioning/" target="_blank" rel="noopener">10个文档学布局</a>：通过十个例子讲解布局，主要涉及相对布局，绝对布局，浮动。</li><li><a href="http://ife.baidu.com/note/detail/id/662" target="_blank" rel="noopener">百度前端学院笔记 - 理解绝对定位</a>：文章本身一般，几篇参考文献比较详细</li><li><a href="http://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html" target="_blank" rel="noopener">HTML和CSS高级指南之二——定位详解</a>（译文）：介绍浮动的使用，详细介绍定位的技巧，包括如何准确的给元素在 X 轴、Y 轴和 Z 轴定位</li></ul><h2 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h2><p>涉及浮动和清除浮动，主要讲解“圣杯”和“双飞翼”两种解决方法。这两种方法实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，它们实现的效果是一样的，差别在于其实现的思想。</p><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯：父盒子包含三个子盒子（左，中，右）</p><ul><li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li><li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；<ul><li><code>.left {margin-left:-100%;}</code> 把左边的盒子拉上去</li><li><code>.right {margin-left：-右边盒子宽度px;}</code> 把右边的盒子拉上去</li></ul></li><li>父盒子设置左右的 padding 来为左右盒子留位置；</li><li>对左右盒子使用相对布局来占据 padding 的空白，避免中间盒子的内容被左右盒子覆盖；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 圣杯的 HTML 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中间的 div 必须写在最前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间弹性区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>双飞翼：父盒子包含三个子盒子（左，中，右），中间的子盒子里再加一个子盒子。</p><ul><li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li><li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；</li><li>在中间盒子里面再添加一个 div，然后对这个 div 设置 <code>margin-left</code> 和 <code>margin-right</code>来为左右盒子留位置；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双飞翼的 HTML 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中间的 div 必须写在最前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle-inner"</span>&gt;</span>中间弹性区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圣杯和双飞翼异同"><a href="#圣杯和双飞翼异同" class="headerlink" title="圣杯和双飞翼异同"></a>圣杯和双飞翼异同</h3><p>圣杯布局和双飞翼布局解决的问题是一样的，都是两边定宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。</p><ul><li>两种方法基本思路都相同：三栏全部 float 浮动。首先让中间盒子 100% 宽度占满同一高度的空间，在左右两个盒子被挤出中间盒子所在区域时，使用 margin-left 的负值将左右两个盒子拉回与中间盒子同一高度的空间。接下来进行一些调整避免中间盒子的内容被左右盒子遮挡。</li><li>主要区别在于 <strong>如何使中间盒子的内容不被左右盒子遮挡</strong>：<ul><li>圣杯布局的方法：设置父盒子的 padding 值为左右盒子留出空位，再利用相对布局对左右盒子调整位置占据 padding 出来的空位；</li><li>双飞翼布局的方法：在中间盒子里再增加一个子盒子，直接设置这个子盒子的 margin 值来让出空位，而不用再调整左右盒子。</li></ul></li></ul><p>简单说起来就是双飞翼布局比圣杯布局多创建了一个 div，但不用相对布局了，少设置几个属性。</p><h3 id="利用浮动实现"><a href="#利用浮动实现" class="headerlink" title="利用浮动实现"></a>利用浮动实现</h3><p>我自己使用浮动也实现了三栏式布局：左边盒子左浮动，右边盒子右浮动，中间盒子利用 <code>margin-left</code> 和 <code>margin-right</code> 来为左右盒子留位置，同时父盒子设置 <code>overflow: auto;</code> 来避免子盒子溢出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浮动实现的 HTML 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中间的 div 必须写在最后面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间弹性区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三栏式布局参考下面几个链接:</p><ul><li><a href="http://www.w3cplus.com/blog/104.html" target="_blank" rel="noopener">CSS三栏布局——中间固定两边自适应宽度</a>： w3cplus 的文章，使用了双飞翼和浮动实现两侧定宽、中间自适应，也实现了两侧自适应、中间定宽</li><li><a href="http://www.jianshu.com/p/f9bcddb0e8b4" target="_blank" rel="noopener">简书 - 圣杯布局和双飞翼布局（前端面试必看）</a>：只讲了圣杯，不过特别详细</li><li><a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">In Search of the Holy Grail</a>：圣杯布局的来源</li><li><a href="http://ife.baidu.com/note/detail/id/1025" target="_blank" rel="noopener">百度前端学院笔记 - 三栏式布局之双飞翼与圣杯</a>：百度前端学院学员的前端学习笔记</li></ul><p>三栏式布局涉及到负 magin 和 清除浮动的问题。</p><h2 id="负-magin"><a href="#负-magin" class="headerlink" title="负 magin"></a>负 magin</h2><p>这里引出了“负 margin”的问题：</p><ul><li><a href="https://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负margin用法权威指南</a>：<a href="https://www.smashingmagazine.com/2009/07/the-definitive-guide-to-using-negative-margins/" target="_blank" rel="noopener">The Definitive Guide to Using Negative Margins</a> 的译文,介绍了负 magin 的一些性质和很多实用技巧</li><li><a href="http://www.jianshu.com/p/549aaa5fabaa" target="_blank" rel="noopener">简书 - margin为负值产生的影响和常见布局应用</a>：包括对自身的影响，对文档流的影响，以及一些在布局中的应用技巧(比如去除列表右边框，负边距+定位实现水平垂直居中，去除列表最后一个 li 元素的 border-bottom，多列等高)</li><li><a href="http://www.cnblogs.com/2050/archive/2012/08/13/2636467.html" target="_blank" rel="noopener">博客园 - CSS布局奇淫巧计之-强大的负边距</a>：和上文内容差不多</li></ul><p>简单总结几点：</p><ul><li>不使用 float 的话，负 margin 元素是不会破坏页面的文档流。所以如果你使用负 margin 上移一个元素，所有跟随的元素都会被上移(而 relative 定位的元素则不同，会保留原位置，影响文档流)。</li><li>当 static 元素的 margin-top/margin-left 被赋予负值时，元素将被拉进指定的方向。</li><li>如果你设置 margin-bottom/right 为负数，元素并不会如你所想的那样向下/右移动，而是将后续的元素拖拉进来，覆盖本来的元素。</li><li>当元素不存在 width 属性或者 <code>width: auto</code> 的时候，负 margin 会增加元素的宽度.</li><li>margin-top 为负值不会增加高度，只会产生向上位移;margin-bottom 为负值不会产生位移，会减少自身的供 CSS 读取的高度，影响下方的元素位置；上下相邻的元素两者均为负时，效果不叠加，取负值更多的那个效果。</li></ul><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>清除浮动主要是为了解决高度塌陷问题。而简单的 <code>clear: both</code> 并不能解决这个问题，所以引出了许多解决方案。</p><ul><li><a href="http://stackoverflow.com/questions/211383/what-methods-of-clearfix-can-i-use" target="_blank" rel="noopener">StackOverflow - What methods of ‘clearfix’ can I use?</a>：清除浮动黑科技完整解读</li><li><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动</a>：神文，把“清除浮动”定义为“闭合浮动”，把问题由来和解决方案都讲清楚了，并且分析了各种解决方案的优劣。</li></ul><p>各种解决方案在上面的链接里有很详细的说明了，这里就不赘述了。大体分为两类：</p><blockquote><ul><li>其一，通过在浮动元素的末尾添加一个空元素，设置 <code>clear: both</code> 属性，after 伪元素其实也是通过 content 在元素的后面生成了内容为一个点的块级元素；</li><li>其二，通过设置父元素 <code>overflow</code> 或者 <code>display: table</code> 属性来闭合浮动</li></ul></blockquote><p><em>顺便补充一句，clear float(例如 <code>clear: left</code>) 是对某个元素设置，以避免其某一边有浮动元素，即对当前元素产生约束，约束的边界为其他的浮动元素。对于已经浮动的元素，设置 clear float 是无效的。</em></p><h2 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h2><ul><li><a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">Centering in CSS: A Complete Guide</a>：非常全面的居中定位博客，包括各种情况下的水平居中，垂直居中和水平垂直居中方案。有展示示例及相应的 HTML 和 CSS 代码</li></ul><p>文章大致结构：</p><ul><li>水平居中<ul><li>对于行内元素(inline)：<code>text-align: center;</code></li><li>对于块级元素(block)：设置宽度且 <code>marigin-left</code> 和 <code>margin-right</code> 是设成 auto</li><li>对于多个块级元素：对父元素设置 <code>text-align: center;</code>，对子元素设置 <code>display: inline-block;</code>；或者使用 flex 布局</li></ul></li><li>垂直居中<ul><li>对于行内元素(inline)<ul><li>单行：设置上下 pandding 相等；或者设置 <code>line-height</code> 和 <code>height</code> 相等</li><li>多行：设置上下 pandding 相等；或者设置 <code>display: table-cell;</code> 和 <code>vertical-align: middle;</code>；或者使用 flex 布局；或者使用伪元素</li></ul></li><li>对于块级元素(block)：下面前两种方案，父元素需使用相对布局<ul><li>已知高度：子元素使用绝对布局 <code>top: 50%;</code>，再用负的 <code>margin-top</code> 把子元素往上拉一半的高度</li><li>未知高度：子元素使用绝对布局 <code>position: absolute; top: 50%; transform: translateY(-50%);</code></li><li>使用 Flexbox：选择方向，<code>justify-content: center;</code></li></ul></li></ul></li><li>水平垂直居中<ul><li>定高定宽：先用绝对布局 <code>top: 50%; left: 50%;</code>，再用和宽高的一半相等的负 margin 把子元素回拉</li><li>高度和宽度未知：先用绝对布局 <code>top: 50%; left: 50%;</code>，再设置 <code>transform: translate(-50%, -50%);</code></li><li>使用 Flexbox：<code>justify-content: center; align-items: center;</code></li></ul></li></ul><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><p>“响应式设计（Responsive Design)” 是一种让网站针对不同的浏览器和设备“呈现”不同显示效果的策略。</p><p>媒体查询(Media Queries)是做此事所需的最强大的工具。</p><p><em>注： Responsive Web Design ＝ RWD，Adaptive Web Design ＝ AWD</em></p><p>RWD：</p><ul><li>采用 CSS 的 media query 技术</li><li>流体布局（fluid grids）</li><li>自适应的图片/视频等资源素材</li></ul><p>（为小、中、大屏幕做一些优化，目的是让任何尺寸的屏幕空间都能得到充分利用）</p><p>AWD：</p><ul><li>CSS media query 技术（仅针对有限几种预设的屏幕尺寸设计）</li><li>用 JavaScript 来操作 HTML 内容</li><li>在服务器端操作 HTML 内容（比如为移动端减少内容，为桌面端提供更多内容）</li></ul><blockquote><p>以上 RWD 和 AWD 解释引自  <a href="https://www.zhihu.com/question/20976405/answer/16781171" target="_blank" rel="noopener">知乎 @屹峰</a></p></blockquote><p>可以参考 Bootstrap 的网格系统：<a href="http://getbootstrap.com/css/#grid-less" target="_blank" rel="noopener">http://getbootstrap.com/css/#grid-less</a></p><blockquote><p>The Bootstrap 3 grid system has four tiers of classes: xs (phones), sm (tablets), md (desktops), and lg (larger desktops).</p></blockquote><p>自己实现网格系统： <a href="http://j4n.co/blog/Creating-your-own-css-grid-system" target="_blank" rel="noopener">Creating Your Own CSS Grid System</a></p><h2 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h2><p>Flexbox 布局参考下面几篇文章就可以了，几篇文章大同小异，看一两篇就知道大概了，讲的挺详细的，在此不赘述</p><ul><li><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html" target="_blank" rel="noopener">w3cplus - 一个完整的Flexbox指南</a>：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to Flexbox</a> 的译文</li><li><a href="https://segmentfault.com/a/1190000002910324" target="_blank" rel="noopener">SegmentFault - Flexbox详解</a></li><li><a href="https://www.w3cplus.com/css3/a-visual-guide-to-css3-flexbox-properties.html" target="_blank" rel="noopener">w3cplus - 图解CSS3 Flexbox属性</a></li><li><a href="http://www.w3cplus.com/css3/flexbox-basics.html" target="_blank" rel="noopener">w3cplus - Flexbox——快速布局神器</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 CSS 布局中常见的经典问题进行简单说明，并提供相关解决方案的参考链接，涉及到三栏式布局，负 margin，清除浮动，居中布局，响应式设计，Flexbox 布局，等等。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://brianway.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://brianway.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端学习笔记(3)-DOM 基础</title>
    <link href="https://brianway.github.io/2017/05/18/front-end-notes-3-DOM-basics/"/>
    <id>https://brianway.github.io/2017/05/18/front-end-notes-3-DOM-basics/</id>
    <published>2017-05-18T06:27:07.000Z</published>
    <updated>2019-04-07T16:16:59.855Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 HTML DOM。第一部分 “DOM 概述” 主要参考 MDN，第二部分 “HTML DOM” 主要参考 W3School。</p><a id="more"></a><h2 id="DOM-概述"><a href="#DOM-概述" class="headerlink" title="DOM 概述"></a>DOM 概述</h2><blockquote><p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p><p>所有操作和创建web页面的属性，方法和事件都会被组织成对象的形式（例如， document 对象表示文档本身， table 对象实现了特定的 HTMLTableElement DOM 接口来访问HTML 表格等）。</p><p>引自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">MDN - DOM 概述</a></p></blockquote><p>JavaScript 可以访问和操作存储在 DOM 中的内容:</p><p><code>API (web 或 XML 页面) = DOM + JS (脚本语言)</code></p><p>一些重要的数据类型：</p><table><thead><tr><th style="text-align:left">document</th><th style="text-align:left">每个载入浏览器的 HTML 文档都会成为 Document 对象。<a href="https://developer.mozilla.org/en-US/docs/Web/API/document" target="_blank" rel="noopener">MDN - document</a></th></tr></thead><tbody><tr><td style="text-align:left">element</td><td style="text-align:left">element 是指由 DOM API 中成员返回的类型为 element 的一个元素或节点。</td></tr><tr><td style="text-align:left">nodeList</td><td style="text-align:left">nodeList 是一个元素的数组</td></tr><tr><td style="text-align:left">attribute</td><td style="text-align:left">DOM 中的属性也是节点，就像元素一样</td></tr><tr><td style="text-align:left">namedNodeMap</td><td style="text-align:left">namedNodeMap 和数组类似，但是条目是由 name 或 index 访问的</td></tr></tbody></table><hr><h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><p>下面用一张树状图图来介绍 HTML DOM。</p><p>文档对象模型 DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将 HTML 文档呈现为带有元素、属性和文本的树结构（节点树）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/dom_ct-htmltree.gif" alt="HTML DOM 树" title>                </div>                <div class="image-caption">HTML DOM 树</div>            </figure><p>HTML 文档可以说由节点构成的集合,常见的 DOM 节点:</p><ol><li>元素节点：上图中<code>&lt;html&gt;、&lt;body&gt;、&lt;p&gt;</code>等都是元素节点，即标签</li><li>文本节点：向用户展示的内容，如 <code>&lt;li&gt;...&lt;/li&gt;</code>中的 JavaScript、DOM、CSS 等文本。</li><li>属性节点：元素属性，如 <code>&lt;a&gt;</code> 标签的链接属性 <code>href=&quot;http://www.imooc.com&quot;</code></li></ol><p>几个简单的 DOM 操作：</p><ul><li>innerHTML 属性用于获取或替换 HTML 元素的内容，<code>Object.innerHTML</code></li><li>改变 HTML 样式，<code>Object.style.property=new style;</code></li><li>隐藏和显示 <code>Object.style.display = value</code>，value 可取 <code>none</code> 或者 <code>block</code></li></ul><blockquote><p>参考 <a href="http://www.imooc.com/learn/36" target="_blank" rel="noopener">慕课网 - JavaScript 入门篇(第三章)</a></p></blockquote><hr><p>HTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</p><blockquote><p>参考 <a href="http://www.w3school.com.cn/htmldom/index.asp" target="_blank" rel="noopener">W3School - HTML DOM 教程</a></p></blockquote><h3 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h3><p>所有 HTML 元素被定义为对象，而编程接口则是 <strong>对象方法</strong> 和 <strong>对象属性</strong>。</p><ul><li>方法是您能够执行的动作（比如添加或修改元素）。</li><li>属性是您能够获取或设置的值（比如节点的名称或内容）</li></ul><p>一些常用的 HTML DOM 方法：</p><ul><li>getElementById(id) - 获取带有指定 id 的节点（元素）</li><li>appendChild(node) - 插入新的子节点（元素）</li><li>removeChild(node) - 删除子节点（元素）</li></ul><p>一些常用的 HTML DOM 属性：</p><ul><li>innerHTML - 节点（元素）的文本值</li><li>parentNode - 节点（元素）的父节点</li><li>childNodes - 节点（元素）的子节点</li><li>attributes - 节点（元素）的属性节点</li><li>nodeName - nodeName 属性规定节点的名称。<ul><li>nodeName 是只读的</li><li>元素节点的 nodeName 与标签名相同</li><li>属性节点的 nodeName 与属性名相同</li><li>文本节点的 nodeName 始终是 <code>#text</code></li><li>文档节点的 nodeName 始终是 <code>#document</code></li></ul></li><li>nodeValue - 性规定节点的值。<ul><li>元素节点的 nodeValue 是 <code>undefined</code> 或 <code>null</code></li><li>文本节点的 nodeValue 是文本本身</li><li>属性节点的 nodeValue 是属性值</li></ul></li><li>nodeType - 返回节点的类型。nodeType 是只读的。</li></ul><p>DOM 根节点有两个特殊的属性，可以访问全部文档：</p><ul><li>document.documentElement - 全部文档</li><li>document.body - 文档的主体</li></ul><h3 id="访问和修改"><a href="#访问和修改" class="headerlink" title="访问和修改"></a>访问和修改</h3><p>访问 HTML 元素等同于访问节点,能够以不同的方式来访问 HTML 元素：</p><ul><li><code>getElementById()</code> 方法</li><li><code>getElementsByTagName()</code> 方法</li><li><code>getElementsByClassName()</code> 方法</li></ul><p>修改 HTML DOM 意味着许多不同的方面：</p><ul><li>改变 HTML 内容</li><li>改变 CSS 样式</li><li>改变 HTML 属性</li><li>创建新的 HTML 元素</li><li>删除已有的 HTML 元素</li><li>改变事件（处理程序）</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>HTML 事件的例子：</p><ul><li>当用户点击鼠标时，onmousedown、onmouseup 以及 onclick 事件</li><li>当网页已加载时，onload 和 onunload 事件</li><li>当图片已加载时</li><li>当鼠标移动到元素上时，onmouseover 和 onmouseout 事件</li><li>当输入字段被改变时，onchange 事件</li><li>当 HTML 表单被提交时</li><li>当用户触发按键时</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://www.w3school.com.cn/htmldom/index.asp" target="_blank" rel="noopener">W3School - HTML DOM 教程</a></li><li><a href="http://www.w3school.com.cn/jsref/dom_obj_document.asp" target="_blank" rel="noopener">W3School - HTML DOM Document 对象</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener">MDN - Document Object Model (DOM)</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 HTML DOM。第一部分 “DOM 概述” 主要参考 MDN，第二部分 “HTML DOM” 主要参考 W3School。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://brianway.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端学习笔记(2)-CSS 基础</title>
    <link href="https://brianway.github.io/2017/05/18/front-end-notes-2-CSS-basics/"/>
    <id>https://brianway.github.io/2017/05/18/front-end-notes-2-CSS-basics/</id>
    <published>2017-05-18T05:55:07.000Z</published>
    <updated>2019-04-07T16:16:59.844Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 CSS 相关基础知识进行介绍</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>CSS 样式由选择符和声明组成，而声明又由属性和值组成。</p><ul><li>选择符：又称选择器，指明网页中要应用样式规则的元素。</li><li>声明：在英文大括号<code>{}</code>中的的就是声明，属性和值之间用英文冒号<code>{}</code>分隔。当有多条声明时，中间可以英文分号<code>;</code>分隔。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">    样式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从CSS 样式代码插入的形式来看基本可以分为以下3种：内联式、嵌入式和外部式三种。优先级遵循就近原则，一般来说，<code>内联式 &gt; 嵌入式 &gt; 外部式</code>。</p><ul><li>内联式</li></ul><p>例子 <code>&lt;p style=&quot;color:red;font-size:12px&quot;&gt;这里文字是红色。&lt;/p&gt;</code></p><ul><li>嵌入式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    span&#123;</span></span><br><span class="line"><span class="undefined">        color:red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部式</li></ul><p>例子：<code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></p><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>常见的类选择器类型有如下几种：</p><ul><li>标签选择器，<code>.标签选择器名称{css样式代码;}</code></li><li>类选择器，<code>.类选器名称{css样式代码;}</code></li><li>ID 选择器，<code>＃类选器名称{css样式代码;}</code></li><li>子选择器，即大于符号(<code>&gt;</code>),用于选择指定标签元素的第一代子元素</li><li>包含选择器，即加入空格<code></code>,用于选择指定标签元素下的后辈元素</li><li>通用选择器，匹配html中所有标签元素，<code>* {css样式代码;}</code></li></ul><p>类选择器和ID选择器都可以应用于任何元素，但 <strong>ID 选择器只能在文档中使用一次</strong>，可以使用类选择器词列表方法为一个元素同时设置多个样式，ID 选择器是不可以的。</p><p>子选择器和包含选择器区别：<code>&gt;</code>作用于元素的第一代后代，空格作用于元素的所有后代。</p><p>另外还有两种选择符：</p><ul><li>伪类选择符，允许给 HTML 不存在的标签（标签的某种状态）设置样式。常用的有 <code>a:hover{color:red;}</code></li><li>分组选择符，为 HTML 中多个标签元素设置同一个样式时，可以使用分组选择符<code>,</code>。例如 <code>h1,span{color:red;}</code></li></ul><h2 id="CSS-的继承、层叠和特殊性"><a href="#CSS-的继承、层叠和特殊性" class="headerlink" title="CSS 的继承、层叠和特殊性"></a>CSS 的继承、层叠和特殊性</h2><ul><li>CSS 的某些样式是具有继承性的，继承是一种规则，它允许样式不仅应用于某个特定 HTML 标签元素，而且应用于其后代。</li><li>特殊性：不同选择器具有不同权值，标签的权值为 1，类选择符的权值为 10，ID选择符的权值最高为 100。</li><li><strong>层叠</strong> 就是在 HTML 文件中对于同一个元素可以有多个 CSS 样式存在，当有相同权重的样式存在时，会根据这些 CSS 样式的前后顺序来决定，处于最后面的 CSS 样式会被应用。</li></ul><h2 id="CSS-格式化排版"><a href="#CSS-格式化排版" class="headerlink" title="CSS 格式化排版"></a>CSS 格式化排版</h2><p>文字排版</p><ul><li>字体，<code>body{font-family:&quot;Microsoft Yahei&quot;;}</code></li><li>字号、颜色，<code>body{font-size:12px;color:#666}</code></li><li>粗体，<code>body{font-weight:bold;}</code></li><li>斜体，<code>body{font-style:italic;}</code></li><li>下划线，<code>body{font-style:italic;}</code></li><li>删除线，<code>body{text-decoration:line-through;}</code></li></ul><p>段落排版</p><ul><li>缩进，<code>p{text-indent:2em;}</code></li><li>行间距（行高），<code>p{line-height:1.5em;}</code></li><li>中文字间距、字母间距，<code>letter-spacing:50px;</code>和<code>word-spacing:50px;</code></li><li>对齐，<code>div{text-align:center;}</code></li></ul><h2 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h2><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><p>在 CSS 中，HTML 中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。</p><ul><li>常用的块状元素有：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure><p>块级元素特点：</p><ol><li>每个块级元素都从新的一行开始，并且其后的元素也另起一行。</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li><li>元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。</li></ol><p>设置 <code>display:block</code> 就是将元素显示为块级元素，从而使元素具有块状元素特点。</p><p><em>注：img 标签与 div 层之间会有空隙的解决方法是：使用 <code>display:block</code> 就可以消除间隙。</em></p><ul><li>常用的内联元素有：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure><p>内联元素特点：</p><ol><li>和其他元素都在一行上；</li><li>元素的<strong>高度、宽度</strong>及顶部和底部边距<strong>不可</strong>设置；</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li></ol><p>块状元素也可以通过代码 <code>display:inline</code> 将元素设置为内联元素。</p><ul><li>常用的内联块状元素有：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure><p>inline-block 元素特点：</p><ol><li>和其他元素都在一行上；</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li></ol><p>内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码 <code>display:inline-block</code> 就是将元素设置为内联块状元素。</p><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul><li>边框</li></ul><p>盒子模型的<strong>边框</strong>就是围绕着<strong>内容</strong>及<strong>补白</strong>的线，这条线你可以设置它的<strong>粗细</strong>、<strong>样式</strong>和<strong>颜色</strong>(边框三个属性)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span>  solid  red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独设置下边框的例子 <code>div{border-bottom:1px solid red;}</code></p><ul><li>宽度和高度</li></ul><p>CSS 内定义的宽（width）和高（height），指的是 <strong>填充以里的内容范围</strong>。一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</p><p>W3C 的标准 Box Model:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure><p>所以有时会设置 <code>box-sizing: border-box;</code> 来避免计算内部元素大小</p><blockquote><p>参考 <a href="http://www.w3cplus.com/content/css3-box-sizing" target="_blank" rel="noopener">CSS3 Box-sizing</a></p></blockquote><ul><li>填充(padding)</li></ul><p>元素内容与边框之间是可以设置距离的，称之为“填充”。填充也可分为上、右、下、左(顺时针)。</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*上、右、下、左(顺时针)，顺序不要搞混*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">padding-top</span>:<span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">padding-right</span>:<span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding-bottom</span>:<span class="number">15px</span>;</span><br><span class="line">   <span class="attribute">padding-left</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*上、右、下、左的填充都为10px;*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*上下填充一样为10px，左右一样为20px*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>边界(margin)</li></ul><p>元素与其它元素之间的距离可以使用边界（margin）来设置，顺序和填充一样是上，右，下，左。padding 在边框里，margin 在边框外。</p><h2 id="CSS-布局模型"><a href="#CSS-布局模型" class="headerlink" title="CSS 布局模型"></a>CSS 布局模型</h2><p>CSS 包含 3 种基本的布局模型，用英文概括为：Flow、Layer 和 Float。<br>在网页中，元素有三种布局模型：</p><ol><li>流动模型（Flow）</li><li>浮动模型 (Float)</li><li>层模型（Layer）</li></ol><h3 id="流动模型"><a href="#流动模型" class="headerlink" title="流动模型"></a>流动模型</h3><p>流动模型，流动（Flow）是默认的网页布局模式。</p><p>流动布局模型具有2个比较典型的特征：</p><ol><li><strong>块状元素</strong> 都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为 100%。实际上，块状元素都会以行的形式占据位置。</li><li>在流动模型下，<strong>内联元素</strong> 都会在所处的包含元素内从左到右水平分布显示。</li></ol><h3 id="浮动模型"><a href="#浮动模型" class="headerlink" title="浮动模型"></a>浮动模型</h3><p>任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动。例子：<code>#div1{float:left;}</code></p><h3 id="层模型"><a href="#层模型" class="headerlink" title="层模型"></a>层模型</h3><p>CSS 定义了一组定位（positioning）属性来支持层布局模型。</p><p>层模型有三种形式：</p><ol><li>绝对定位(<code>position: absolute</code>)</li><li>相对定位(<code>position: relative</code>)</li><li>固定定位(<code>position: fixed</code>)</li></ol><p>可参考这篇文章辅助理解 <a href="http://www.cnblogs.com/tim-li/archive/2012/07/09/2582618.html" target="_blank" rel="noopener">《css绝对定位、相对定位和文档流的那些事》</a></p><blockquote><p>官方文档: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">MDN - position</a></p></blockquote><ul><li>绝对定位(<code>position: absolute</code>)</li></ul><p>如果想为元素设置层模型中的绝对定位，需要设置 <code>position:absolute</code>(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用 left、right、top、bottom 属性相对于其<strong>最接近的一个具有定位属性的父包含块</strong>进行绝对定位。如果不存在这样的包含块，则相对于 body 元素，即相对于<strong>浏览器窗口</strong>。</p><ul><li>相对定位(<code>position: relative</code>)</li></ul><p>如果想为元素设置层模型中的相对定位，需要设置 <code>position:relative</code>（表示相对定位），它通过 left、right、top、bottom 属性确定元素在<strong>正常文档流中</strong>的偏移位置。相对定位完成的过程是首先按 static(float) 方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于<strong>以前的位置移动</strong>，移动的方向和幅度由left、right、top、bottom属性确定，<strong>偏移前的位置保留不动</strong>。</p><p>简单来说，就是相对元素原来的位置进行移动，元素本身所占的位置会保留。</p><ul><li>固定定位(<code>position: fixed</code>)</li></ul><p>设置 <code>position:fixed;</code>。fixed：表示固定定位，与 absolute 定位类型类似，但它的相对移动的坐标是视图（<strong>屏幕内的网页窗口</strong>）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与 <code>background-attachment:fixed;</code> 属性功能相同。</p><p>Relative 与 Absolute 组合使用,必须遵守下面规范：</p><ol><li>参照定位的元素必须是相对定位元素的前辈元素</li><li>参照定位的元素必须加入 <code>position:relative;</code></li><li>定位元素加入 <code>position:absolute</code>，便可以使用 top、bottom、left、right 来进行偏移定位了</li></ol><p>例子(HTML 和 CSS 代码分别为)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="comment">&lt;!--参照定位的元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>相对参照元素进行定位<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--相对定位元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative; <span class="comment">/*参照定位的元素必须加入position:relative;*/</span>      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;<span class="comment">/*定位元素加入position:absolute*/</span>         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="颜色和长度"><a href="#颜色和长度" class="headerlink" title="颜色和长度"></a>颜色和长度</h2><p>设置颜色的方法也有很多种：</p><ul><li>英文命令颜色，<code>p{color:red;}</code></li><li>RGB颜色，<code>p{color:rgb(133,45,200);}</code> 和 <code>p{color:rgb(20%,33%,25%);}</code></li><li>十六进制颜色，<br>这种颜色设置方法是现在比较普遍使用的方法，其原理其实也是 RGB 设置，但是其每一项的值由 0-255 变成了十六进制 00-ff。<code>p{color:#00ffff;}</code>(当你设置的颜色是 16 进制的色彩值时，如果每两位的值相同，可以缩写一半，<code>#0ff</code>)</li></ul><p>RGB 配色表参考 <a href="http://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">RGB颜色对照表 - 在线工具 - 开源中国</a> 或者 <a href="http://www.wahart.com.hk/rgb.htm" target="_blank" rel="noopener">RGB 配色表</a></p><p>长度单位总结一下，目前比较常用到px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。</p><ul><li>像素</li><li>em，就是本元素给定字体的 font-size 值</li><li>% 百分比</li></ul><h2 id="设置小技巧"><a href="#设置小技巧" class="headerlink" title="设置小技巧"></a>设置小技巧</h2><h3 id="水平居中设置"><a href="#水平居中设置" class="headerlink" title="水平居中设置"></a>水平居中设置</h3><ul><li>行内元素。如果被设置元素为文本、图片等行内元素时，水平居中是通过给<strong>父元素</strong>设置 <code>text-align:center</code> 来实现的。</li><li>定宽块状元素(块状元素的宽度 width 为固定值)。满足<strong>定宽</strong>和<strong>块状</strong>两个条件的元素是可以通过设置“左右 margin”值为 auto 来实现居中的。</li><li>不定宽块状元素。<ul><li>加入 table 标签(包括 <code>&lt;tbody&gt;、&lt;tr&gt;、&lt;td&gt;</code>)，为这个 table 设置“左右 margin 居中”</li><li>设置 <code>display: inline</code> 方法：与第一种类似，显示类型设为 行内元素，然后使用 <code>text-align:center</code> 来实现居中效果，进行不定宽元素的属性设置。</li><li>给父元素设置 float 和 <code>position:relative; left:50%</code>，子元素设置 <code>position:relative</code> 和 <code>left: -50%</code> 来实现水平居中。</li></ul></li></ul><h3 id="垂直居中设置"><a href="#垂直居中设置" class="headerlink" title="垂直居中设置"></a>垂直居中设置</h3><ul><li>父元素高度确定的单行文本。通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度；line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。</li><li>父元素高度确定的多行文本。使用插入 table  (包括 tbody、tr、td)标签，同时设置 <code>vertical-align：middle</code>。</li></ul><p>另外，<strong>为元素设置以下两个属性之一会隐形改变 display 类型</strong>，元素的display显示类型就会自动变为以 <code>display:inline-block</code>（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。</p><ol><li><code>position: absolute</code></li><li><code>float: left</code> 或 <code>float:right</code></li></ol><p>更详细的居中布局技巧可以参考我另外一篇文章：<a href="http://brianway.github.io/2017/05/18/css-layout-classical-problems/">CSS 布局经典问题初步整理</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started" target="_blank" rel="noopener">MDN CSS入门教程</a></li><li><a href="http://www.imooc.com/learn/9" target="_blank" rel="noopener">慕课HTML+CSS基础教程视频</a></li><li><a href="http://www.cnblogs.com/tim-li/archive/2012/07/09/2582618.html" target="_blank" rel="noopener">css绝对定位、相对定位和文档流的那些事</a></li><li><a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">W3School - CSS 参考手册</a></li><li><a href="http://zh.learnlayout.com/toc.html" target="_blank" rel="noopener">学习CSS布局</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 CSS 相关基础知识进行介绍&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://brianway.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://brianway.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端学习笔记(1)-HTML</title>
    <link href="https://brianway.github.io/2017/05/18/front-end-notes-1-HTML/"/>
    <id>https://brianway.github.io/2017/05/18/front-end-notes-1-HTML/</id>
    <published>2017-05-18T05:34:07.000Z</published>
    <updated>2019-04-07T16:16:59.928Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 HTML 标签进行介绍和归纳</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>HTML 是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li><li>CSS 样式是表现。比如，标题字体、颜色变化，或为标题加入背景图片、边框等，所有这些用来改变内容外观的东西称之为表现。</li><li>JavaScript 是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单，或鼠标滑过表格的背景颜色改变，还有焦点新闻（新闻图片）的轮换。有动画的，有交互的一般都是用 JavaScript 来实现的。</li></ol><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><p>主要需要留意，标签的用途、标签在浏览器中的默认样式</p><p><em>注：现在一般使用 xhtml1.0 的版本（其它标签也是），这种版本比较规范</em></p><ul><li>强调语气：<code>&lt;em&gt;</code>是斜体，<code>&lt;strong&gt;</code>是加粗</li><li>引用：<code>&lt;q&gt;</code>短文本引用，<code>&lt;blockquote&gt;</code>长文本引用</li><li>换行 <code>&lt;br /&gt;</code></li><li>水平横线 <code>&lt;hr /&gt;</code></li><li>空格 <code>&amp;nbsp;</code></li><li>表格 <code>&lt;table&gt;</code><ul><li><code>&lt;tbody&gt;</code> 加上后表格内容全部下载完才会显示</li><li>行 <code>&lt;tr&gt;</code></li><li>列 <code>&lt;td&gt;</code></li><li>表格表头 <code>&lt;th&gt;</code></li><li>标题 <code>&lt;caption&gt;</code></li></ul></li><li>超链 <code>&lt;a&gt;</code><ul><li>例子：<code>&lt;a  href=&quot;目标网址&quot;  title=&quot;鼠标滑过显示的文本&quot;&gt;链接显示的文本&lt;/a&gt;</code></li><li>新标签打开：<code>target=&quot;_blank&quot;</code></li></ul></li><li>图片 <code>&lt;img&gt;</code>，图像可以是 GIF，PNG，JPEG 格式的图像文件<ul><li>例子：<code>&lt;img src=&quot;图片地址&quot; alt=&quot;下载失败时的替换文本&quot; title = &quot;提示文本&quot;&gt;</code></li></ul></li><li>表单 <code>&lt;form&gt;</code></li><li>文本域 <code>&lt;textarea&gt;</code><ul><li>例子 <code>&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt;</code></li><li>cols 多行输入域的列数；rows 多行输入域的行数。这两个属性可用 CSS 样式的 width 和 height 来代替：col 用 width、row 用 height 来代替</li></ul></li><li>输入框 <code>&lt;input type=&quot;text/password&quot; name=&quot;名称&quot; value=&quot;文本&quot; /&gt;</code><ul><li>当 type=”text” 时，输入框为文本输入框</li><li>当 type=”password” 时, 输入框为密码输入框</li></ul></li><li>单/复选框 <code>&lt;input type=&quot;radio/checkbox&quot; value=&quot;值&quot;    name=&quot;名称&quot;   checked=&quot;checked&quot;/&gt;</code><ul><li>当 type=”radio” 时，控件为单选框，<strong>同一组单选框 name 命名要一致</strong></li><li>当 type=”checkbox” 时，控件为复选框</li></ul></li><li>提交按钮 <code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></li><li>重置按钮 <code>&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;</code></li><li>下拉列表框  <code>&lt;select&gt;&lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;&lt;/select&gt;</code><ul><li>value  <code>&lt;option value=&quot;提交值&quot;&gt;选项&lt;/option&gt;</code></li><li>选中 <code>selected=&quot;selected&quot;</code></li><li>多选 <code>multiple=&quot;multiple&quot;</code></li></ul></li><li>标签 <code>&lt;label for=&quot;控件id名称&quot;&gt;</code>，标签的 for 属性中的值应当与相关控件的 <strong>id 属性</strong> 值一定要相同</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 HTML 标签进行介绍和归纳&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://brianway.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="https://brianway.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>The Structure of jQuery</title>
    <link href="https://brianway.github.io/2017/05/18/the-structure-of-jQuery/"/>
    <id>https://brianway.github.io/2017/05/18/the-structure-of-jQuery/</id>
    <published>2017-05-18T05:20:07.000Z</published>
    <updated>2019-04-07T16:16:59.912Z</updated>
    
    <content type="html"><![CDATA[<p>We examine famous frameworks and libraries,such as jQuery,to experience the open source education.This article mainly analyses the structure of jQuery.</p><blockquote><p>Course link: <a href="https://www.udemy.com/understand-javascript/" target="_blank" rel="noopener">JavaScript: Understanding the Weird Parts</a></p><p>(Section 8: Examining Famous Frameworks and Libraries)</p></blockquote><a id="more"></a><h2 id="jQuery-Introduction"><a href="#jQuery-Introduction" class="headerlink" title="jQuery Introduction"></a>jQuery Introduction</h2><p>jQuery is just a <strong>JavaScript library</strong>.What jQuery does essentially is let you <strong>manipulate the DOM</strong>.It handles the browser quirks but doesn’t add any features to the browser or to JavaScript itself.</p><p>the <code>jQuery</code> function isn’t a function constructor.It’s just a function that returns an object,a function that returns a call to function constructor.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define a local copy of jQuery</span></span><br><span class="line">jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line"><span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class="line"><span class="comment">// Need init if jQuery is called (just allow error to be thrown if not included)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jQuery.fn</code> is just an alias of <code>jQuery.prototype</code> which is just hanging out(just an empty object at fisrt) and is overwritten with a new object.</p><p><code>jQuery.extend</code> and <code>jQuery.fn.extend</code> are the some function.This function takes properties and methods of one object and adds them to another.</p><p>jQuery extends itself with many useful functions,such as <code>map</code>,<code>each</code>,<code>type</code>,<code>isArray</code>,<code>makeArray</code>,and so on.</p><h2 id="Sizzle"><a href="#Sizzle" class="headerlink" title="Sizzle"></a>Sizzle</h2><p><code>Sizzle</code>(<a href="http://sizzlejs.com/" target="_blank" rel="noopener">http://sizzlejs.com/</a>) is a whole other engine inside of jQuery.</p><blockquote><p>A pure-JavaScript CSS selector engine designed to be easily dropped in to a host library.</p></blockquote><p>The <code>jQuery.extend</code> invocation is inside an IIFE,and the property <code>Sizzle</code> is returned by another IIFE that returns a Sizzle object.That is to say,one IIFE can be inside another.</p><p>jQuery is using that Sizzle library.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jQuery.find = Sizzle;</span><br><span class="line">jQuery.expr = Sizzle.selectors;</span><br><span class="line">jQuery.expr[<span class="string">":"</span>] = jQuery.expr.pseudos;</span><br><span class="line">jQuery.unique = Sizzle.uniqueSort;</span><br><span class="line">jQuery.text = Sizzle.getText;</span><br><span class="line">jQuery.isXMLDoc = Sizzle.isXML;</span><br><span class="line">jQuery.contains = Sizzle.contains;</span><br></pre></td></tr></table></figure><h2 id="init-and-jQuery-prototype"><a href="#init-and-jQuery-prototype" class="headerlink" title="init and jQuery prototype"></a>init and jQuery prototype</h2><p><code>jQuery.fn.init</code> is the function constructor.At the end of the function constructor,it’s returning a value,still giving back the empty object that was created with the <code>new</code> operator,but doing some stuff to it first.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line">    <span class="comment">//elide some codes</span></span><br><span class="line">    <span class="keyword">return</span> jQuery.makeArray( selector, <span class="keyword">this</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As for any new object created with the <code>init</code> function constructor, its prototype is the same memory spot as <code>jQuery.prototype</code>–the prototype of the jQuery object itself.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reminder: jQuery.fn = jQuery.prototype</span></span><br><span class="line"><span class="comment">// Give the init function the jQuery prototype for later instantiation</span></span><br><span class="line">init.prototype = jQuery.fn;</span><br></pre></td></tr></table></figure><p>The neat trick:</p><ul><li>you don’t hava to call the <code>new</code> operator when you use jQuery.Instead this calls a function that then calls a function constructor,creating a new object.But that new object has access to all the properties and methods in <code>jQuery.fn</code>.</li><li>And instead of always in this jQuery code typing in jQuery.fn.init.something,it’s just the prototype of the jQuery object itself.</li></ul><h2 id="Method-Chaining"><a href="#Method-Chaining" class="headerlink" title="Method Chaining"></a>Method Chaining</h2><p>method chaining: calling one method after another,and each method affects the parent object.</p><p>When you execute a method or call a method,and it’s found down the prototype chain,the <code>this</code> variable points at the originating object,the object that actually made the call.</p><p>e.g. Just see the return value of  <code>addClass</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addClass: <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</span><br><span class="line">    <span class="comment">//elide some codes here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Expose-Globally"><a href="#Expose-Globally" class="headerlink" title="Expose Globally"></a>Expose Globally</h2><p>Expose jQuery or <code>$</code> globally:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Expose jQuery and $ identifiers, even in</span></span><br><span class="line"><span class="comment">// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)</span></span><br><span class="line"><span class="comment">// and CommonJS for browser emulators (#13566)</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> noGlobal === strundefined ) &#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both of <code>window.jQuery</code> and <code>window.$</code> are pointing at the same spot in memory as the jQuery object created inside this function that had all these properties and methods attached to it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We examine famous frameworks and libraries,such as jQuery,to experience the open source education.This article mainly analyses the structure of jQuery.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Course link: &lt;a href=&quot;https://www.udemy.com/understand-javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript: Understanding the Weird Parts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Section 8: Examining Famous Frameworks and Libraries)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://brianway.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://brianway.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://brianway.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>将项目发布到 Maven 中央仓库踩过的坑</title>
    <link href="https://brianway.github.io/2017/05/17/release-to-maven-central-repo/"/>
    <id>https://brianway.github.io/2017/05/17/release-to-maven-central-repo/</id>
    <published>2017-05-16T18:39:07.000Z</published>
    <updated>2019-04-07T16:16:59.965Z</updated>
    
    <content type="html"><![CDATA[<p>记录第一次将项目发布到 Maven 中央仓库踩过的坑和解决方案。</p><a id="more"></a><h2 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h2><ol><li>注册 Sonatype 的账户。地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Signup!default.jspa</a></li><li>提交发布申请。创建 Issue 地址：<a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134" target="_blank" rel="noopener">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a><ul><li>项目类型是 <code>Community Support - Open Source Project Repository Hosting</code></li><li>groupId 对应的域名你需要有所有权</li></ul></li><li>使用 GPG 生成密钥对。下载地址：<a href="https://www.gnupg.org/download/" target="_blank" rel="noopener">https://www.gnupg.org/download/</a>。用得到的指令有如下几条：<ul><li><code>gpg --version</code> 检查安装成功没</li><li><code>gpg --gen-key</code> 生成密钥对</li><li><code>gpg --list-keys</code> 查看公钥</li><li><code>gpg --keyserver hkp://pool.sks-keyservers.net --send-keys 公钥ID</code> 将公钥发布到 PGP 密钥服务器</li><li><code>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 公钥ID</code> 查询公钥是否发布成功</li></ul></li><li>配置 Maven。需要修改的 Maven 配置文件包括：<code>setting.xml</code>（全局级别）与 <code>pom.xml</code>（项目级别）<ul><li>setting.xml：在其中加入 server 信息，包含 Sonatype 账号的用户名与密码</li><li>pom.xml：在其中配置 profile,包括插件和 <code>distributionManagement</code>，。<strong>snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。</strong></li></ul></li><li>上传构件到 OSS 中。<code>mvn clean deploy -P release</code></li><li>在 OSS 中发布构件。进入 <a href="https://oss.sonatype.org/" target="_blank" rel="noopener">https://oss.sonatype.org/</a>，点击”Staging Repositories” -&gt; 在搜索栏输入你的 groupId -&gt; 勾选你的构件并点击 close -&gt; 点击 tab 栏的 release。</li><li>通知 Sonatype 的工作人员关闭 issue。</li></ol><p>等待审批通过后，就可以在中央仓库中搜索到自己发布的构件了！下面是我在 Maven 中央仓库的构件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_maven-release-v1.0.png" alt="webporter 发布到 maven 中央仓库" title>                </div>                <div class="image-caption">webporter 发布到 maven 中央仓库</div>            </figure><ul><li>搜索地址： <a href="https://search.maven.org/" target="_blank" rel="noopener">https://search.maven.org/</a></li><li>中央仓库地址：<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></li><li>我发布的构件地址：<a href="http://mvnrepository.com/artifact/com.github.brianway" target="_blank" rel="noopener">http://mvnrepository.com/artifact/com.github.brianway</a></li></ul><h2 id="图文教程参考"><a href="#图文教程参考" class="headerlink" title="图文教程参考"></a>图文教程参考</h2><p>主要参考如下三个链接：</p><blockquote><ul><li><a href="https://my.oschina.net/huangyong/blog/226738" target="_blank" rel="noopener">将 Smart 构件发布到 Maven 中央仓库 </a> by 黄勇</li><li><a href="https://my.oschina.net/songxinqiang/blog/313226" target="_blank" rel="noopener">发布Maven构件到中央仓库</a> by 阿信sxq  </li><li><a href="https://my.oschina.net/looly/blog/270767" target="_blank" rel="noopener">将项目发布到Maven中央库</a> by 路小磊 (截图详细)</li></ul></blockquote><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在这个过程中遇到许多奇奇怪怪的问题，下面依次说明</p><h3 id="插件没找到"><a href="#插件没找到" class="headerlink" title="插件没找到"></a>插件没找到</h3><p>在 IntelliJ IDEA 中，pom.xml 里的插件找不到并报红，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/maven_%E6%8F%92%E4%BB%B6%E4%BE%9D%E8%B5%96%E4%B8%8D%E8%AF%86%E5%88%AB-2.jpeg" alt="maven 依赖不识别" title>                </div>                <div class="image-caption">maven 依赖不识别</div>            </figure><p>自己使用 mvn 指令构建的话，会提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;&apos;&apos;org.apache.maven.plugins:maven-gpg-plugin:1.6&apos;&apos;&apos; not found</span><br><span class="line">Inspects a Maven model for resolution problems.</span><br></pre></td></tr></table></figure><p>两种解决方法：</p><ul><li>方案一：手动下载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:get -DrepoUrl=http://repo.maven.apache.org/maven2/ -Dartifact=org.apache.maven.plugins:maven-gpg-plugin:1.6</span><br></pre></td></tr></table></figure><ul><li>方案二：在 IntelliJ IDEA 中更新 <code>Indexed Maven Repositories</code></li></ul><p>步骤： IntelliJ IDEA -&gt; Preferences -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven -&gt; Repositories -&gt; Remote URL -&gt; Update</p><p>这个过程耗时视网速而定，大概 5～10 分钟。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/maven_%E4%BE%9D%E8%B5%96%E4%B8%8D%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="maven 依赖不识别解决方案" title>                </div>                <div class="image-caption">maven 依赖不识别解决方案</div>            </figure><p>方案一是参考下面第二个链接；方案二是我自己提出并验证是有效的。</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/24484776/intellij-idea-shows-plugin-not-found" target="_blank" rel="noopener">IntelliJ IDEA shows plugin not found</a></li><li><a href="http://stackoverflow.com/questions/20496239/maven-plugins-can-not-be-found-in-intellij" target="_blank" rel="noopener">Maven plugins can not be found in IntelliJ</a></li></ul></blockquote><h3 id="GPG-版本问题"><a href="#GPG-版本问题" class="headerlink" title="GPG 版本问题"></a>GPG 版本问题</h3><p>我用的是 mac,下载的是二进制发行包 GnuPG for OS X，然后发现是在 terminal 输入的指令是 <code>gpg2</code> 而不是 <code>gpg</code>。比如，公钥显示如下：    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gpg2 --list-keys </span><br><span class="line">/Users/brian/.gnupg/pubring.kbx</span><br><span class="line">-------------------------------</span><br><span class="line">pub   rsa2048 2017-05-10 [SC] [expires: 2019-05-10]</span><br><span class="line">      DBD686EC6F4E34C4096C427506755FE5978EC644</span><br><span class="line">      DBD686EC6F4E34C4096C427506755FE5978EC644</span><br><span class="line">uid                      brianway &lt;weichuyang@163.com&gt;</span><br><span class="line">sub   rsa2048 2017-05-10 [E] [expires: 2019-05-10]</span><br></pre></td></tr></table></figure><p>但 Maven 里面的 maven-gpg-plugin 插件默认是使用 <code>gpg</code> 指令，不是 <code>gpg2</code>，所以需要配置 setting.xml 的 profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg2<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>mypassphrase<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://stackoverflow.com/questions/14114528/avoid-gpg-signing-prompt-when-using-maven-release-plugin" target="_blank" rel="noopener">http://stackoverflow.com/questions/14114528/avoid-gpg-signing-prompt-when-using-maven-release-plugin</a></p></blockquote><h3 id="发布出问题"><a href="#发布出问题" class="headerlink" title="发布出问题"></a>发布出问题</h3><p>输入 <code>mvn clean deploy -P release</code> 后，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary:</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] webporter-parent ................................... SUCCESS [ 11.690 s]</span><br><span class="line">[INFO] webporter-core ..................................... SUCCESS [  5.208 s]</span><br><span class="line">[INFO] webporter-data-elasticsearch ....................... SUCCESS [  2.769 s]</span><br><span class="line">[INFO] webporter-collector-zhihu .......................... FAILURE [  7.889 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 28.069 s</span><br><span class="line">[INFO] Finished at: 2017-05-11T18:11:44+08:00</span><br><span class="line">[INFO] Final Memory: 45M/723M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (injected-nexus-deploy) on project webporter-collector-zhihu: Failed to deploy artifacts: Could not transfer artifact com.github.brianway:webporter-data-elasticsearch:jar:javadoc:1.0-20170511.101142-1 from/to sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots/): Failed to transfer file: https://oss.sonatype.org/content/repositories/snapshots/com/github/brianway/webporter-data-elasticsearch/1.0-SNAPSHOT/webporter-data-elasticsearch-1.0-20170511.101142-1-javadoc.jar. Return code is: 401, ReasonPhrase: Unauthorized. -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] After correcting the problems, you can resume the build with the command</span><br><span class="line">[ERROR]   mvn &lt;goals&gt; -rf :webporter-collector-zhihu</span><br></pre></td></tr></table></figure><p>搞了几个小时，最后发现是 pom.xml 的 <code>distributionManagement</code> 中 snapshotRepository 与 repository 中的 id 与 setting.xml 中 server 的 id <strong>不一致</strong> 导致的。因为我的 pom.xml 是模仿的 <a href="https://github.com/code4craft/webmagic" target="_blank" rel="noopener">webmagic</a> 的 pom.xml，而 settings.xml 的 server 配置却是复制的<a href="https://my.oschina.net/huangyong/blog/226738" target="_blank" rel="noopener">《将 Smart 构件发布到 Maven 中央仓库》 by 黄勇 </a> 中的，结果导致不一样。</p><p>我主要从下面这篇文章中找到的灵感 </p><blockquote><p><a href="http://www.cnblogs.com/chowmin/articles/3930277.html" target="_blank" rel="noopener">Maven2部署构件到Nexus时出现的Failed to transfer file错误</a></p></blockquote><h3 id="github-上-release"><a href="#github-上-release" class="headerlink" title="github 上 release"></a>github 上 release</h3><p>在项目的 pom.xml 中配置 release 的插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.release.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tagNameFormat</span>&gt;</span>v@&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tagNameFormat</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">autoVersionSubmodules</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoVersionSubmodules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用下面的指令即可直接在 github 远程仓库生成发行版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn release:prepare</span><br><span class="line">mvn release:perform</span><br></pre></td></tr></table></figure><p>我实验的结果是，执行 <code>mvn release:prepare</code> 并不会对远程仓库造成影响，再执行 <code>mvn release:perform</code> 才会在 git 远程仓库多出两个 commit 和一个 release 版本，查看提交日志 <code>git log --pretty=oneline</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2619dfaafca7a82f70e938f5b6efd6d9f4110554 [maven-release-plugin] prepare for next development iteration</span><br><span class="line">01795a07b793930b74dc0cb5e6ce2b43ee3a5434 [maven-release-plugin] prepare release v1.0</span><br></pre></td></tr></table></figure><blockquote><p>参考： <a href="http://blog.csdn.net/u012076316/article/details/52174313" target="_blank" rel="noopener">maven scm 配置git</a></p></blockquote><p>用上面的方法，不另外配置的话，commit message 是由 Maven 插件自动生成的。也可以不使用插件发布，自己 commit 上去，然后在 github 上发布。</p><blockquote><p>参考： <a href="https://github.com/waylau/github-help/blob/master/Creating%20Releases%20%E5%88%9B%E5%BB%BA%E5%8F%91%E5%B8%83%E5%8C%85.md" target="_blank" rel="noopener">Creating Releases 创建发布包</a></p></blockquote><h3 id="构件没有出现在-Staging-Repositories"><a href="#构件没有出现在-Staging-Repositories" class="headerlink" title="构件没有出现在 Staging Repositories"></a>构件没有出现在 Staging Repositories</h3><p>按照教程里的步骤，上传构件到 OSS 中后，应该先在 <a href="https://oss.sonatype.org/" target="_blank" rel="noopener">https://oss.sonatype.org/</a> 中，点击”Staging Repositories” -&gt; 在搜索栏输入你的 groupId -&gt; 勾选你的构件并点击 close -&gt; 点击 tab 栏的 release。</p><p>然而我却没有这个步骤，即我上传构件成功后，在 Staging Repositories 中并没有找到自己的构件，但在左边侧栏的 Artifact Search 框输入自己的 groupId 却能搜到我的构件，百思不得其解。最后还是求助 Sonatype 的工作人员才弄清楚，原来是我使用了插件 nexus-staging-maven-plugin 并且默认 autoReleaseAfterClose 是 true 导致的，直接越过了手工 close 的步骤。</p><p>Sonatype 工作人员的答复：</p><blockquote><p>It sounds like you have the nexus-staging-maven-plugin in your build (assuming you’re using Maven, but what I’m going to say might also apply to other tools) configured to autoReleaseAfterClose.  If this is the case, oss.sonatype.org will automatically release your staging repository after it has been successfully closed.  oss.sonatype.org is also configured, by default, to drop released staging repositories.  Once your artifacts have been released, they will appear in the Releases repository on oss.sonatype.org, and from there they will sync to Maven Central.<br>You shouldn’t expect to see staging repositories if everything worked and if all your components passed the ruleset validations.  The fact that you can search for your artifacts on search.maven.org is a good sign.</p></blockquote><p>具体可以参看我提的 issue: <a href="https://issues.sonatype.org/browse/OSSRH-31186" target="_blank" rel="noopener">OSSRH-31186</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li><a href="https://my.oschina.net/huangyong/blog/226738" target="_blank" rel="noopener">将 Smart 构件发布到 Maven 中央仓库 </a> by 黄勇</li><li><a href="https://my.oschina.net/songxinqiang/blog/313226" target="_blank" rel="noopener">发布Maven构件到中央仓库</a> by 阿信sxq  </li><li><a href="https://my.oschina.net/looly/blog/270767" target="_blank" rel="noopener">将项目发布到Maven中央库</a> by 路小磊 (截图详细)</li><li><a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html" target="_blank" rel="noopener">GPG入门教程</a></li><li><a href="http://www.cnblogs.com/buchiany/archive/2017/04/04/6665637.html" target="_blank" rel="noopener">GnuPG的使用入门</a>（gpg2）</li><li><a href="http://central.sonatype.org/pages/working-with-pgp-signatures.html" target="_blank" rel="noopener">Working with PGP Signatures</a></li><li><a href="https://github.com/waylau/github-help/blob/master/Creating%20Releases%20%E5%88%9B%E5%BB%BA%E5%8F%91%E5%B8%83%E5%8C%85.md" target="_blank" rel="noopener">Creating Releases 创建发布包</a></li><li><a href="https://issues.sonatype.org/browse/OSSRH-31186" target="_blank" rel="noopener">Sonatype OSSRH-31186</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录第一次将项目发布到 Maven 中央仓库踩过的坑和解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IntelliJ-IDEA" scheme="https://brianway.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Maven" scheme="https://brianway.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Learning Notes - Understanding the Weird Parts of JavaScript</title>
    <link href="https://brianway.github.io/2017/05/04/Learning-Notes-Understanding-the-Weird-Parts-of-JavaScript/"/>
    <id>https://brianway.github.io/2017/05/04/Learning-Notes-Understanding-the-Weird-Parts-of-JavaScript/</id>
    <published>2017-05-04T06:05:07.000Z</published>
    <updated>2019-04-07T16:16:59.849Z</updated>
    
    <content type="html"><![CDATA[<p>The learning notes of the MOOC “JavaScript: Understanding the Weird Parts” on Udemy,including most important parts of JavaScript.</p><blockquote><ul><li>Course link: <a href="https://www.udemy.com/understand-javascript/" target="_blank" rel="noopener">JavaScript: Understanding the Weird Parts</a></li><li>My Certification: <a href="https://www.udemy.com/certificate/UC-CWVEBCC5/" target="_blank" rel="noopener">UC-CWVEBCC5</a></li></ul></blockquote><a id="more"></a><h2 id="Basic-concept"><a href="#Basic-concept" class="headerlink" title="Basic concept"></a>Basic concept</h2><h3 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h3><p>Conceptual Aside:</p><ul><li><strong>Syntax Parser</strong>: a program that reads your code and determines what it does and if its grammer is valid</li><li><strong>Lexical Environment</strong>: where something sits physically in the code you write</li><li><strong>Execution Context</strong>: a wapper to help manage the code that is running</li><li><strong>Name/Value Pair</strong>: a name which maps to a unique value</li><li><p><strong>Object</strong>: A collection of Name/Value pairs</p></li><li><p><strong>undefined</strong>: a special value/a special keyword that JavaScript has within it internally that means that the value hasn’s been set.It means that this is the value that was initially set by JavaScript.</p></li><li><strong>single threaded</strong>: one command is being executed at a time.It may not be under the hood of the browser.</li><li><p><strong>synchronous</strong>: one at a time and in order.</p></li><li><p><strong>dynamic typing</strong>: you don’t tell the engine what type of data a variable holds,it figures it out while your code is running.</p></li><li><strong>operator</strong>: a special function that is syntatically (written) differently.</li><li><p><strong>coercion</strong>: converting a value from one type to another.</p></li><li><p><strong>by value vs. by reference</strong>: all primitive types are by value and all objects are by reference.</p></li><li><p><strong>array</strong>: collections of anything.</p></li><li><p><strong>inheritance</strong>: one object gets access to the properties and methods of another object.</p></li><li><strong>built-in function constructors</strong>: objects created by them have all the properties and methods on the functions’ <code>prototype</code> property and what’s boxed inside of it is the primitive value itself.The built-in function constructors look like you’re creating primitives but you’re not,you are creating objects that contain primitives with a whole bunch of features.  </li></ul><hr><h3 id="Framework-Aside"><a href="#Framework-Aside" class="headerlink" title="Framework Aside"></a>Framework Aside</h3><p>Framework Aside:</p><ul><li><strong>default value</strong>: e.g. <code>window.libName = window.libName || &quot;lib 1&quot;</code></li><li><strong>namespace</strong>: a container for variables and functions.</li><li><strong>function overloading</strong>: JavaScript doesn’t have it.There are other appoaches to deal with it.</li><li><strong>whitespace</strong>: invisible characters that create literal “space” in your written code,like carriage returns,tabs, or spaces.</li><li><strong>IIFEs and safe code</strong>: by wrapping code in an immediately invoked function, does not interfere with crash into,or be interfered by any other code that might be included in your application.</li><li><strong>function factory</strong>: a function that returns or makes other things for you.</li></ul><h3 id="Dangerous-Aside"><a href="#Dangerous-Aside" class="headerlink" title="Dangerous Aside"></a>Dangerous Aside</h3><p>Dangerous Aside:</p><ul><li>automatic semicolon insertion: if you’re going to return an object from a function,you need to type the <code>{</code> right after <code>return</code> rather than in a new line.</li><li><code>new</code> and functions: don’t forget the key word <code>new</code> in front of the function constructors,or you’ll probably get <code>undefined</code> returned and cause in trouble.You’d better always have a capital letter as the name of the constructor.</li><li>built-in function constructors: strange things can happen during comparison with operator and coercion.In general,it’s better not to use them.Use literals.</li><li>arrays and <code>for..in</code>: in the case of arrays,don’t use <code>for..in</code> because arrays are objects in JavaScrip and their items are added properties.</li></ul><hr><h2 id="Execution-Context-and-Lexical-Environment"><a href="#Execution-Context-and-Lexical-Environment" class="headerlink" title="Execution Context and Lexical Environment"></a>Execution Context and Lexical Environment</h2><h3 id="Execution-Context"><a href="#Execution-Context" class="headerlink" title="Execution Context"></a>Execution Context</h3><p>Execution Context(Global) was created at global level by the JavaScrip engine, and two things were also created for you:</p><ul><li>Global Object</li><li>A special valiable called <code>this</code></li></ul><p>When you open the file inside your browser, <code>this</code> object is the <code>window</code> object,which refers to the browser window.That is to say:<code>this</code> object <strong>equals</strong> <code>window</code> object at global level in this case.</p><p><strong>Global means “Not Inside a Funciton”.</strong> Global variables and functions get attached to the global object.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_execution-context.png" alt="Execution Context" title>                </div>                <div class="image-caption">Execution Context</div>            </figure><p><strong>hoisting</strong>: variables and functions are to some degree available even though they’re written later in the code.</p><p>The phenomenon is because the exection context is created in two phases.</p><ol><li>creation phase: global object and <code>this</code> set up in memory,an outer environment, also <strong>set up memory space for variables and functions</strong>(this step called <strong>hoisting</strong>).</li><li>execution phase: runs the code you’ve written line by line,interpreting it,covering it,compling it,executing it.</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_creation-phase.png" alt="creation phase" title>                </div>                <div class="image-caption">creation phase</div>            </figure><p>All variables in JavaScript are initally set to undefined,and functions are sitting in memory in their entirety.</p><h3 id="Function-Invocation"><a href="#Function-Invocation" class="headerlink" title="Function Invocation"></a>Function Invocation</h3><p><strong>invocation</strong>: running a function.In JavaScrip,by using parenthesis<code>()</code>.</p><p><strong>Execution Stack</strong>: top execution context in the stack is the currently executing function.A new execution context is created and put on top of the stack for the function invoked,and popped off the stack when the function finished.</p><p><strong>Variable Environment</strong>: where the variables live.And how they relate to each other in memory.</p><p>Every execution context has a reference to its <strong>outer environment</strong>.(that is to say,to its lexical environment)</p><p>execution context vs. outer environment reference:</p><ul><li><strong>execution context</strong> is created when you invoke a function.</li><li><strong>outer environment reference</strong> is created for the execution context and it looks at where the code is physically written in the JavaScrip file.(A different way of thinking about it: the outer reference is to the execution context in which the function was created.)</li></ul><p>Here is an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(myVar);<span class="comment">//1 (4th line)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);<span class="comment">//undefined (3rd line)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);<span class="comment">//2 (2nd line)</span></span><br><span class="line">b();</span><br><span class="line">c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myVar);<span class="comment">//1 (1st line)</span></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(myVar);<span class="comment">//1 (5th line)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// result is (five lines): 1 2 undefined 1 1</span></span><br></pre></td></tr></table></figure><p><strong>Scope Chain</strong>:those links of outer environment references where you can access variables.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_scope-chain.png" alt="Scope Chain" title>                </div>                <div class="image-caption">Scope Chain</div>            </figure><p><strong>scope</strong>: where a variable is available in your code.</p><p><strong>asynchronous</strong>: more than one at a time.(Asynchronous part is about what’s happening outside the JavaScrip engine rather than inside it.)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_asynchronous.png" alt="asynchronous" title>                </div>                <div class="image-caption">asynchronous</div>            </figure><p>Any events that happen outside of the engine get placed into the <strong>event queue</strong>,an if the execution stack is <strong>empty</strong>,if JavaScrip isn’t working on anything else currently,it’ll process those events in the order they happend via the event loop <strong>synchronously</strong>.</p><h2 id="Types-and-Operators"><a href="#Types-and-Operators" class="headerlink" title="Types and Operators"></a>Types and Operators</h2><p>There are six primitive types in JavaScrip.</p><p><strong>primitive type</strong>: a type of data that represents a single value.That is,not an object.</p><ul><li><strong>undefined</strong>: represents lack of existence</li><li><strong>null</strong>: represents lack of existence</li><li><strong>boolean</strong>: true or false</li><li><strong>number</strong>: floating point number.There’s only one ‘number’ type.</li><li><strong>string</strong>: a sequence of characters.Both <code>&#39;</code> and <code>&quot;</code> can be used.</li><li><strong>symbol</strong>: used in ES6</li></ul><p>precedence and associativity:</p><ul><li>operator precedence: which operator function gets called first.</li><li>associativity: what order operator functions get called in: left-to-right or right-to-left.</li></ul><blockquote><p>Reference: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">Operator precedence</a></p></blockquote><p><code>==</code> vs. <code>===</code></p><ul><li><code>==</code> will try to coerce the values if the two values are not the same type.</li><li><code>===</code> doesn’t try to coerce the values.It’s strict equality.</li></ul><blockquote><p>Reference: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">Equality comparisons and sameness</a></p></blockquote><p>The example below shows the usage of coercion to check for existence and is used in a lot of really great frameworks and libraries.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">//goes to internet and look for a value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Something is there"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or opertator <code>||</code>: if you passed it two values that can be coerced to true and false,it will return the first one that coerces to true.</p><hr><h2 id="Objects-and-Functions"><a href="#Objects-and-Functions" class="headerlink" title="Objects and Functions"></a>Objects and Functions</h2><p>Object have properties and methods:</p><ul><li>Primitive “property”</li><li>Object “property”</li><li>Function “method”</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_object.png" alt="Object" title>                </div>                <div class="image-caption">Object</div>            </figure><p>Both <code>[]</code> and <code>.</code> can find the property on the object and give you the value.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person[<span class="string">"firstname"</span>] = <span class="string">"Brian"</span>;<span class="comment">//use brackets []</span></span><br><span class="line">person.lastname = <span class="string">"Way"</span>;<span class="comment">//use dot .</span></span><br></pre></td></tr></table></figure><p>Object literal vs. JSON string</p><ul><li>The object literal syntax uses the curly braces to define name and value pairs separated by colons.</li><li>JSON stands for JavaScript Object Notation.It looks like object literal syntax except for some differences.For example,property names have to be wrapped in quotes.JSON is technically a subset of the object literal syntax.<ul><li><code>JSON.stringify({firstname : &quot;Brian&quot;, student: true})</code></li><li><code>JSON.parse(&#39;{&quot;firstname&quot;:&quot;Brian&quot;,&quot;student&quot;:true}&#39;)</code>;</li></ul></li></ul><p><strong>First class functions</strong>: everything you can do with other types, you can do with functions.(Assign them to variables,pass them around,create them on the fly.)</p><p>In JavaScrip,<strong>functions are objects</strong>.The function is an object with other properties,that is to say, a function is a special type of object.Two main other properties:</p><ul><li>it has a hidden <strong>optional name property</strong> which can be anonymous then if you don’t have a name.</li><li>we have <strong>code property</strong> that contains the code and that code property is <strong>invocable</strong> so we can run the code.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_function.png" alt="function" title>                </div>                <div class="image-caption">function</div>            </figure><p><strong>expression</strong>: a unit of code that results in a value.</p><p><strong>Statement just does work and an expression results in a value.</strong></p><p>mutate: to change something.</p><p>The keyword <code>this</code> points to what? Let’s see an example.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">'The c object'</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Updated c object'</span>; <span class="comment">//this points to c object</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span>(<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = newname; <span class="comment">//this points to the global object</span></span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">'Updated again! The c object'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//this points to c object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>In the example above,the internal function <code>setname</code> when its execution context was created,the <code>this</code> keyword points to the global object,even though it’s sitting kind of inside an object that I created.To avoid this case,just use <code>var self = this;</code>(set equal to by reference) as the very first line of your object method.</p><p>An array can be created in the following formmat:</p><ul><li><code>var arr = new Array();</code></li><li><code>var arr = [1, 2, 3];</code></li></ul><p>Array in JavaScript is zero based and dynamically typed,it figures out what type of things are on the fly.</p><p><code>arguments</code>: the parameters you pass to a function.JavaScript gives you a keyword of the same name which contains them all.Although <code>arguments</code> doesn’t contain the names of arguments,just the values,you could use it like an array.A new thing is called a spread parameter.<code>...other</code> means take everything else and wrap it into an array of this name “other”.</p><h3 id="IIFEs"><a href="#IIFEs" class="headerlink" title="IIFEs"></a>IIFEs</h3><p>IIFEs - an immediately invoked function expressions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using an Immediately Invoked Function Expression (IIFE)</span></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + name;</span><br><span class="line">&#125;(<span class="string">'John'</span>);</span><br></pre></td></tr></table></figure><p>To wrap your function in parentheses.This is when you want a function expression instead of normal function statement.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//valid syntax but output nothing</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + name);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IIFE</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + name);</span><br><span class="line">&#125;(<span class="string">"Brian"</span>));</span><br><span class="line"><span class="comment">//also OK</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + name);</span><br><span class="line">&#125;)(<span class="string">"Brian"</span>);</span><br></pre></td></tr></table></figure><h3 id="understanding-closures"><a href="#understanding-closures" class="headerlink" title="understanding closures"></a>understanding closures</h3><p>Even though the outer function ended/finished,any functions created inside of it when they are called will still have a reference to that outer function’s memory.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_closure-1.png" alt="closure" title>                </div>                <div class="image-caption">closure</div>            </figure><p>Outer function is gone,the exectution context is gone.But what’s in memory for that execution context isn’t and JavaScript engine makes sure that the inner function can still go down the scope chain and find it.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_closure-2.png" alt="closure" title>                </div>                <div class="image-caption">closure</div>            </figure><p>In this way we say that the execution context has closed in its outer variables.And so this phenomenon,of it closing in all the variables that it’s supposed to have access to,is called a <strong>closure</strong>. This is the feature of the language JavaScript,very important.</p><p><strong>callback function</strong>: a function you give to another function,to be run when the other function is finished.</p><h3 id="call-apply-and-bind"><a href="#call-apply-and-bind" class="headerlink" title="call(),apply() and bind()"></a>call(),apply() and bind()</h3><p>All functions in JavaScript also get access to some special functions/methods, on their own.So all functions have access to a <code>call</code> method,an <code>apply</code> method and a <code>bind</code> method.</p><ul><li><code>bind()</code> creates a new copy of whatever function you’re calling it on.And then whatever object you pass to this method is what the <code>this</code> variable points to by reference.</li><li><code>call()</code> invokes the function you’re calling it on.Also let you decide what the <code>this</code> variable will be.Unlike <code>bind()</code> which creates a new copy,<code>call()</code> actually executes it.</li><li><code>apply()</code> does the exact same thing as <code>call()</code> except that it wants an array of parameters as the second parameter rather than just the normal list.</li></ul><p>These functions can be used for function borrowing and function currying.</p><p>function currying: creating a copy of a function but with some preset parameters.</p><p>some open source libraries:</p><blockquote><ul><li><a href="http://underscorejs.org/" target="_blank" rel="noopener">underscore.js</a></li><li><a href="https://lodash.com/" target="_blank" rel="noopener">lodash</a></li><li><a href="http://momentjs.com/" target="_blank" rel="noopener">moment.js</a></li></ul></blockquote><h2 id="Object-Oriented-JavaScript-and-Prototypal-Inheritance"><a href="#Object-Oriented-JavaScript-and-Prototypal-Inheritance" class="headerlink" title="Object-Oriented JavaScript and Prototypal Inheritance"></a>Object-Oriented JavaScript and Prototypal Inheritance</h2><p>Classical vs. Prototypal Inheritance:</p><ul><li>Classical Inheritance: verbose</li><li>Prototypal Inheritance: simple</li></ul><p>All objects include functions hava a prototype property.The prototype is simply a reference to another object.</p><p>The prototype chain,the concept of prototypes is just I have this special reference in my object that says where to look for other properties and methods without manually going dot prototype.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/JavaScript_prototype-chain.png" alt="prototype chain" title>                </div>                <div class="image-caption">prototype chain</div>            </figure><p><strong>reflection</strong>: an object can look at itself,listening and changing its properties and methods.</p><p><em>tip: the “for in” actually reached out and grabbed every property and method not just on the object but also on the object’s prototype</em></p><p><strong>extend</strong>: here we just talk about the <a href="http://underscorejs.org/docs/underscore.html#section-103" target="_blank" rel="noopener"><code>extend</code> function</a> in <a href="http://underscorejs.org/" target="_blank" rel="noopener">underscore</a>.You can <strong>combine and compose objects</strong> in this extend pattern with relection,not just the prototype pattern.</p><h2 id="Building-Objects"><a href="#Building-Objects" class="headerlink" title="Building Objects"></a>Building Objects</h2><p><strong>function constructors</strong>: a normal function that is used to construct objects.(The <code>this</code> variable points a new empty object,and that object is returned from the function automatically.)</p><p>There are many approaches to building an object:</p><ol><li>object literal syntax: <code>{}</code></li><li>the key word <code>new</code>: <code>var john = new Person();</code><ul><li>first, an empty object is created.</li><li>then, it invokes the function with the <code>this</code> variable pointing to that empty object.</li><li>last, return the object if you don’t return anything explicitly,or return what is returned in the function.</li></ul></li><li><code>Object.create</code>: creates an empty object with its prototype pointing at whatever you have passed in to <code>Object.create</code>.<ul><li>you can simply override/hide properties and methods on those created objects by setting the values of those properties and methods on new objects themselves.</li></ul></li><li>ES6 and classes: another approach but still works the same under  the hood,just syntactic sugar.<ul><li>key word <code>class</code>: class is not the template or definition like other languages such as Java/C++,<strong>class is also an object</strong>.</li><li>key word <code>extends</code>: sets the prototype(<code>__prototype__</code>) for any of the objects created with this class.</li></ul></li></ol><p><code>.prototype</code>: this <code>prototype</code> property of all functions is where the prototype chain points for any objects created using that function as a constructor.</p><ul><li>The <code>prototype</code> property on a function is not the prototype property(<code>__prototype__</code>) of the function.</li><li>It’s used only by the <code>new</code> operator.In other cases,it’s just an empty object,hanging out there.</li><li>It’s the prototype of any objects created if you’re using the function as a function constructor.</li><li>takes up less memory space if you add method to the prototype because it’ll only have one,while it’ll have many copies if you add it to function constructor.</li></ul><p>polyfill: code that adds a feature which the engine may lack.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polyfill</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Object.create implementation'</span></span><br><span class="line">      + <span class="string">' only accepts the first parameter.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>syntactic sugar: a different way to type something that doesn’t change how it works under the hood.</p><h2 id="Odds-and-Ends"><a href="#Odds-and-Ends" class="headerlink" title="Odds and Ends"></a>Odds and Ends</h2><p>initialization: when come accross a large initialization of objects,don’t get overwhelmed by the syntax.</p><p><code>typeof</code> and <code>instanceof</code>:</p><ul><li><code>typeof</code>: it’s an operator(essentially a function) that takes a parameter returns a string.It will tell you under most cases what something is.<ul><li><code>Object.prototype.toString.call(arr)</code> gets array type(<code>[object Array]</code>) returned,or you’ll get <code>object</code> returned.</li><li><code>typeof undefined</code> returns <code>undefined</code></li><li><code>typeof null</code> returns <code>object</code>.It’s been a bug since forever.</li></ul></li><li><code>instanceof</code>: tells if any object is down the prototype chain.It will tell you what something has in its prototype chain.</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">strict mode on the MDN</a></p></blockquote><p>transpile: convert the syntax of one programming language to another.</p><blockquote><ul><li><a href="http://www.typescriptlang.org" target="_blank" rel="noopener">Typescript</a></li><li><a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">Traceur</a>(Traceur is a JavaScript.next-to-JavaScript-of-today compiler)</li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">features of ECMAScript 6</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The learning notes of the MOOC “JavaScript: Understanding the Weird Parts” on Udemy,including most important parts of JavaScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Course link: &lt;a href=&quot;https://www.udemy.com/understand-javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript: Understanding the Weird Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My Certification: &lt;a href=&quot;https://www.udemy.com/certificate/UC-CWVEBCC5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UC-CWVEBCC5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="前端" scheme="https://brianway.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://brianway.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Java８新特性总览</title>
    <link href="https://brianway.github.io/2017/03/29/javase-java8/"/>
    <id>https://brianway.github.io/2017/03/29/javase-java8/</id>
    <published>2017-03-28T22:30:07.000Z</published>
    <updated>2019-04-07T17:01:10.015Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 Java 8 的新特性，包括 Lambda 表达式、方法引用、流(Stream API)、默认方法、Optional、组合式异步编程、新的时间 API，等等各个方面。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><ul><li>本文是《Java 8 in Action》的读书笔记，主要提炼了概念性的知识/观点性的结论，对推导和阐释没有摘录</li><li>文中涉及到的源码请参考我在 GitHub 上的项目 <a href="https://github.com/brianway/java-learning" target="_blank" rel="noopener">java-learning</a> (地址为 <a href="https://github.com/brianway/java-learning" target="_blank" rel="noopener">https://github.com/brianway/java-learning</a>)的 Java 8 模块部分，比书中参考源码分类更清晰</li></ul></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>Java 8 的主要想法：</p><ul><li>stream API</li><li>向方法传递代码的技巧(方法引用、Lambda)</li><li>接口中的默认方法</li></ul><p>三个编程概念：</p><ul><li>流处理（好处：更高抽象，免费并行）</li><li>行为参数化（通过 API 来传递代码）</li><li>并行与共享的可变数据</li></ul><p>函数式编程范式的基石：</p><ul><li>没有共享的可变数据</li><li>将方法和函数即代码传递给其它方法的能力</li></ul><p>Java 8 使用 Stream API 解决了两个问题：</p><ul><li>集合处理时的套路和晦涩</li><li>难以利用多核</li></ul><p>Collection 主要是为了存储和访问数据，而 Stream 则主要用于描述对数据的计算。</p><h3 id="通过行为参数化来传递代码"><a href="#通过行为参数化来传递代码" class="headerlink" title="通过行为参数化来传递代码"></a>通过行为参数化来传递代码</h3><p>行为参数化：类似于策略设计模式</p><p><code>类 -&gt; 匿名类 -&gt; Lambda 表达式</code>，代码越来越简洁</p><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><p>Lambda 表达式：简洁地表示可传递的匿名函数的一种方式</p><p>重点留意这四个关键词：匿名、函数、传递、简洁</p><p>三个部分：</p><ul><li>参数列表</li><li>箭头</li><li>Lambda 主体</li></ul><p>Lambda 基本语法，下面两者之一：</p><ul><li><code>(parameters) -&gt; expression</code></li><li><code>(parameters) -&gt; { statements; }</code></li></ul><p>函数式接口：只定义一个<strong>抽象方法</strong>的接口。函数式接口的抽象方法的签名称为 <em>函数描述符</em></p><p>Lambda 表达式允许你以内联的形式为函数式接口的抽象方法提供实现，并把整个表达式作为函数式接口(一个具体实现)的实例。</p><p>常用函数式接口有：Predicate, Consumer, Function, Supplier 等等。</p><p>Lambda 的类型是从使用 Lambda 的上下文推断出来的。上下文中 Lambda 表达式需要的类型称为目标类型。</p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用主要有三类：</p><ul><li>(1) 指向静态方法的方法引用<ul><li>Lambda: <code>(args) -&gt; ClassName.staticMethod(args)</code></li><li>方法引用：<code>ClassName::staticMethod</code></li></ul></li><li>(2) 指向任意类型实例方法的方法引用<ul><li>Lambda: <code>(arg0, rest) -&gt; arg0.instanceMethod(rest)</code></li><li>方法引用：<code>ClassName::instanceMethod</code>(arg0 是 ClassName 类型的)</li></ul></li><li>(3) 指向现有对象的实例方法的方法引用<ul><li>Lambda: <code>(args) -&gt; expr.instanceMethod(args)</code></li><li>方法引用：<code>expr::intanceMethod</code></li></ul></li></ul><p>方法引用就是替代那些转发参数的 Lambda 表达式的语法糖</p><h2 id="流-Stream-API"><a href="#流-Stream-API" class="headerlink" title="流(Stream API)"></a>流(Stream API)</h2><p>引入的原因：</p><ul><li>声明性方式处理数据集合</li><li>透明地并行处理，提高性能</li></ul><p><strong>流</strong> 的定义：从支持数据处理操作的源生成的元素序列</p><p>两个重要特点：</p><ul><li>流水线</li><li>内部迭代</li></ul><p>流与集合：</p><ul><li>集合与流的差异就在于什么时候进行计算<ul><li>集合是内存中的数据结构，包含数据结构中目前所有的值</li><li>流的元素则是按需计算/生成</li></ul></li><li>另一个关键区别在于遍历数据的方式<ul><li>集合使用 Collection 接口，需要用户去做迭代，称为外部迭代</li><li>流的 Streams 库使用内部迭代</li></ul></li></ul><p>流操作主要分为两大类：</p><ul><li>中间操作：可以连接起来的流操作</li><li>终端操作：关闭流的操作，触发流水线执行并关闭它</li></ul><p>流的使用：</p><ul><li>一个数据源（如集合）来执行一个查询；</li><li>一个中间操作链，形成一条流的流水线；</li><li>一个终端操作，执行流水线，并能生成结果。</li></ul><p>流的流水线背后的理念类似于构建器模式。常见的中间操作有 <code>filter</code>,<code>map</code>,<code>limit</code>,<code>sorted</code>,<code>distinct</code>；常见的终端操作有 <code>forEach</code>,<code>count</code>,<code>collect</code>。</p><h3 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h3><ul><li>筛选<ul><li>谓词筛选：filter</li><li>筛选互异的元素：distinct</li><li>忽略头几个元素：limit</li><li>截短至指定长度：skip</li></ul></li><li>映射<ul><li>对流中每个元素应用函数：map</li><li>流的扁平化：flatMap</li></ul></li><li>查找和匹配<ul><li>检查谓词是否至少匹配一个元素：anyMatch</li><li>检查谓词是否匹配所有元素：allMatch/noneMatch</li><li>查找元素：findAny</li><li>查找第一个元素：findFirst</li></ul></li><li>归约（折叠）：<code>reduce(初值，结合操作)</code><ul><li>元素求和</li><li>最大值和最小值</li></ul></li></ul><p><code>anyMatch</code>,<code>allMatch</code>,<code>noneMatch</code> 都用到了短路；<code>distinct</code>,<code>sorted</code>是有状态且无界的，<code>skip</code>,<code>limit</code>,<code>reduce</code>是有状态且有界的。</p><p>原始类型流特化：<code>IntStream</code>,<code>DoubleStream</code>,<code>LongStream</code>，避免暗含的装箱成本。</p><ul><li>映射到数值流：<code>mapToInt</code>,<code>mapToDouble</code>,<code>mapToLong</code></li><li>转换回流对象：<code>boxed</code></li><li>默认值：<code>OptionalInt</code>,<code>OptionalDouble</code>,<code>OptionalLong</code></li></ul><p>数值范围：</p><ul><li><code>range</code>:<code>[起始值，结束值)</code></li><li><code>rangeClosed</code>:<code>[起始值，结束值]</code></li></ul><h3 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h3><ul><li>由值创建流：<code>Stream.of</code>,<code>Stream.empty</code></li><li>由数组创建流：<code>Arrays.stream(数组变量)</code></li><li>由文件生成流：<code>Files.lines</code></li><li>由函数生成流：创建无限流，<ul><li>迭代： <code>Stream.iterate</code></li><li>生成：<code>Stream.generate</code></li></ul></li></ul><h3 id="用流收集数据"><a href="#用流收集数据" class="headerlink" title="用流收集数据"></a>用流收集数据</h3><p>对流调用 <code>collect</code> 方法将对流中的元素触发归约操作（由 <code>Collector</code> 来参数化）。</p><p>Collectors 实用类提供了许多静态工厂方法，用来创建常见收集器的实例，主要提供三大功能：</p><ul><li>将流元素归约和汇总为一个值</li><li>元素分组</li><li>元素分区</li></ul><p>归约和汇总(<code>Collectors</code> 类中的工厂方法)：</p><ul><li>统计个数：<code>Collectors.counting</code></li><li>查找流中最大值和最小值：<code>Collectors.maxBy</code>,<code>Collectors.minBy</code></li><li>汇总：<code>Collectors.summingInt</code>,<code>Collectors.averagingInt</code>,<code>summarizingInt</code>/<code>IntSummaryStatistics</code>。还有对应的 long 和 double 类型的函数</li><li>连接字符串：<code>joining</code></li><li>广义的归约汇总：<code>Collectors.reducing(起始值，映射方法，二元结合)</code>/<code>Collectors.reducing(二元结合)</code>。<code>Collectors.reducing</code> 工厂方法是所有上述特殊情况的一般化。</li></ul><p><code>collect vs. reduce</code>，两者都是 <code>Stream</code> 接口的方法，区别在于：</p><ul><li>语意问题<ul><li>reduce 方法旨在把两个值结合起来生成一个新值，是不可变的归约；</li><li>collect 方法设计就是要改变容器，从而累积要输出的结果</li></ul></li><li>实际问题<ul><li>以错误的语义使用 reduce 会导致归约过程不能并行工作</li></ul></li></ul><p>分组和分区</p><ul><li>分组：<code>Collectors.groupingBy</code><ul><li>多级分组</li><li>按子数组收集数据: <code>maxBy</code><ul><li>把收集器的结果转换为另一种结果 <code>collectingAndThen</code></li><li>与 groupingBy 联合使用的其他收集器例子：<code>summingInt</code>,<code>mapping</code></li></ul></li></ul></li><li>分区：是分组的特殊情况，由一个谓词作为分类函数(分区函数)</li></ul><p>收集器接口：Collector，部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">A</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Supplier&lt;A&gt; <span class="title">supplier</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BiConsumer&lt;A, T&gt; <span class="title">accumulator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Function&lt;A, R&gt; <span class="title">finisher</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BinaryOperator&lt;A&gt; <span class="title">combiner</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 T、A、R 分别是流中元素的类型、用于累积部分结果的对象类型，以及  collect 操作最终结果的类型。</p><ul><li>建立新的结果容器：<code>supplier</code> 方法</li><li>将元素添加到结果容器：<code>accumulator</code> 方法，累加器是原位更新</li><li>对结果容器应用最终转换： <code>finisher</code> 方法</li><li>合并两个结果容器：<code>combiner</code> 方法</li><li>定义收集器的行为： <code>characteristics</code> 方法，Characteristics 包含 <code>UNORDERED</code>,<code>CONCURRENT</code>,<code>IDENTITY_FINISH</code></li></ul><p>前三个方法已经足以对流进行顺序归约，实践中实现会复杂点，一是因为流的延迟性质，二是理论上可能要进行并行归约。</p><p><code>Collectors.toList</code> 的源码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CollectorImpl&lt;&gt;(</span><br><span class="line">            (Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class="keyword">new</span>,</span><br><span class="line">            List::add,</span><br><span class="line">            (left, right) -&gt; &#123; left.addAll(right); <span class="keyword">return</span> left; &#125;,</span><br><span class="line">            CH_ID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// static final Set&lt;Collector.Characteristics&gt; CH_ID = Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));</span></span><br></pre></td></tr></table></figure><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。</p><p>关于并行流的几点说明：</p><ul><li>选择适当的数据结构往往比并行化算法更重要，比如避免拆箱装箱的开销，使用便于拆分的方法而非 iterate。</li><li>同时，要保证在内核中并行执行工作的时间比在内核之间传输数据的时间长。</li><li>使用并行流时要注意避免共享可变状态。</li><li>并行流背后使用的基础架构是 Java 7 中引入的分支/合并框架。</li></ul><p>分支/合并框架</p><p>分支/合并框架的目的是以递归的方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。</p><ul><li><code>RecursiveTast&lt;R&gt;</code> 有一个抽象方法 compute，该方法同时定义了：<ul><li>将任务拆分成子任务的逻辑</li><li>无法/不方便再拆分时，生成单个子任务结果的逻辑</li></ul></li><li>对任务调用 fork 方法可以把它排进 ForkJoinPool，同时对左边和右边的子任务调用 fork 的效率要比直接对其中一个调用 compute 低，因为可以其中一个子任务可以重用同一线程，减少开销</li></ul><p>工作窃取：用于池中的工作线程之间重新分配和平衡任务。</p><p>Spliterator 代表“可分迭代器”，用于遍历数据源中的元素。可以延迟绑定。</p><h2 id="高效-Java-8-编程"><a href="#高效-Java-8-编程" class="headerlink" title="高效 Java 8 编程"></a>高效 Java 8 编程</h2><h3 id="重构、测试、调试"><a href="#重构、测试、调试" class="headerlink" title="重构、测试、调试"></a>重构、测试、调试</h3><ul><li>改善代码的可读性<ul><li>用 Lambda 表达式取代匿名类</li><li>用方法引用重构 Lambda 表达式</li><li>用 Stream API 重构命令式的数据处理</li></ul></li><li>增加代码的灵活性<ul><li>采用函数接口<ul><li>有条件的延迟执行</li><li>环绕执行</li></ul></li></ul></li></ul><p>使用 Lambda 重构面向对象的设计模式：</p><ul><li>策略模式<ul><li>一个代表某个算法的接口</li><li>一个或多个该接口的具体实现，它们代表的算法的多种实现</li><li>一个或多个使用策略对象的客户</li></ul></li><li>模版方法<ul><li>传统：继承抽象类，实现抽象方法</li><li>Lambda：添加一个参数，直接插入不同的行为，无需继承</li></ul></li><li>观察者模式<ul><li>执行逻辑较简单时，可以用 Lambda 表达式代替类</li></ul></li><li>责任链模式</li><li>工厂模式<ul><li>传统：switch case 或者 反射</li><li>Lambda：创建一个 Map，将名称映射到对应的构造函数</li></ul></li></ul><p>调试的方法：</p><ul><li>查看栈跟踪：无论 Lambda 表达式还是方法引用，都无法显示方法名，较难调试</li><li>输出日志：<code>peek</code> 方法，设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作</li></ul><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>Java 8 中的接口现在支持在声明方法的同时提供实现，通过以下两种方式可以完成：</p><ol><li>Java 8 允许在接口内声明 静态方法</li><li>Java 8 引入了一个新功能：默认方法</li></ol><p>默认方法的引入就是为了以兼容的方式解决像 Java API 这样的类库的演进问题的。它让类可以自动地继承接口的一个默认实现。</p><p>向接口添加新方法是 <strong>二进制兼容</strong> 的，即如果不重新编译该类，即使不实现新的方法，现有类的实现依旧可以运行。默认方法 是一种以 <strong>源码兼容</strong> 方式向接口内添加实现的方法。</p><p>抽象类和抽象接口的区别：</p><ul><li>一个类只能继承一个抽象类，但一个类可以实现多个接口</li><li>一个抽象类可以通过实例变量保存一个通用状态，而接口不能有实例变量</li></ul><p>默认方法的两种用例：</p><ul><li>可选方法：提供默认实现，减少空方法等无效的模版代码</li><li>行为的多继承<ul><li>类型的多继承</li><li>利用正交方法的精简接口</li><li>组合接口</li></ul></li></ul><p>如果一个类使用相同的函数签名从多个地方继承了方法，解决冲突的三条规则：</p><ol><li><strong>类</strong>中的方法优先级最高</li><li>若 1 无法判断，那么子接口的优先级更高，即优先选择拥有最具体实现的默认方法的接口</li><li>若 2 还无法判断，那么继承了多个接口的类必须通过显示覆盖和调用期望的方法，显示地选择使用哪一个默认方法的实现。</li></ol><h3 id="Optional-取代-null"><a href="#Optional-取代-null" class="headerlink" title="Optional 取代 null"></a>Optional 取代 null</h3><p>null 的问题：</p><ul><li>错误之源：NullPointerException 问题</li><li>代码膨胀：各种 null 检查</li><li>自身无意义</li><li>破坏了 Java 的哲学: null 指针</li><li>在 Java 类型系统上开了个口子：null 不属于任何类型</li></ul><p><code>java.util.Optional&lt;T&gt;</code> 对可能缺失的值建模,引入的目的并非是要消除每一个 null 引用，而是帮助你更好地设计出普适的 API。</p><p>创建 Optional 对象,三个静态工厂方法：</p><ul><li><code>Optional.empty</code>：创建空的 Optional 对象</li><li><code>Optional.of</code>：依据非空值创建 Optional 对象，若传空值会抛 NPE</li><li><code>Optianal.ofNullable</code>：创建 Optional 对象，允许传空值</li></ul><p>使用 map 从 Optional 对象提取和转换值,Optional 的 map 方法：</p><ul><li>若 Optional 包含值，将该值作为参数传递给 map，对该值进行转换后包装成 Optional</li><li>若 Optional 为空，什么也不做，即返回 Optional.empty</li></ul><p>使用 flatMap 链接 Optional 对象：</p><p>由于 Optional 的 map 方法会将转换结果生成 Optional，对于返回值已经为 Optional 的，就会出现 <code>Optional&lt;Optional&lt;T&gt;&gt;</code> 的情况。类比 Stream API 的 flatMap，Optional 的 flapMap 可以将两层的 Optional 对象转换为单一的 Optional 对象。</p><p><strong>简单来说，返回值是 <code>T</code> 的，就用 map 方法；返回值是 <code>Optional&lt;T&gt;</code> 的，就用 flatMap 方法。这样可以使映射完返回的结果均为  <code>Optional&lt;T&gt;</code></strong></p><ul><li>参数为 null 时，会由 <code>Objects.requireNonNull</code> 抛出  NPE；参数为空的 Optional 对象时，返回 <code>Optional.empty</code></li><li>参数非 null/空的 Optional 对象时，map 返回 Optional；flatMap 返回对象本身</li></ul><p>原因可以参考这两个方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，Optional 类设计的初衷仅仅是要支持能返回 Optional 对象的方法。设计时并未考虑将其作为类的字段，所以并未实现 <code>Serializable</code> 接口。</p><p>默认行为及解引用 Optional 对象：</p><ul><li><code>get()</code>: 返回封装的变量值，或者抛出 <code>NoSuchElementException</code></li><li><code>orElse(T other)</code>: 提供默认值</li><li><code>orElseGet(Supplier&lt;? extends T&gt; other)</code>: <code>orElse</code> 方法的延迟调用版</li><li><code>orElseThrow(Supplier&lt;&gt; extends X&gt; exceptionSupplier)</code>: 类似 <code>get</code>，但可以定制希望抛出的异常类型</li><li><code>ifPresent(Consumer&lt;? super T&gt;)</code>: 变量存在时可以执行一个方法</li></ul><h3 id="CompletableFuture-组合式异步编程"><a href="#CompletableFuture-组合式异步编程" class="headerlink" title="CompletableFuture:组合式异步编程"></a>CompletableFuture:组合式异步编程</h3><p>Future 接口有一定的局限性。CompletableFuture 和 Future 的关系就跟 Stream 和 Collection 的关系一样。</p><p>同步 API 与 异步 API</p><ul><li>同步 API：调用方需要等待被调用方结束运行，即使两者是在不同的线程中运行</li><li>异步 API：直接返回，被调用方完成之前是将任务交给另一个线程去做，该线程和调用方是异步的，返回方式有如下两种：<ul><li>要么通过回调函数</li><li>要么由调用方再执行一个“等待，直到计算完成”的方法调用</li></ul></li></ul><p>使用工厂方法 supplyAsync 创建 CompletableFuture 比较方便，该方法会抛出 CompletableFuture 内发生问题的异常。</p><p>代码的阻塞问题的解决方案及如何选择：</p><ul><li>使用并行流对请求进行并行操作：适用于计算密集型的操作，且没有 I/O ，此时推荐使用 Stream 接口</li><li>使用 CompletableFuture 发起异步请求(可以使用定制的执行器)：若涉及等待 I/O 的操作，使用 CompletableFuture 灵活性更好</li></ul><p><em>注意，CompletableFuture 类中的 join 方法和 Future 接口中的 get 有相同的含义，join 不抛出检测异常。另外，需要使用两个不同的 Stream 流水线而不是同一个，来避免 Stream的延迟特性引起顺序执行</em></p><p>构造同步和异步操作：</p><ul><li><code>thenApply</code> 方法不会阻塞代码的执行</li><li><code>thenCompose</code> 方法允许你对两个异步操作进行流水线，第一个操作完成时，将其结果作为参数传递给第二个操作</li><li><code>thenCombine</code> 方法将两个完全不相干的 CompletableFuture 对象的结果整合起来</li></ul><p>调用 get 或者 join 方法只会造成阻塞，响应 CompletableFuture 的 completion 事件可以实现等所有数据都完备之后再呈现。<code>thenAccept</code> 方法在每个 CompletableFuture 上注册一个操作，该操作会在 CompletableFuture 完成执行后使用它的返回值，即 <code>thenAccept</code> 定义了如何处理 CompletableFuture 返回的结果，一旦 CompletableFuture 计算得到结果，它就返回一个 <code>CompletableFuture&lt;Void&gt;</code>。</p><h3 id="新的时间和日期-API"><a href="#新的时间和日期-API" class="headerlink" title="新的时间和日期 API"></a>新的时间和日期 API</h3><p>原来的 <code>java.util.Date</code> 类的缺陷：</p><ul><li>这个类无法表示日期，只能以毫秒的精度表示时间</li><li>易用性差：年份起始 1900 年，月份从 0 起始</li><li>toString 方法误导人：其实并不支持时区</li></ul><p>相关类同样缺陷很多：</p><ul><li><code>java.util.Calender</code> 类月份依旧从 0 起始</li><li>同时存在 <code>java.util.Date</code> 和 <code>java.util.Calender</code>，徒添困惑</li><li>有的特性只在某一个类提供，如 <code>DateFormat</code> 方法</li><li><code>DateFormat</code> 不是线程安全的</li><li><code>java.util.Date</code> 和 <code>java.util.Calender</code> 都是可变的</li></ul><p>一些新的 API（<code>java.time</code> 包）</p><ul><li><code>LocalDate</code>: 该类实例是一个<strong>不可变对象</strong>，只提供简单的日期，<strong>并不含当天的时间信息</strong>，也不附带任何和时区相关的信息</li><li><code>LocalTime</code>: 时间(时、分、秒)</li><li><code>LocalDateTime</code>: 是 <code>LocalDate</code> 和 <code>LocalTime</code> 的合体，不含时区信息</li><li><code>Instant</code>: 机器的日期和时间则使用 <code>java.time.Instant</code> 类对时间建模，以 Unix 元年时间开始所经历的秒数进行计算</li><li><code>Temporal</code>: 上面四个类都实现了该接口，该接口定义了如何读取和操纵为时间建模的对象的值</li><li><code>Duration</code>: 创建两个 Temporal 对象之间的 duration。<code>LocalDateTime</code> 和 <code>Instant</code> 是为不同目的设计的，不能混用，且不能传递 <code>LocalDate</code> 当参数。</li><li><code>Period</code>: 得到两个 <code>LocalDate</code> 之间的时长</li></ul><p><code>LocalDate</code>，<code>LocalTime</code>，<code>LocalDateTime</code> 三个类的实例创建都有三种工厂方法：<code>of</code>,<code>parse</code>,<code>now</code></p><p><code>Duration</code>，<code>Period</code> 有很多工厂方法：<code>between</code>,<code>of</code>,还有 ofArribute 之类的</p><p>以上日期－时间对象都是不可修改的，这是为了更好地支持函数式编程，确保线程安全</p><p>操纵时间：</p><ul><li><code>withArribute</code> 创建一个对象的副本，并按照需要修改它的属性。更一般地，<code>with</code> 方法。但注意，<strong>该方法并不是修改原值，而是返回一个新的实例</strong>。类似的方法还有 <code>plus</code>,<code>minus</code> 等</li><li>使用 <code>TemporalAdjuster</code> 接口: 用于定制化处理日期，函数式接口，只含一个方法 <code>adjustInto</code></li><li><code>TemporalAdjusters</code>: 对应的工具类，有很多自带的工厂方法。（如果想用 Lamda 表达式定义 TemporalAdjuster 对象，推荐使用 TemporalAdjusters 类的静态工厂方法 <code>ofDateAdjuster</code>）</li></ul><p>打印输出及解析日期－时间对象：主要是 <code>java.time.format</code> 包，最重要的类是 <code>DateTimeFormatter</code> 类，所有该类的实例都是 <strong>线程安全</strong> 的，所以可以单例格式创建格式器实例。</p><p>处理不同的时区和历法使用 <code>java.time.ZoneId</code> 类，该类无法修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// ZoneDateTime 的组成部分</span><br><span class="line">ZonedDateTime = LocalDateTime + ZoneId</span><br><span class="line">              = (LocalDate + LocalTime) + ZoneId</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要对 Java 8 新特性中的 Lambda 表达式、Stream API、流(Stream API)、默认方法、Optional、组合式异步编程、新的时间 API，等方面进行了简单的介绍和罗列，至于更泛化的概念，譬如函数式编程、Java 语言以外的东西没有介绍。当然，很多细节和设计思想还需要进一步阅读官方文档/源码，在实战中去体会和运用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://book.douban.com/subject/26772632/" target="_blank" rel="noopener">《Java 8 in Action》(中文版)</a>／<a href="https://book.douban.com/subject/25912747/" target="_blank" rel="noopener">(英文版)</a></li><li><a href="http://www.infoq.com/cn/articles/java8-new-features-new-stream-api" target="_blank" rel="noopener">Java 8新特性：全新的Stream API</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="noopener">Java 8 中的 Streams API 详解</a></li></ul></blockquote><p>另外附上 lucida 的几篇译文：</p><blockquote><ul><li><a href="http://lucida.me/blog/java-8-lambdas-insideout-language-features/" target="_blank" rel="noopener">深入理解Java 8 Lambda（语言篇——lambda，方法引用，目标类型和默认方法）</a></li><li><a href="http://lucida.me/blog/java-8-lambdas-inside-out-library-features/" target="_blank" rel="noopener">深入理解Java 8 Lambda（类库篇——Streams API，Collectors和并行）</a></li><li>深入理解 Java 8 Lambda（原理篇——Java 编译器如何处理 lambda）暂时还没</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 Java 8 的新特性，包括 Lambda 表达式、方法引用、流(Stream API)、默认方法、Optional、组合式异步编程、新的时间 API，等等各个方面。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://brianway.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大型网站技术架构-入门梳理</title>
    <link href="https://brianway.github.io/2017/01/18/reading-note-architecture-design/"/>
    <id>https://brianway.github.io/2017/01/18/reading-note-architecture-design/</id>
    <published>2017-01-18T05:44:07.000Z</published>
    <updated>2019-04-07T16:16:59.904Z</updated>
    
    <content type="html"><![CDATA[<p>罗列了大型网站架构涉及到的概念，附上了简单说明</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本文是对《大型网站架构设计》(李智慧 著)一书的梳理，类似文字版的“思维导图”</li><li>全文主要围绕“性能，可用性，伸缩性，扩展性，安全”这五个要素</li><li>性能，可用性，伸缩性这几个要素基本都涉及到应用服务器，缓存服务器，存储服务器这几个方面</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>三个纬度：演化、模式、要素</li><li>五个要素： 性能，可用性，伸缩性，扩展性，安全</li></ul><h3 id="演化历程"><a href="#演化历程" class="headerlink" title="演化历程"></a>演化历程</h3><p>图例可参考 <a href="http://www.hollischuang.com/archives/728" target="_blank" rel="noopener">大型网站架构演化历程</a>：</p><ol><li><strong>初始阶段的网站架构</strong>：一台服务器，上面同时拥有应用程序，数据库，文件，等所有资源。例如 LAMP 架构</li><li><strong>应用和数据服务分离</strong>：三台服务器（硬件资源各不相同），分别是应用服务器，文件服务器和数据库服务器</li><li><strong>使用缓存改善网站性能</strong>：分为两种，缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器的远程缓存</li><li><strong>使用应用服务器集群改善网站并发处理能力</strong>：通过负载均衡调度服务器来将访问请求分发到应用服务器集群中的任何一台机器</li><li><strong>数据库读写分离</strong>：数据库采用主从热备，应用服务器在写数据时访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库。应用服务器使用专门的数据访问模块从而对应用透明</li><li><strong>使用反向代理和 CDN 加速网站响应</strong>：这两者基本原理都是缓存。反向代理部署在网站的中心机房，CDN 部署在网络提供商的机房</li><li><strong>使用分布式文件系统和分布式数据库系统</strong>：数据库拆分的最后手段，更常用的是业务分库</li><li><strong>使用 NoSQL 和搜索引擎</strong>：对可伸缩的分布式有更好的支持</li><li><strong>业务拆分</strong>：将整个网站业务拆分成不同的应用，每个应用独立部署维护，应用之间通过超链接建立联系/消息队列进行数据分发/访问同一数据存储系统</li><li><strong>分布式服务</strong>：公共业务提取出来独立部署</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1.png" alt="架构演化-分布式服务" title>                </div>                <div class="image-caption">架构演化-分布式服务</div>            </figure><p>演化的价值观</p><ul><li>大型网站架构的核心价值是随网站所需灵活应对</li><li>驱动大型网站技术发展的主要力量是网站的业务发展</li></ul><p>误区</p><ul><li>一味追随大公司的解决方案</li><li>为了技术而技术</li><li>企图用技术解决所有问题</li></ul><h3 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h3><p>模式的关键在于模式的可重复性</p><ul><li><strong>分层</strong>：横向切分</li><li><strong>分割</strong>：纵向切分</li><li><strong>分布式</strong>：分层和分割的主要目的是为了切分后的模块便于分布式部署。常用方案：<ul><li>分布式应用和服务</li><li>分布式静态资源</li><li>分布式数据和存储</li><li>分布式计算</li><li>分布式配置，分布式锁，分布式文件，等等</li></ul></li><li><strong>集群</strong>：多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务</li><li><strong>缓存</strong>：将数据放距离计算最近的位置加快处理速度，改善性能第一手段，可以加快访问速度，减小后端负载压力。使用缓存 <strong>两个前提条件</strong> ：1.数据访问热点不均衡；2.数据某时段内有效，不会很快过期<ul><li>CDN</li><li>反向代理</li><li>本地缓存</li><li>分布式缓存</li></ul></li><li><strong>异步</strong>：旨在系统解耦。异步架构是典型的消费者生产者模式，特性如下：<ul><li>提高系统可用性</li><li>加快网站访问速度</li><li>消除并发访问高峰</li></ul></li><li><strong>冗余</strong>：实现高可用。数据库的冷备份和热备份</li><li><strong>自动化</strong>：包括发布过程自动化，自动化代码管理，自动化测试，自动化安全检测，自动化部署，自动化监控，自动化报警，自动化失效转移，自动化失效恢复，自动化降级，自动化分配资源</li><li><strong>安全</strong>：密码，手机校验码，加密，验证码，过滤，风险控制</li></ul><h3 id="核心要素"><a href="#核心要素" class="headerlink" title="核心要素"></a>核心要素</h3><p>架构是“最高层次的规划，难以改变的规定”。主要关注五个要素：</p><ul><li>性能</li><li>可用性(Availability)</li><li>伸缩性(Scalability)</li><li>扩展性(Extensibility)</li><li>安全性</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>下面依次对这五个要素进行归纳</p><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>性能的测试指标主要有：</p><ul><li>响应时间：指应用执行一个操作需要的时间</li><li>并发数：指系统能够同时处理请求的数目</li><li>吞吐量：指单位时间内系统处理的请求数量</li><li>性能计数器：描述服务器或者操作系统性能的一些数据指标</li></ul><p>性能测试方法：</p><ul><li>性能测试</li><li>负载测试</li><li>压力测试</li><li>稳定性测试</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1_%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%9B%B2%E7%BA%BF.png" alt="性能测试曲线" title>                </div>                <div class="image-caption">性能测试曲线</div>            </figure><p>性能优化,根据网站分层架构，可以分为三大类：</p><ul><li><strong>Web 前端性能优化</strong><ul><li>浏览器访问优化<ul><li>减少 http 请求</li><li>使用浏览器缓存</li><li>启用压缩</li><li>CSS 放在页面最上面，JavaScript 放在页面最下面</li><li>减少 Cookie 传输</li></ul></li><li>CDN 加速：本质是一个缓存，一般缓存静态资源</li><li>反向代理<ul><li>保护网站安全</li><li>通过配置缓存功能加速 Web 请求</li><li>实现负载均衡</li></ul></li></ul></li><li><strong>应用服务器性能优化</strong>：主要手段有 缓存、集群、异步<ul><li>分布式缓存(<em>网站性能优化第一定律：优化考虑使用缓存优化性能</em>)</li><li>异步操作(<em>消息队列，削峰作用</em>)</li><li>使用集群</li><li>代码优化<ul><li>多线程(设计为无状态，使用局部对象，并发访问资源使用锁)</li><li>资源复用(单例，对象池)</li><li>数据结构</li><li>垃圾回收</li></ul></li></ul></li><li><strong>存储服务器性能优化</strong><ul><li>机械硬盘 vs. 固态硬盘</li><li>B+ 树 vs. LSM 树</li><li>RAID vs. HDFS</li></ul></li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ul><li>高可用的网站架构：目的是保证服务器硬件故障时服务依然可用、数据依然保存并能够被访问，主要手段数据和服务的冗余备份及失效转移</li><li>高可用的应用：显著特点是应用的无状态性<ul><li>通过负载均衡进行无状态服务的失效转移</li><li>应用服务器集群的 Session 管理<ul><li>Session 复制</li><li>Session 绑定</li><li>利用 Cookie 记录 Session</li><li>Session 服务器</li></ul></li></ul></li><li>高可用的服务：无状态的服务，可使用类似负载均衡的失效转移策略，此外还有如下策略<ul><li>分级管理</li><li>超时设置</li><li>异步调用</li><li>服务降级</li><li>幂等性设计</li></ul></li><li>高可用的数据：主要手段是数据备份和失效转移机制<ul><li>CAP 原理<ul><li>数据一致性(Consisitency)</li><li>数据可用性(Availibility)</li><li>分区耐受性(Partition Tolerance)</li></ul></li><li>数据备份<ul><li>冷备：缺点是不能保证数据最终一致和数据可用性</li><li>热备：分为异步热备和同步热备</li></ul></li><li>失效转移：由以下三部分组成<ul><li>失效确认</li><li>访问转移</li><li>数据恢复</li></ul></li></ul></li><li>高可用网站的软件质量保证<ul><li>网站发布</li><li>自动化测试</li><li>预发布验证</li><li>代码控制<ul><li>主干开发、分支发布</li><li>分支开发、主干发布</li></ul></li><li>自动化发布</li><li>灰度发布</li></ul></li><li>网站运行监控<ul><li>监控数据采集<ul><li>用户行为日志采集（服务器端和客户端）</li><li>服务器性能监控</li><li>运行数据报告</li></ul></li><li>监控管理<ul><li>警报系统</li><li>失效转移</li><li>自动优雅降级</li></ul></li></ul></li></ul><h3 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h3><p>大型网站的“大型”是指：</p><ul><li>用户层面：大量用户及大量访问</li><li>功能方面：功能庞杂，产品众多</li><li>技术层面：网站需要部署大量的服务器</li></ul><p>伸缩性的分为如下几个方面</p><ul><li>网站架构的伸缩性设计<ul><li>不同功能进行物理分离实现伸缩<ul><li>纵向分离(分层后分离)</li><li>横向分离(业务分割后分离)</li></ul></li><li>单一功能通过集群规模实现伸缩</li></ul></li><li>应用服务器集群的伸缩性设计<ul><li>HTTP 重定向负载均衡</li><li>DNS 域名解析负载均衡</li><li>反向代理负载均衡(在 HTTP 协议层面，应用层负载均衡)</li><li>IP 负载均衡(在内核进程完成数据分发)</li><li>数据链路层负载均衡(数据链路层修改 mac 地址，三角传输模式，LVS)</li><li>负载均衡算法<ul><li>轮询(Round Robin, RR)</li><li>加权轮询(Weighted Round Robin, WRR)</li><li>随机(Random)</li><li>最少链接(Least Connections)</li><li>源地址散列(Source Hashing)</li></ul></li></ul></li><li>分布式缓存集群的伸缩性设计<ul><li>Memcached 分布式缓存集群的访问模型<ul><li>Memcached 客户端（包括 API，路由算法，服务器列表，通信模块）</li><li>Memcached 服务器集群</li></ul></li><li>Memcached 分布式缓存集群的伸缩性挑战</li><li>分布式缓存的一致性 Hash 算法(一致性 Hash 环，虚拟层)</li></ul></li><li>数据存储服务集群的伸缩性设计<ul><li>关系数据库集群的伸缩性设计</li><li>NoSQL 数据库的伸缩性设计</li></ul></li></ul><h3 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h3><p>系统架构设计层面的“开闭原则”</p><ul><li>构建可扩展的网站架构</li><li>利用分布式消息队列降低耦合性<ul><li>事件驱动架构(Event Driven Architecture)</li><li>分布式消息队列</li></ul></li><li>利用分布式服务打造可复用的业务平台<ul><li>Web Service 与企业级分布式服务</li><li>大型网站分布式服务的特点</li><li>分布式服务框架设计(Thrift, Dubbo)</li></ul></li><li>可扩展的数据结构(如 ColumnFamily 设计)</li><li>利用开放平台建设网站生态圈</li></ul><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>XSS 攻击和 SQL 注入攻击是构成网站应用攻击最主要的两种手段，此外还包括 CSRF,Session 劫持等手段。</p><ul><li>攻击与防御<ul><li>XSS 攻击：跨站点脚本攻击（Cross Site Script）<ul><li>反射型</li><li>持久型</li></ul></li><li>XSS 防御手段<ul><li>消毒(即对某些 html 危险字符转义)</li><li>HttpOnly</li></ul></li><li>注入攻击<ul><li>SQL 注入攻击</li><li>OS 注入攻击</li></ul></li><li>注入防御<ul><li>避免被猜到数据库表结构信息</li><li>消毒</li><li>参数绑定</li></ul></li><li>CSRF 攻击：跨站点请求伪造（Cross Site  Request Forgery）</li><li>CSRF 防御：主要手段是识别请求者身份<ul><li>表单 Token</li><li>验证码</li><li>Referer Check</li></ul></li><li>其他攻击和漏洞<ul><li>Error Code</li><li>HTML 注释</li><li>文件上传</li><li>路径遍历</li></ul></li><li>Web 应用防火墙（ModSecurity）</li><li>网站安全漏洞扫描</li></ul></li><li>信息加密技术及密钥安全管理<ul><li>单向散列加密：不同输入长度的信息通过散列计算得到固定长度的输出<ul><li>不可逆，非明文</li><li>可加盐(salt)增加安全性</li><li>输入的微小变化会导致输出完全不同</li></ul></li><li>对称加密：加密和解密使用同一个密钥</li><li>非对称加密<ul><li>信息传输：公钥加密，私钥解密</li><li>数字签名：私钥加密，公钥解密</li></ul></li><li>密钥安全管理：信息安全传输是靠密钥保证的，改善手段有：<ul><li>把密钥和算法放在一个独立的服务器上</li><li>将加解密算法放在应用系统中，密钥放在独立服务器</li></ul></li></ul></li><li>信息过滤与反垃圾<ul><li>文本匹配</li><li>分类算法</li><li>黑名单</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗列了大型网站架构涉及到的概念，附上了简单说明&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="总结" scheme="https://brianway.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="读书笔记" scheme="https://brianway.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>爬取知乎60万用户信息之后的简单分析</title>
    <link href="https://brianway.github.io/2016/12/20/webporter-zhihu-user-analysis/"/>
    <id>https://brianway.github.io/2016/12/20/webporter-zhihu-user-analysis/</id>
    <published>2016-12-20T05:03:07.000Z</published>
    <updated>2019-04-07T16:16:59.918Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Java+Elasticsearch+Kibana 爬取了知乎 60 万用户数据，做了简单的可视化分析。</p><a id="more"></a><hr><p>项目源码 <a href="https://github.com/brianway/webporter" target="_blank" rel="noopener">GitHub - webporter</a></p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在知乎上看到有个叫 @路人甲 的大神每隔一段时间就爬爬豆瓣/B站等等网站，做了很多有意思的分析，加上之前因为实验室项目接触过 Nutch，浅尝辄止了，所以一直想好好玩玩爬虫。</p><p>网上 Python 的爬虫教程很多，而自己的主语言是 Java，本着宣传 Java，以练促学的目的，我使用 Java 爬取了知乎 60 万用户信息，主要想看看知乎上妹子多不多啊/是不是都是基佬啊，标配常青藤/年薪百万是不是真的啊，等等。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>为了保证数据的质量，避免爬到一些僵尸号什么的，我选择爬取关注列表而非粉丝列表。我随机挑选了一位粉丝过千的优秀回答者作为起始，爬取他的关注列表，再对列表中的每个人爬取其关注列表，以此类推……</p><p>下载了大概 7 个小时，爬了 40 多万用户的关注列表，拿到了 10G 的数据，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E4%B8%8B%E8%BD%BD%E7%9A%84%E7%9F%A5%E4%B9%8E%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E9%87%8F.png" alt="爬取10G数据" title>                </div>                <div class="image-caption">爬取10G数据</div>            </figure><p>理论上有 800 多万用户，可惜有很多重复的，去重后将数据导入 Elasticsearch，得到 60+ 万用户数据:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%9C%A8ES%E7%B4%A2%E5%BC%95%E7%8A%B6%E6%80%81.jpg" alt="ES索引" title>                </div>                <div class="image-caption">ES索引</div>            </figure><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p>接下来简单看看下载下来的数据靠不靠谱，随手在知乎和我的 Kibana 分别搜了下轮子哥 @vczh</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E6%90%9C%E7%B4%A2%E8%BD%AE%E5%AD%90%E5%93%A5.png" alt="搜索轮子哥" title>                </div>                <div class="image-caption">搜索轮子哥</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-kibana%E6%90%9C%E7%B4%A2%E8%BD%AE%E5%AD%90%E5%93%A5.png" alt="搜索轮子哥" title>                </div>                <div class="image-caption">搜索轮子哥</div>            </figure><p>可以看到，连同名的都搜出来是一样的，数据没啥问题。</p><h2 id="关心的数据"><a href="#关心的数据" class="headerlink" title="关心的数据"></a>关心的数据</h2><p>然后使用 Elastichearch 的聚合查询配合 Kibana 对数据进行可视化展示，我主要分析了下面几个问题：</p><ul><li>性别分布</li><li>粉丝最多的用户top10</li><li>员工最多的公司top10</li><li>校友最多的学校top10</li><li>人数最多的地方top10</li><li>top10行业分布</li><li>top10职业分布</li></ul><p><strong>图中涉及性别的， 1 表示男，0 表示女，-1 表示不男不女</strong></p><h3 id="性别分布"><a href="#性别分布" class="headerlink" title="性别分布"></a>性别分布</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E6%80%A7%E5%88%AB%E5%88%86%E5%B8%83.png" alt="性别分布" title>                </div>                <div class="image-caption">性别分布</div>            </figure><p>可以看到知乎男性人数过半了，比女性和未知性别加起来都多。</p><h3 id="粉丝最多的用户top10"><a href="#粉丝最多的用户top10" class="headerlink" title="粉丝最多的用户top10"></a>粉丝最多的用户top10</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E7%B2%89%E4%B8%9D%E6%9C%80%E5%A4%9A%E7%9A%84%E7%94%A8%E6%88%B7top10.png" alt="粉丝最多的用户top10" title>                </div>                <div class="image-caption">粉丝最多的用户top10</div>            </figure><p>粉丝数前 10 的依次是 @张佳玮，@李开复，@黄继新，@周源，@yolfilm，@张亮，@张小北，@李淼，@葛巾，@采铜。最多的 120 万粉丝，第十也过 60 万了。不过前十里好几个都是知乎员工，有黑幕的嫌疑吧？</p><h3 id="员工最多的公司top10"><a href="#员工最多的公司top10" class="headerlink" title="员工最多的公司top10"></a>员工最多的公司top10</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E5%91%98%E5%B7%A5%E6%9C%80%E5%A4%9A%E7%9A%84%E5%85%AC%E5%8F%B8top10.png" alt="员工最多的公司top10" title>                </div>                <div class="image-caption">员工最多的公司top10</div>            </figure><p>可以看到 BAT 全部上榜了（乱入了一个学生什么鬼？），仅接着是网易,华为,谷歌,微软,美团。都是牛逼哄哄的互联网相关企业，看来国企和实体企业比较低调，不在知乎填公司信息啊。</p><p>另外华为的男女比简直不能看啊，妹子那么少，想去华为的单身狗们需要好好考虑一下了。</p><h3 id="校友最多的学校top10"><a href="#校友最多的学校top10" class="headerlink" title="校友最多的学校top10"></a>校友最多的学校top10</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E6%A0%A1%E5%8F%8B%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%A6%E6%A0%A1top10.png" alt="校友最多的学校top10" title>                </div>                <div class="image-caption">校友最多的学校top10</div>            </figure><p>差强人意，校友人数排名前十的全特么是 985 啊，清北复交浙全部上榜，俨然中国大学排行榜。看来知乎标配不是常青藤，而是 985 嘛。另外可以看到，我科(倒数第三个)的男女比在这几个里面确实感人，难怪我现在还单身…</p><h3 id="人数最多的地方top10"><a href="#人数最多的地方top10" class="headerlink" title="人数最多的地方top10"></a>人数最多的地方top10</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-%E4%BA%BA%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%9C%B0%E6%96%B9top10.png" alt="人数最多的地方top10" title>                </div>                <div class="image-caption">人数最多的地方top10</div>            </figure><p>北京独领风骚，上海紧随其后。另外知乎居然把深圳和广州根据有没有“市”标记为了两个城市，简直坑爹，我也懒得二次处理了。综合来看，北上广深杭，主要集中在这五个城市，基本也是我国互联网企业分布最多的几个城市。</p><h3 id="top10行业分布"><a href="#top10行业分布" class="headerlink" title="top10行业分布"></a>top10行业分布</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-top10%E8%A1%8C%E4%B8%9A%E5%88%86%E5%B8%83.png" alt="top10行业分布" title>                </div>                <div class="image-caption">top10行业分布</div>            </figure><p>可以看到，互联网和计算机软件两个加起来就占了半数以上，要是算上电子商务和电子游戏等基本是程序员的天下了，所以知乎上程序员偏多，IT 从业者占主流啊。</p><p>另外互联网的男女比大概 2:1 的样子吧，法律，信息传媒和创意艺术的男女比比较均衡，大概五五开。</p><h3 id="top10职业分布"><a href="#top10职业分布" class="headerlink" title="top10职业分布"></a>top10职业分布</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/webporter_%E7%9F%A5%E4%B9%8E-top10%E8%81%8C%E4%B8%9A%E5%88%86%E5%B8%83.png" alt="top10职业分布" title>                </div>                <div class="image-caption">top10职业分布</div>            </figure><p>将近四分之一是产品经理，创始人和 CEO 也不少，比工程师还多，学生也占一定比例。另外除了运营和编辑的男女比差不多，其它都是男多女少啊。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从这 60 万用户数据可以看出，知乎的主要群体是程序员和学生，平均学历 985 不是黑，是真的！虽然知乎用户远不止 60 万，这些数据分析出来的结果可能有些偏差，但应该也能说明一些问题吧。</p><p>最后按照国际惯例，附上源码链接[GitHub - webporter]: <a href="https://github.com/brianway/webporter" target="_blank" rel="noopener">https://github.com/brianway/webporter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Java+Elasticsearch+Kibana 爬取了知乎 60 万用户数据，做了简单的可视化分析。&lt;/p&gt;
    
    </summary>
    
      <category term="project" scheme="https://brianway.github.io/categories/project/"/>
    
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="https://brianway.github.io/tags/Kibana/"/>
    
      <category term="webporter" scheme="https://brianway.github.io/tags/webporter/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 5.0-配置检查</title>
    <link href="https://brianway.github.io/2016/12/13/elasticsearch-bootstrap-checks/"/>
    <id>https://brianway.github.io/2016/12/13/elasticsearch-bootstrap-checks/</id>
    <published>2016-12-13T05:48:07.000Z</published>
    <updated>2019-04-07T16:16:59.895Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 Elasticsearch 5.0 系列博文的配置检查篇,主要介绍 Elasticsearch 的 Bootstrap Checks</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文以 Elasticsearch 5.0.1 版本为例进行讲解,不定期更新</li><li>该系列主要参考的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/index.html" target="_blank" rel="noopener">Elasticsearch Reference: 5.0</a>，尽量避免照搬翻译，只摘录精要部分辅以简单说明</li><li>写这个系列博客的初衷是强迫自己梳理，同时方便一些较忙/没空耐心看英文文档的朋友快速上手，建议读者有空多读官方文档，毕竟别人写的都是二手资料</li><li>如需查看 ES 系列更多博文，请关注我的个人网站<a href="http://brianway.github.io/">@brianway</a> 或者  <a href="http://blog.csdn.net/h3243212/" target="_blank" rel="noopener">@CSDN</a></li></ul><h2 id="为什么有-Bootstrap-Checks"><a href="#为什么有-Bootstrap-Checks" class="headerlink" title="为什么有 Bootstrap Checks"></a>为什么有 Bootstrap Checks</h2><p><code>Bootstrap Checks</code> 是 Elasticsearch 5.0 新加入的，在之前的 2.x 版本是没有的。之前的版本中，错误的配置会被当成 warning 记录到日志中，但这些信息往往被用户忽视。为了保证一些重要的配置得到应有的重视，Elasticsearch 会在启动时进行 <code>Bootstrap Checks</code> .</p><p><code>Bootstrap Checks</code> 会检查很多 Elasticsearch 和系统的配置。在<strong>开发模式</strong>下，所有没通过的检查都会报 warnings 并写进日志文件，即使检查没通过，依然可以启动节点运行 Elasticsearch；而在<strong>生产模式</strong>下，任何没通过的 <code>Bootstrap Checks</code> 都会报异常并阻止 Elasticsearch 启动。</p><h2 id="开发模式-vs-生产模式"><a href="#开发模式-vs-生产模式" class="headerlink" title="开发模式 vs. 生产模式"></a>开发模式 vs. 生产模式</h2><p>Elasticsearch 的 HTTP 默认绑定到<code>localhost</code>，并且 transport 使用内部通信，适用于日常开发；而组成集群时，由于每个 ES 实例要可达，故 transport 必须绑定到外部接口。</p><p>一般 Elasticsearch 默认你是在开发模式下工作；一旦配置了诸如<code>network.host</code>的网络配置项，Elasticsearch会认为你处于生产环境。这是避免服务器因不良配置造成数据丢失的重要安全措施。</p><p>另外，HTTP 和 transport 可以分别通过 <code>http.host</code> 和 <code>transport.host</code>进行配置，所以配置单点实例可达时，可以用 HTTP 进行测试而无需触发生产模式。</p><h2 id="Bootstrap-Checks"><a href="#Bootstrap-Checks" class="headerlink" title="Bootstrap Checks"></a>Bootstrap Checks</h2><p>有很多检查项，以 <code>Heap size check</code>为例子，由于 Elasticsearch 是使用 Java 写的，程序在 JVM 上运行，而 JVM 的堆大小是可以配置的。如果 JVM 的起始堆大小不等于最大堆大小，那么在堆 resize 的时候很容易造成系统停滞，为了避免这种<code>resize pauses</code>,一开始就应将两者设置成相等。</p><p>类似的检查还有很多，大部分是针对 JVM 配置项的检查，有些检查项只在 Linux 系统上会检查，有些在所有平台都会检查。这里只列举出检查项，不作进一步说明了，具体每一项说明可参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/bootstrap-checks.html" target="_blank" rel="noopener">Bootstrap Checks</a></p><ul><li>Heap size check</li><li>File descriptor check</li><li>Memory lock check</li><li>Maximum number of threads check</li><li>Maximum size virtual memory check</li><li>Maximum map count check</li><li>Client JVM check</li><li>Use serial collector check</li><li>OnError and OnOutOfMemoryError checks</li></ul><h2 id="重要的系统配置"><a href="#重要的系统配置" class="headerlink" title="重要的系统配置"></a>重要的系统配置</h2><p>从上节可知，很多<code>Bootstrap Checks</code>涉及到系统配置，我们需要对系统进行一些配置来使 Elasticsearch 可以获取更多的资源。</p><p>一般必须配置以下几条设置：</p><ul><li>Set JVM heap size</li><li>Disable swapping</li><li>Increase file descriptors</li><li>Ensure sufficient virtual memory</li><li>Ensure sufficient threads</li></ul><p>在哪里配置系统设置取决于你使用的安装包以及你使用的操作系统，具体的配置方法见 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/setting-system-settings.html" target="_blank" rel="noopener">Configuring system settings</a></p><p>JVM 参数建议通过 <code>jvm.options</code> 配置文件进行配置，当然，也可以通过 <code>ES_JAVA_OPTS</code> 环境变量来配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 Elasticsearch 5.0 系列博文的配置检查篇,主要介绍 Elasticsearch 的 Bootstrap Checks&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 5.0-简单查询</title>
    <link href="https://brianway.github.io/2016/12/13/elasticsearch-simple-query/"/>
    <id>https://brianway.github.io/2016/12/13/elasticsearch-simple-query/</id>
    <published>2016-12-13T05:45:07.000Z</published>
    <updated>2019-04-07T16:16:59.934Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 Elasticsearch 5.0 系列博文的简单查询篇,主要介绍如何使用 Elasticsearch 进行简单查询</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文以 Elasticsearch 5.0.1 版本为例进行讲解,不定期更新</li><li>该系列主要参考的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/index.html" target="_blank" rel="noopener">Elasticsearch Reference: 5.0</a>，尽量避免照搬翻译，只摘录精要部分辅以简单说明</li><li>写这个系列博客的初衷是强迫自己梳理，同时方便一些较忙/没空耐心看英文文档的朋友快速上手，建议读者有空多读官方文档，毕竟别人写的都是二手资料</li><li>如需查看 ES 系列更多博文，请关注我的个人网站<a href="http://brianway.github.io/">@brianway</a> 或者  <a href="http://blog.csdn.net/h3243212/" target="_blank" rel="noopener">@CSDN</a></li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>随机 json 数据生成网站 <a href="www.json-generator.com/"><code>www.json-generator.com</code></a></p><p>可以从官网下载数据 <a href="https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">accounts.json</a>，然后使用  <code>_bulk api</code> 建立索引即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json</span><br><span class="line">curl -XPOST 'localhost:9200/bank/account/_bulk?pretty&amp;refresh' --data-binary "@accounts.json"</span><br><span class="line">curl 'localhost:9200/_cat/indices?v'</span><br></pre></td></tr></table></figure><h2 id="查询API"><a href="#查询API" class="headerlink" title="查询API"></a>查询API</h2><p>两种执行 search 的方式：</p><ul><li>通过 <code>REST request URI</code> 发送查询参数</li><li>通过 <code>REST request body</code>发送查询参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># returns all documents in the bank index</span><br><span class="line">GET /bank/_search?q=*&amp;sort=account_number:asc</span><br><span class="line"></span><br><span class="line"># using the alternative request body method</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回数据(部分省略)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 6,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1000,</span><br><span class="line">    &quot;max_score&quot;: null,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;account&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;_score&quot;: null,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;account_number&quot;: 0,</span><br><span class="line">          &quot;balance&quot;: 16623,</span><br><span class="line">          &quot;firstname&quot;: &quot;Bradshaw&quot;,</span><br><span class="line">          &quot;lastname&quot;: &quot;Mckenzie&quot;,</span><br><span class="line">          &quot;age&quot;: 29,</span><br><span class="line">          &quot;gender&quot;: &quot;F&quot;,</span><br><span class="line">          &quot;address&quot;: &quot;244 Columbus Place&quot;,</span><br><span class="line">          &quot;employer&quot;: &quot;Euron&quot;,</span><br><span class="line">          &quot;email&quot;: &quot;bradshawmckenzie@euron.com&quot;,</span><br><span class="line">          &quot;city&quot;: &quot;Hobucken&quot;,</span><br><span class="line">          &quot;state&quot;: &quot;CO&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          0</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个字段的含义根据字段名即可看出来，不赘述。其中：</p><ul><li><code>took</code>的单位是毫秒</li><li><code>hits.hits</code>默认返回结果中的前十条记录</li></ul><p><strong>需要注意的是,一旦获得返回结果，Elasticsearch 就彻底完成了请求，且不保存任何服务端资源或者状态信息，这和 SQL 里一些先得到结果子集再通过状态信息(如游标)得到剩下结果集的情况不同</strong></p><h2 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h2><p>介绍几个简单的查询,<code>size</code> 未指定则默认是 10,<code>from</code> 参数默认从零开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># returns documents 11 through 20:</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;from&quot;: 10,</span><br><span class="line">  &quot;size&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># sorts the results by account balance in descending order and returns the top 10 (default size) documents</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: &#123; &quot;balance&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># return two fields, account_number and balance</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;account_number&quot;, &quot;balance&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># returns the account numbered 20</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;account_number&quot;: 20 &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多例子，如<code>must</code>,<code>should</code>,<code>bool</code> query 等等，请参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/_executing_searches.html" target="_blank" rel="noopener">Executing Searches</a></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>查询条件和文档的相关性用 <code>_score</code> 这个数值字段来表示，数值越高越相关。而有时我们不需要去计算相关性，只需要确定文档满不满足查询条件即可，这时可以用  <code>filter</code>(过滤器).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#  uses a bool query to return all accounts with balances between 20000 and 30000</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;balance&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 20000,</span><br><span class="line">            &quot;lte&quot;: 30000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，返回所有 balance 在 20000～30000 的文档，所有满足条件的文档的匹配程度都是“等价”的，没有谁更相关，所以计算分数是无意义且没必要的。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><code>aggregation</code>(聚合)能够对数据分组和提取统计信息，大致类似 SQL 中的 <code>group by</code> 和聚合函数。</p><p>Elasticsearch 能同时分别返回查询结果和聚合结果，从而避免多次查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 类似SQL中的 SELECT state, COUNT(*) FROM bank GROUP BY state ORDER BY COUNT(*) DESC</span><br><span class="line"></span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多聚合例子参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/_executing_aggregations.html" target="_blank" rel="noopener">Executing Aggregations</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 Elasticsearch 5.0 系列博文的简单查询篇,主要介绍如何使用 Elasticsearch 进行简单查询&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 5.0-基本操作</title>
    <link href="https://brianway.github.io/2016/12/13/elasticsearch-basic-operations/"/>
    <id>https://brianway.github.io/2016/12/13/elasticsearch-basic-operations/</id>
    <published>2016-12-13T05:42:07.000Z</published>
    <updated>2019-04-07T16:16:59.924Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 Elasticsearch 5.0 系列博文的基本操作篇,主要介绍 Elasticsearch 的 CRUD 操作</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文以 Elasticsearch 5.0.1 版本为例进行讲解,不定期更新</li><li>该系列主要参考的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/index.html" target="_blank" rel="noopener">Elasticsearch Reference: 5.0</a>，尽量避免照搬翻译，只摘录精要部分辅以简单说明</li><li>写这个系列博客的初衷是强迫自己梳理，同时方便一些较忙/没空耐心看英文文档的朋友快速上手，建议读者有空多读官方文档，毕竟别人写的都是二手资料</li><li>如需查看 ES 系列更多博文，请关注我的个人网站<a href="http://brianway.github.io/">@brianway</a> 或者  <a href="http://blog.csdn.net/h3243212/" target="_blank" rel="noopener">@CSDN</a></li></ul><h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><p>下面是在 <code>Console</code> 中输入的一些命令，可以依次运行看看结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Cluster Health</span><br><span class="line">GET _cat/health?v</span><br><span class="line">#  list of nodes</span><br><span class="line">GET /_cat/nodes?v</span><br><span class="line"></span><br><span class="line">#List All Indices</span><br><span class="line">GET /_cat/indices?v</span><br><span class="line"></span><br><span class="line"># Create an Index</span><br><span class="line">PUT /customer?pretty</span><br><span class="line">GET /_cat/indices?v</span><br><span class="line"># Index and Query a Document</span><br><span class="line">PUT /customer/external/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET /customer/external/1?pretty</span><br><span class="line">DELETE /customer/external/1</span><br><span class="line"></span><br><span class="line"># Delete an Index</span><br><span class="line">DELETE /customer?pretty</span><br></pre></td></tr></table></figure><p>可以看出Elasticsearch 的 REST API基本格式：</p><p><code>&lt;REST Verb&gt; /&lt;Index&gt;/&lt;Type&gt;/&lt;ID&gt;</code></p><h2 id="索引-替换文档"><a href="#索引-替换文档" class="headerlink" title="索引/替换文档"></a>索引/替换文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Indexing/Replacing Documents</span><br><span class="line">PUT /customer/external/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># using the POST verb instead of PUT since we didn’t specify an ID</span><br><span class="line">POST /customer/external?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Jane Doe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>PUT</code> 方法需要明确指定 ID,两次 PUT 的 id 相同则是替换之前的文档，第二次 id 不同则是创建新的文档</li><li>没明确指定 ID 则使用 <code>POST</code> 方法</li></ul><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Updating Documents</span><br><span class="line">POST /customer/external/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123; &quot;name&quot;: &quot;Jane Doe&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /customer/external/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123; &quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 20 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># uses a script to increment the age by 5</span><br><span class="line">POST /customer/external/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot; : &quot;ctx._source.age += 5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新文档其实就是先删除再建一个新的文档</p><blockquote><p>Whenever we do an update, Elasticsearch deletes the old document and then indexes a new document with the update applied to it in one shot</p></blockquote><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Deleting Documents</span><br><span class="line">DELETE /customer/external/2?pretty</span><br></pre></td></tr></table></figure><p>直接删除整个 index 要比删除 index 里的所有文档要更有效率</p><blockquote><p>It is worth noting that it is much more efficient to delete a whole index instead of deleting all documents with the Delete By Query API.</p></blockquote><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Batch Processing</span><br><span class="line">POST /customer/external/_bulk?pretty</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;John Doe&quot; &#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Jane Doe&quot; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /customer/external/_bulk?pretty</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;: &#123; &quot;name&quot;: &quot;John Doe becomes Jane Doe&quot; &#125; &#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>删除操作后面没有相应的文档数据，只提供要删除的 ID 即可</li><li>批处理对每个操作(action)按顺序依次执行(sequentially and in order)，如果单个操作出错，也会继续执行剩下的操作</li><li>批处理放回结果时，按照请求顺序为每个操作提供一个状态以便用户检查</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 Elasticsearch 5.0 系列博文的基本操作篇,主要介绍 Elasticsearch 的 CRUD 操作&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 5.0-基础概念</title>
    <link href="https://brianway.github.io/2016/12/13/elasticsearch-basic-concepts/"/>
    <id>https://brianway.github.io/2016/12/13/elasticsearch-basic-concepts/</id>
    <published>2016-12-13T05:40:07.000Z</published>
    <updated>2019-04-07T16:16:59.976Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 Elasticsearch 5.0 系列博文的基础概念篇，主要介绍集群，节点，索引，类型，文档，分片，副本等基础概念</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文以 Elasticsearch 5.0.1 版本为例进行讲解,不定期更新</li><li>该系列主要参考的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/index.html" target="_blank" rel="noopener">Elasticsearch Reference: 5.0</a>，尽量避免照搬翻译，只摘录精要部分辅以简单说明</li><li>写这个系列博客的初衷是强迫自己梳理，同时方便一些较忙/没空耐心看英文文档的朋友快速上手，建议读者有空多读官方文档，毕竟别人写的都是二手资料</li><li>如需查看 ES 系列更多博文，请关注我的个人网站<a href="http://brianway.github.io/">@brianway</a> 或者  <a href="http://blog.csdn.net/h3243212/" target="_blank" rel="noopener">@CSDN</a></li></ul><hr><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>有关概念在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html" target="_blank" rel="noopener">Basic Concepts</a>中已经介绍的很详细了，这里简单说一下。</p><ul><li>集群(cluster)：集群由一个或者多个节点组成，由名称唯一标识</li><li>节点(node)：一个单独的 Elasticsearch 实例</li><li>索引(index)：文档的集合</li><li>类型(type)：索引的逻辑分类/分区</li><li>文档(document)：能够被索引的信息基础单元</li><li>分片(shard)：索引的物理分区，是一个最小的 Lucene 索引单元。分为 primary shard(主分片) 和 replica shard(简称replicas)。</li><li>副本/备份(replicas)：主分片的备份</li></ul><p>下面就这几个概念进一步说明</p><h2 id="类比关系型数据库"><a href="#类比关系型数据库" class="headerlink" title="类比关系型数据库"></a>类比关系型数据库</h2><p>其中索引,类型,文档的概念可以类比关系型数据库</p><table><thead><tr><th style="text-align:left">Elasticsearch</th><th style="text-align:left">关系型数据库</th></tr></thead><tbody><tr><td style="text-align:left">索引(index)</td><td style="text-align:left">数据库(database)</td></tr><tr><td style="text-align:left">类型(type)</td><td style="text-align:left">表(table)</td></tr><tr><td style="text-align:left">文档(document)</td><td style="text-align:left">行记录(row)</td></tr><tr><td style="text-align:left">字段(field)</td><td style="text-align:left">列(column)</td></tr></tbody></table><h2 id="为什么有shard和replica"><a href="#为什么有shard和replica" class="headerlink" title="为什么有shard和replica"></a>为什么有shard和replica</h2><p>为什么有 shard?</p><ul><li>可以水平切分和扩展内容容量</li><li>在shards 间分发和并行执行操作，从而提供性能和吞吐量</li></ul><p>为什么有replica?</p><ul><li>当 shard 失效时提供高可用性。因为这个原因，一个primary shard的replica不会分配到和该shard所处的同一节点</li><li>扩展查询的容量/吞吐量，因为查询操作是一个读操作，可以在所有replica上并行执行</li></ul><h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><p>Elasticsearch 默认为每个 index 创建 5 个主分片，且备份数为 1。也就是说，每个索引由 5 个主分片组成，并且每个分片拥有一个备份。需要注意的是，主分片的数量一旦确定，之后是不能更改的（除非重新建立索引），而 replicas 的数量可以在之后随时更改。</p><p>所以在上一篇文章中，我们启动 Kibana 后在 <code>Consonle</code> 查询索引状态<code>GET /_cat/indices?v</code>，会发现 <code>health</code> 是 <code>yellow</code> 而不是 <code>green</code>，就是因为我们只开启了一个节点，而且 Kibana 启动后在 Elasticsearch 中建立了一个默认索引 <code>.kibana</code>，该索引只有 1 个主分片和一个副本，故 shard 都在该节点上，而 shard 的副本不能和该 shard 分配在同一节点，故未生效，从而导致状态是黄色。</p><p>另外，每个索引被分配到多个分片，但 <code>number_of_shards</code> 的值只适用于索引，而不是整个集群。这个值指定了每个索引的分片数，而非整个集群中的全部主分片数。（摘自<a href="https://qbox.io/blog/optimizing-elasticsearch-how-many-shards-per-index" target="_blank" rel="noopener">Optimizing Elasticsearch: How Many Shards per Index?</a>）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 Elasticsearch 5.0 系列博文的基础概念篇，主要介绍集群，节点，索引，类型，文档，分片，副本等基础概念&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 5.0-安装使用</title>
    <link href="https://brianway.github.io/2016/12/13/elasticsearch-installation/"/>
    <id>https://brianway.github.io/2016/12/13/elasticsearch-installation/</id>
    <published>2016-12-13T05:35:07.000Z</published>
    <updated>2019-04-07T16:16:59.970Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 Elasticsearch 5.0  系列博文的安装使用篇,主要介绍如何安装并运行 Elasticsearch，顺带介绍 Kibana 的安装</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文以 Elasticsearch 5.0.1 版本为例进行讲解,不定期更新</li><li>该系列主要参考的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/index.html" target="_blank" rel="noopener">Elasticsearch Reference: 5.0</a>，尽量避免照搬翻译，只摘录精要部分辅以简单说明</li><li>写这个系列博客的初衷是强迫自己梳理，同时方便一些较忙/没空耐心看英文文档的朋友快速上手，建议读者有空多读官方文档，毕竟别人写的都是二手资料</li><li>如需查看 ES 系列更多博文，请关注我的个人网站<a href="http://brianway.github.io/">@brianway</a> 或者  <a href="http://blog.csdn.net/h3243212/" target="_blank" rel="noopener">@CSDN</a></li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/zip-targz.html" target="_blank" rel="noopener">install Elasticsearch</a>即可，这里简单展示一下</p><ul><li>前台运行</li></ul><p>ES 默认运行在前台，日志打印到标准输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.1.tar.gz</span><br><span class="line">sha1sum elasticsearch-5.0.1.tar.gz</span><br><span class="line">tar -xzf elasticsearch-5.0.1.tar.gz</span><br><span class="line">cd elasticsearch-5.0.1/</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p>在终端输入<code>curl -XGET &#39;localhost:9200/?pretty&#39;</code></p><p>得到响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Dp0oq_v"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span>: <span class="string">"6rLSu0JMTlq_YJqyhWS_xQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"5.0.1"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span>: <span class="string">"080bb47"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span>: <span class="string">"2016-11-11T22:08:49.812Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span>: <span class="string">"6.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后台运行</li></ul><p>参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/zip-targz.html#setup-installation-daemon" target="_blank" rel="noopener">Running as a daemon</a></p><p>日志信息在<code>$ES_HOME/logs/</code>文件夹</p><h2 id="文件夹结构"><a href="#文件夹结构" class="headerlink" title="文件夹结构"></a>文件夹结构</h2><p>这里我使用的是<code>.zip</code>和<code>.tar.gz</code>的包直接解压得到的，文件夹的目录结构：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/zip-targz.html#zip-targz-layout" target="_blank" rel="noopener">Directory layout of .zip and .tar.gz archives</a></p><h2 id="重要配置"><a href="#重要配置" class="headerlink" title="重要配置"></a>重要配置</h2><ul><li><code>path.data</code>和<code>path.logs</code>:使用<code>.zip</code>和<code>.tar.gz</code>的 Elasticsearch 的话，这两个路径是<code>$ES_HOME</code>的子文件夹，升级 Elasticsearch 时有被删除的风险，所以需要另外指定路径，<code>path.data</code>可指定多路径</li><li><code>cluster.name</code>:节点只能加进<code>cluster.name</code>相同的集群中，默认名是<code>elasticsearch</code></li><li><code>node.name</code>:Elasticsearch 默认采用随机 UUID 的前 7 位字符作为节点id，且节点id一直保存，节点重启并不会改变节点名。</li><li><code>bootstrap.memory_lock</code>:JVM 不被交换到硬盘对于节点健康很重要，一种实现方式是将<code>bootstrap.memory_lock</code>设置成<code>true</code></li><li><code>network.host</code>:Elasticsearch 默认只绑定 loopback 地址(<code>127.0.0.1</code>和<code>[::1]</code>),多节点在一个 server 上启动也是可行的，生产环境下不建议罢了。</li><li><code>discovery.zen.ping.unicast.hosts</code>:同一个 server 上的节点将扫描端口号 9300 到 9305 来尝试连接其他该 server 上的节点。和其他 server 节点组成集群时，需要配置该项。端口默认 9300,域名对应多IP的话会尝试所有解析出来的 IP</li><li><code>discovery.zen.minimum_master_nodes</code>:不设置的话可能出现<code>split brain</code>问题，造成数据丢失。为了避免这样，该项设置为<code>(master_eligible_nodes / 2) + 1</code></li></ul><h2 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h2><p>由于老在终端里使用 curl 命令很不方便，所以顺带安装了一下 <a href="https://www.elastic.co/guide/en/kibana/5.0/introduction.html" target="_blank" rel="noopener">Kibana</a>。简单介绍下 Kinaba，它是一个配合 Elasticsearch 工作的分析和可视化平台，一些和 Elasticsearch 通过 REST API 交互的请求可以在这里面比较方便的输入和回显。</p><p>我是在 Mac 下安装的，下载好安装好解压就行了。其他系统参考 <a href="https://www.elastic.co/guide/en/kibana/5.0/install.html" target="_blank" rel="noopener">Installing Kibana</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://artifacts.elastic.co/downloads/kibana/kibana-5.0.1-darwin-x86_64.tar.gz</span><br><span class="line">tar -xzf kibana-5.0.1-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>先启动 Elasticsearch，再启动 Kibana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-5.0.1-darwin-x86_64.tar.gz</span><br><span class="line">bin/kibana</span><br></pre></td></tr></table></figure><p>默认的访问网址是<code>localhost:5601</code>，在浏览器访问即可。然后点击侧栏的 <code>Dev Tools</code>就行了。顺带提一句，在之前的版本中，这个窗口是一个叫做 <code>Sense</code> 的插件的功能，在 5.0 版本中默认和 Kibana 集成了，并改名为 <code>Console</code>。</p><p>在左边输入 <code>GET /</code>，点绿色的播放按钮发送请求，就可以看到和刚才在终端里输入<code>curl -XGET &#39;localhost:9200/?pretty&#39;</code>同样的的响应了。如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/Kibana_Console%E7%95%8C%E9%9D%A2.png" alt="Kibana - Console界面" title>                </div>                <div class="image-caption">Kibana - Console界面</div>            </figure><p>后面的Elasticsearch的文章演示部分都会基于 <code>Console - Kibana</code> ，请安装好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 Elasticsearch 5.0  系列博文的安装使用篇,主要介绍如何安装并运行 Elasticsearch，顺带介绍 Kibana 的安装&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Elasticsearch" scheme="https://brianway.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>常见数据结构(二)-树(二叉树，红黑树，B树)</title>
    <link href="https://brianway.github.io/2016/10/14/algorithms-data-structures-2/"/>
    <id>https://brianway.github.io/2016/10/14/algorithms-data-structures-2/</id>
    <published>2016-10-14T07:05:07.000Z</published>
    <updated>2019-04-07T16:16:59.959Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍数据结构中几种常见的树:二分查找树，2-3树，红黑树，B树</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文所有图片均截图自coursera上普林斯顿的课程<a href="https://class.coursera.org/algs4partI-010/" target="_blank" rel="noopener">《Algorithms, Part I》</a>中的Slides</li><li>相关命题的证明可参考<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">《算法（第4版）》</a></li><li>源码可在<a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">官网</a>下载,也可以在我的github仓库 <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">algorithms-learning</a>下载，已经使用maven构建</li><li>仓库下载：<code>git clone git@github.com:brianway/algorithms-learning.git</code></li></ul><h2 id="Binary-Search-Tree-二分查找树"><a href="#Binary-Search-Tree-二分查找树" class="headerlink" title="Binary Search Tree(二分查找树)"></a>Binary Search Tree(二分查找树)</h2><p>定义：A BST is a <strong>binary tree</strong> in <strong>symmetric order</strong>.</p><p>A binary tree is either:</p><ul><li>Empty.</li><li>Two disjoint binary trees (left and right).</li></ul><p>Symmetric order.Each node has a key, and every node’s key is:</p><ul><li>Larger than all keys in its left subtree.</li><li>Smaller than all keys in its right subtree.</li></ul><p>在java的实现中，每个节点(Node)由四个域组成：<strong>key,value,left,right</strong>。即：键，值，左子树，右子树。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key key;</span><br><span class="line">    <span class="keyword">private</span> Value val;</span><br><span class="line">    <span class="keyword">private</span> Node left, right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_BST.png" alt="Binary Search Tree" title>                </div>                <div class="image-caption">Binary Search Tree</div>            </figure><ul><li>查找：得到相应键的值，若无此键则返回null.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    Node x = root;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = x.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = x.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// if (cmp == 0)</span></span><br><span class="line">          <span class="keyword">return</span> x.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入：如果小，往左；如果大，往右；如果null，插入；如果存在，覆盖。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">    root = put(root, key, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 辅助函数，递归调用 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x.left = put(x.left, key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        x.right = put(x.right, key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// if (cmp == 0)</span></span><br><span class="line">        x.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较的次数为节点的深度+1,由于插入节点的顺序会有差异，所以树的高度不确定，最坏的情况是N个节点的树高度为N。</p><ul><li>删除：列出下面几种处理方法<ul><li>将值置为null，在树中保留键</li><li>删除最小值：一直向左找到左子树为null的节点，用它的右子节点代替它。</li><li>Hibbard deletion</li></ul></li></ul><p>下面重点讲一下Hibbard deletion,分为三种情况：</p><ol><li>没有子节点的节点，将其parent link置为null即可。</li><li>有一个子节点的节点，删除该节点并以子节点代替即可。</li><li>有两个子节点的节点，找到该节点t的下一个节点x（即右子树的最小节点），在右子树删除这个节点，并将该节点x放到t的位置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x.left = delete(x.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        x.right = delete(x.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left; <span class="comment">// no right child</span></span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right; <span class="comment">// no left child</span></span><br><span class="line">        Node t = x;</span><br><span class="line">        x = min(t.right); <span class="comment">// replace with successor</span></span><br><span class="line">        x.right = deleteMin(t.right);</span><br><span class="line">        x.left = t.left;</span><br><span class="line">    &#125;</span><br><span class="line">    x.count = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Search-Trees-2-3树"><a href="#2-3-Search-Trees-2-3树" class="headerlink" title="2-3 Search Trees(2-3树)"></a>2-3 Search Trees(2-3树)</h2><p>在介绍红黑树前，先介绍一下2-3树，便于后面理解红黑树。</p><p>2-3树是二分查找树的变形，每个节点是下面两种情况之一：</p><ul><li>2-node:一个键，两个分叉（smaller,larger）</li><li>3-node:两个键，三个分叉（smaller,between,larger）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_2-3%20trees.png" alt="2-3 trees" title>                </div>                <div class="image-caption">2-3 trees</div>            </figure><p>在底部向一个3-node插入。</p><ul><li>向3-node插入一个键，临时成为一个4-node</li><li>将4-node中间的key移动到父节点</li><li>向上重复</li><li>如果到了顶端的根节点，且根节点是4-node,将其分成3个2-nodes.</li></ul><p>总结起来就是：当插入的值导致节点变四叉时进行分裂，将中间的值传给上一个节点，并将另外两个值作为两个子节点分开，若上一节点也因此变成四叉，依次类推。分裂4-node是一个local transformation，只会进行常数次数的操作。<strong>高度加一由且仅由顶节点分裂造成</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_2-3%20trees-proof.png" alt="2-3 trees proof" title>                </div>                <div class="image-caption">2-3 trees proof</div>            </figure><p>树的高度，在查找和插入时，保证了logarithmic的性能。</p><ul><li>Worst case: lg N. [all 2-nodes]</li><li>Best case: log3 N ≈ 0.631 lg N. [all 3-nodes]</li></ul><h2 id="Red-Black-BSTs-红黑树"><a href="#Red-Black-BSTs-红黑树" class="headerlink" title="Red-Black BSTs(红黑树)"></a>Red-Black BSTs(红黑树)</h2><p>这里的红黑树均指Left-leaning red-black BSTs。主要是用二叉树的形式来表示2-3树，用一个“内部”的left-leaning连接来表示3-node。red link是2-3tree的三叉节点的连接两个key的内部link，大值作为根节点，小值作为左子节点，故名left leaning 红黑树。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91-definition.png" alt="红黑树定义" title>                </div>                <div class="image-caption">红黑树定义</div>            </figure><p>一个等价的定义,A BST such that:</p><ul><li>No node has two red links connected to it.</li><li>Every path from root to null link has the same number of black links.</li><li>Red links lean left.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91%E5%92%8C2-3%E6%A0%91%E5%AF%B9%E5%BA%94.png" alt="红黑树对应2-3树" title>                </div>                <div class="image-caption">红黑树对应2-3树</div>            </figure><p>红黑树的java表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Key key;</span><br><span class="line">    Value val;</span><br><span class="line">    Node left, right;</span><br><span class="line">    <span class="keyword">boolean</span> color;<span class="comment">// color of parent link</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> x.color == RED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左转-右转-变色"><a href="#左转-右转-变色" class="headerlink" title="左转-右转-变色"></a>左转-右转-变色</h3><p>红黑树插入过程中可能用到的三个基本操作（左转，右转，变色）：</p><ul><li>left rotate</li><li>right rotate</li><li>flip colors</li></ul><p>下面依次介绍</p><ul><li>左转</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91-left-rotate.png" alt="红黑树左转" title>                </div>                <div class="image-caption">红黑树左转</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* left rotate */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateLeft</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">   Node x = h.right;</span><br><span class="line">   h.right = x.left;</span><br><span class="line">   x.left = h;</span><br><span class="line">   x.color = h.color;</span><br><span class="line">   h.color = RED;</span><br><span class="line">   <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>右转</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithims_%E7%BA%A2%E9%BB%91%E6%A0%91-rigtht-rotate.png" alt="红黑树右转" title>                </div>                <div class="image-caption">红黑树右转</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* right rotate */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateRight</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.left)</span></span>;</span><br><span class="line">    Node x = h.left;</span><br><span class="line">    h.left = x.right;</span><br><span class="line">    x.right = h;</span><br><span class="line">    x.color = h.color;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变色</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91-flip-colors.png" alt="红黑树变色" title>                </div>                <div class="image-caption">红黑树变色</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* flip colors */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> !isRed(h);</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.left)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    h.left.color = BLACK;</span><br><span class="line">    h.right.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%8F%92%E5%85%A5%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt="红黑树插入两个节点" title>                </div>                <div class="image-caption">红黑树插入两个节点</div>            </figure><p>从图中可以看出，插入的次序不同，需要转换的操作也不同，分三种情况（图中每一列是一种情况）：</p><ol><li>已有a和b时，c插入在b的右子节点，直接变色即可</li><li>已有b和c时，a插入在b的左子节点，先右转把b滑上去，成1中的状态，再变色即可</li><li>已有a和c时，b插入在a的右子节点，先左转把a滑下去，成2中的状态，再右转＋变色即可</li></ol><p>从上面的分析可以看出，三种情况之间有转换关系，且逐步趋向简单，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_%E7%BA%A2%E9%BB%91%E6%A0%91-%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" alt="红黑树状态转换" title>                </div>                <div class="image-caption">红黑树状态转换</div>            </figure><p><strong>根本原因在于，2-3树中，是把3-node中处于中间的那个键传递给父节点，所以在红黑树中，当有一个节点连了两个 red link时，说明这三个点是一个3-node，但次序还需要调整，从而达到中间键在最上的状态，进而变色。而这个这个调整的趋势则是先让b处于a,c中间(即a的父，c的左子，成一条线)，再让b成为a,c的父节点，最后变色。记住这个顺序和原因，写代码就简单了，状态3-&gt;状态2-&gt;状态1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//insert at bottom (and color it red)</span></span><br><span class="line">    <span class="keyword">if</span> (h == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, RED);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        h.left = put(h.left, key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        h.right = put(h.right, key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        h.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left)) h = rotateLeft(h);<span class="comment">// lean left</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);<span class="comment">//balance 4-node</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right)) flipColors(h);<span class="comment">//split 4-node</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>红黑树的高度 h &lt;= 2 lg N，证明：</p><ul><li>Every path from root to null link has same number of black links.</li><li>Never two red links in-a-row.</li></ul><h2 id="B-Trees-B树"><a href="#B-Trees-B树" class="headerlink" title="B-Trees(B树)"></a>B-Trees(B树)</h2><p>最后简单提一下B树，就是将2-3树一般化，将每个节点的key-link pairs增加到 M - 1</p><ul><li>At least 2 key-link pairs at root.</li><li>At least M / 2 key-link pairs in other nodes.</li><li>External nodes contain client keys.</li><li>Internal nodes contain copies of keys to guide search.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_B-Trees.png" alt="B-Trees" title>                </div>                <div class="image-caption">B-Trees</div>            </figure><p>在B树中查找</p><ul><li>Start at root.</li><li>Find interval for search key and take corresponding link.</li><li>Search terminates in external node.</li></ul><p>在B树中插入</p><ul><li>Search for new key.</li><li>Insert at bottom.</li><li>Split nodes with M key-link pairs on the way up the tree.</li></ul><p>命题：A search or an insertion in a B-tree of order M with N keys requires between log M-1 N and log M/2 N probes</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍数据结构中几种常见的树:二分查找树，2-3树，红黑树，B树&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见数据结构(一)-栈,队列,堆,哈希表</title>
    <link href="https://brianway.github.io/2016/10/13/algorithms-data-structures-1/"/>
    <id>https://brianway.github.io/2016/10/13/algorithms-data-structures-1/</id>
    <published>2016-10-13T08:45:07.000Z</published>
    <updated>2019-04-07T16:16:59.887Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍几种常见的数据结构:栈、队列、堆、哈希表，等等。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文所有图片均截图自coursera上普林斯顿的课程<a href="https://class.coursera.org/algs4partI-010/" target="_blank" rel="noopener">《Algorithms, Part I》</a>中的Slides</li><li>相关命题的证明可参考<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">《算法（第4版）》</a></li><li>源码可在<a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">官网</a>下载,也可以在我的github仓库 <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">algorithms-learning</a>下载，已经使用maven构建</li><li>仓库下载：<code>git clone git@github.com:brianway/algorithms-learning.git</code></li></ul><h2 id="Stacks-栈"><a href="#Stacks-栈" class="headerlink" title="Stacks(栈)"></a>Stacks(栈)</h2><p>LIFO(后进先出):last in first out.</p><ul><li>使用linked-list实现</li></ul><p>保存指向第一个节点的指针，每次从前面插入／删除节点。</p><p>以字符串栈为例，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStackOfStrings</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        String item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        Node oldfirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        first.item = item;</span><br><span class="line">        first.next = oldfirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用数组实现</li></ul><p>使用数组来存储栈中的项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedCapacityStackOfStrings</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] s;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedCapacityStackOfStrings</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        s = <span class="keyword">new</span> String[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        s[N++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String item = s[--N];</span><br><span class="line">        s[N] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实现会有几个问题：</p><ol><li>从空栈pop会抛出异常</li><li>插入元素过多会超出数组上界</li></ol><p>这里重点解决第二个问题，resizing arrays.一个可行的方案是: <strong>当数组满的时候，数组大小加倍；当数组是1/4满的时候，数组大小减半。</strong> 这里不是在数组半满时削减size,这样可以避免数组在将满未满的临界点多次push-pop-push-pop操作造成大量的数组拷贝操作。</p><p>插入N个元素，<code>N + (2 + 4 + 8 + ... + N) ~ 3N</code>。</p><ul><li>N:1 array access per push</li><li>(2 + 4 + 8 + … + N):k array accesses to double to size k  (ignoring cost to create new array)</li></ul><p>由于resize操作不是经常发生，所以均摊下来，平均每次push/pop操作的还是常量时间(constant amortized time).</p><h2 id="Queues-队列"><a href="#Queues-队列" class="headerlink" title="Queues(队列)"></a>Queues(队列)</h2><p>FIFO(先进先出):first in first out.</p><ul><li>使用linked-list实现</li></ul><p>保存指向首尾节点的指针，每次从链表尾插入，从链表头删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueueOfStrings</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first, last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;  </span><br><span class="line">        <span class="comment">/* same as in StackOfStrings */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        Node oldlast = last;</span><br><span class="line">        last = <span class="keyword">new</span> Node();</span><br><span class="line">        last.item = item;</span><br><span class="line">        last.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            first = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oldlast.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用数组实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">・Use array q[] to store items in queue.</span><br><span class="line">・enqueue(): add new item at q[tail].</span><br><span class="line">・dequeue(): remove item from q[head].</span><br><span class="line">・Update head and tail modulo the capacity.</span><br><span class="line">・Add resizing array.</span><br></pre></td></tr></table></figure><h2 id="Priority-Queues"><a href="#Priority-Queues" class="headerlink" title="Priority Queues"></a>Priority Queues</h2><p>Collections. Insert and delete items.</p><ul><li>Stack. Remove the item most recently added.</li><li>Queue. Remove the item least recently added. Randomized queue. Remove a random item.</li><li><strong>Priority queue</strong>. Remove the largest (or smallest) item.</li></ul><p>unordered array 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnorderedMaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] pq;   <span class="comment">// pq[i] = ith element on pq</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;      <span class="comment">// number of elements on pq</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnorderedMaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">        pq[N++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">if</span> (less(max, i)) max = i;</span><br><span class="line"></span><br><span class="line">        exch(max, N - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> pq[--N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Heaps-二叉堆"><a href="#Binary-Heaps-二叉堆" class="headerlink" title="Binary Heaps(二叉堆)"></a>Binary Heaps(二叉堆)</h2><p>使用数组来表示一个二叉堆。根节点索引从1开始。索引对应在树中的位置，最大的键值是a[1],同时也是二叉树的根节点。</p><ul><li>Parent’s key no smaller than children’s keys</li><li>Indices start at 1.</li><li>Parent of node at k is at k/2.</li><li>Children of node at k are at 2k and 2k+1.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_binary-heap.png" alt="数组表示二叉堆" title>                </div>                <div class="image-caption">数组表示二叉堆</div>            </figure><h3 id="上浮和下沉"><a href="#上浮和下沉" class="headerlink" title="上浮和下沉"></a>上浮和下沉</h3><p>有两种情况会触发节点移动：</p><ol><li>子节点的键值变为比父节点大</li><li>父节点的键值变为比子节点（一个或两个）小</li></ol><p>而 <strong>要消除这种违反最大堆定义的结构，就需要进行节点移动和交换， 使之满足父节点键值不小于两个子节点</strong> 。对应的操作分别是 <strong>上浮</strong> 和 <strong>下沉</strong></p><ul><li>上浮：子节点key比父节点大<ul><li>Exchange key in child with key in parent.</li><li>Repeat until heap order restored.</li></ul></li><li>下沉：父节点key比子节点（one or both）小<ul><li>Exchange key in parent with key in <strong>larger</strong> child.</li><li>Repeat until heap order restored</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上浮 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k)) &#123;</span><br><span class="line">        exch(k, k / <span class="number">2</span>);</span><br><span class="line">        k = k / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下沉 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">       <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">       <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j + <span class="number">1</span>)) j++;</span><br><span class="line">       <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">       exch(k, j);</span><br><span class="line">       k = j;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>所有操作（插入和删除）都保证在log N 时间内。</p><ul><li>插入：二叉堆的插入操作比较简单，把节点加在数组尾部，然后上浮即可。</li><li>删除最大：二叉堆的删除则是把根节点和末尾的节点交换，然后下沉该节点即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span></span>&#123;</span><br><span class="line">  pq[++N] = x;</span><br><span class="line">  swim(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Key max = pq[<span class="number">1</span>];</span><br><span class="line">  exch(<span class="number">1</span>, N--);</span><br><span class="line">  sink(<span class="number">1</span>);</span><br><span class="line">  pq[N+<span class="number">1</span>]=<span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，堆中的键值是不能变的，即Immutable.不然就不能保证父节点不小于子节点。</p><h2 id="Symbol-Tables"><a href="#Symbol-Tables" class="headerlink" title="Symbol Tables"></a>Symbol Tables</h2><p>键值对的抽象.其中键一般使用immutable的类型，值是任何普通类型。</p><p>关于比较，所有的java类都继承了<code>equals()</code>方法，要求对于引用x,y,z</p><ul><li>Reflexive: x.equals(x) is true.</li><li>Symmetric: x.equals(y) iff y.equals(x).</li><li>Transitive: if x.equals(y) and y.equals(z), then x.equals(z).</li><li>Non-null: x.equals(null) is false.</li></ul><p>对于用户自定义的类型，一般按如下流程实现<code>equals()</code>方法:</p><ul><li>Optimization for reference equality.</li><li>Check against null.</li><li>Check that two objects are of the same type and cast.</li><li>Compare each significant field:<ul><li>if field is a primitive type, use ==</li><li>if field is an object, use equals().[apply rule recursively]</li><li>if field is an array, apply to each entry.[alternatively, use Arrays.equals(a, b) or Arrays.deepEquals(a, b),but not a.equals(b)]</li></ul></li></ul><p>两种实现的数据结构：</p><ol><li>无序链表：Maintain an (unordered) linked list of key-value pairs.</li><li>有序数组：Maintain an ordered array of key-value pairs.</li></ol><p>在有序数组进行查找时使用二分查找。两种方式的对比如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_SymbolTable-Compare.png" alt="elementary ST implementations summary" title>                </div>                <div class="image-caption">elementary ST implementations summary</div>            </figure><h2 id="Hash-Tables-哈希表"><a href="#Hash-Tables-哈希表" class="headerlink" title="Hash Tables(哈希表)"></a>Hash Tables(哈希表)</h2><p>上面几种数据结构都是通过遍历或者二分查找去搜寻某个元素，而哈希表则是通过一个key-indexed table来存储其中的项，即“索引”是“键”的一个函数。换句话说，哈希是通过定义一种函数/计算方法，把键直接映射成一个哈希值（再通过取余操作换算成数组的下标索引），从而定位元素，而避免耗时的逐个比较和遍历的操作。</p><ul><li>Hash code:An int between -2^31 and 2^31 - 1.</li><li>Hash function. An int between 0 and M - 1 (for use as array index).</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里hashCode可能为负，且-2^31取绝对值会溢出，所以要“位与”</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7fffffff</span>) % M;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的java类均继承了<code>hashCode()</code>方法来计算哈希值, 返回一个32-bit的int.默认实现是返回该对象的内存地址。对常用的类型有自己的实现，以java的<code>String</code>类为例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash code design.”Standard” recipe for user-defined types：</p><ul><li>Combine each significant field using the 31x + y rule.</li><li>If field is a primitive type, use wrapper type hashCode().</li><li>If field is null, return 0.</li><li>If field is a reference type, use hashCode().[applies rule recursively]</li><li>If field is an array, apply to each entry.[or use Arrays.deepHashCode()]</li></ul><p>当然，这种映射并不能保证是一对一的，所以一定会出现多个键映射到同一个哈希值的尴尬情况（尤其是对数组的size取余操作后,映射到同一数组下标），即哈希冲突，这是就需要一些方法来解决。这里介绍两种常用的方法：</p><ul><li>separate chaining</li><li>linear probing</li></ul><h3 id="separate-chaining"><a href="#separate-chaining" class="headerlink" title="separate chaining"></a>separate chaining</h3><p>Use an array of M &lt; N linked lists.</p><ul><li>哈希：将key映射到0 ~ M-1 之间的一个整数i</li><li>插入：将值插在第i个链的前端</li><li>查找：只需遍历第i个链</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_HashTable-seperate-chain.png" alt="separate chaining" title>                </div>                <div class="image-caption">separate chaining</div>            </figure><h3 id="linear-probing"><a href="#linear-probing" class="headerlink" title="linear probing"></a>linear probing</h3><p>开放地址：如果发生冲突，将值放入下一个空的位置.(数组尺寸 M 必须比键值对的数目 N 要多.)</p><ul><li>哈希：将key映射到 0 ~ M-1 之间的一个整数i</li><li>插入：如果数组索引为 i 的位置为空，则把值放入，否则依次尝试 i+1,i+2等索引，直到有空的</li><li>查找：先找索引 i，如果被占用且没匹配，则依次尝试i+1, i+2,等等</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍几种常见的数据结构:栈、队列、堆、哈希表，等等。&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://brianway.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令整理及说明(详细)</title>
    <link href="https://brianway.github.io/2016/08/07/git-basic-git-commands/"/>
    <id>https://brianway.github.io/2016/08/07/git-basic-git-commands/</id>
    <published>2016-08-07T04:16:07.000Z</published>
    <updated>2019-04-07T16:16:59.800Z</updated>
    
    <content type="html"><![CDATA[<p>本文是git系列博客的第二篇。本文对指令按照使用场景(建库，查看，修改，分支)进行分类归纳，介绍指令基本含义和用法，方便查阅。</p><a id="more"></a><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>参考我前面的博客:<a href="http://blog.csdn.net/h3243212/article/details/52144428" target="_blank" rel="noopener">git在各操作系统平台下的安装和配置</a></p><h2 id="工作区、版本库和暂存区"><a href="#工作区、版本库和暂存区" class="headerlink" title="工作区、版本库和暂存区"></a>工作区、版本库和暂存区</h2><ul><li><strong>工作区</strong>：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。</li><li><strong>版本库</strong>：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li><li><strong>暂存区</strong>：Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li></ul><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><blockquote><ol><li>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</li><li>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li></ol></blockquote><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以,现在git commit就是往master分支上提交更改。</p><p><strong>简单理解</strong>:需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>详细知识见<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000" target="_blank" rel="noopener">工作区和暂存区</a>和<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93" target="_blank" rel="noopener">Git 基础 - 记录每次更新到仓库</a></p><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><ul><li>建立远程库(为空，不要加README.md，不然后面会push不上去)</li><li>本地新建文件夹</li><li><code>git init</code>初始化仓库，可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的。<strong>勿人为瞎改</strong></li><li>远程库的名字就是<code>origin</code>，这是Git默认的叫法</li><li><code>git remote add origin git@github.com:michaelliao/learngit.git</code> 这个命令是在本地的learngit仓库下执行的。这两个地方的<em>仓库名不需要相同</em>，因为会通过在本地的仓库目录下执行这条命令（命令中包含远程库的名字）已经将两者建立了联系</li><li><code>git push -u origin master</code> 把本地库的所有内容推送到远程库上。把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，<strong>加上了-u参数(推送和关联)</strong>，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</li><li><code>git push origin master</code>每次本地提交后,推送最新修改到远程库</li></ul><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>假设github上面已经有一个远程库，但是本地没有，需要克隆到本地，远程库的名字叫<code>gitskills</code></p><ul><li><code>git clone git@github.com:michaelliao/gitskills.git</code> 克隆一个本地库,则在当前文件夹下会多一个<code>gitskills</code>的文件夹。</li><li><code>cd gitskills</code>进入克隆下来的本地库，默认的名字是和github上的一样的</li><li><code>git push origin master</code> 推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上</li></ul><h2 id="常用查看指令"><a href="#常用查看指令" class="headerlink" title="常用查看指令"></a>常用查看指令</h2><ul><li><code>git status</code> 查看仓库当前的状态</li><li><code>git diff 文件名</code>查看对文件做什么修改</li><li><code>git diff 版本号1 版本号2 --stat</code>查看两个版本的差异的文件列表，包括被修改行数和增删图。参数改为<code>--name-status</code>前面显示修改说明字母(A,M等)，无行数</li><li><code>git log</code>显示从最近到最远的提交日志</li><li><code>git log --pretty=oneline</code> 简化日志输出的显示信息，<code>commit id</code>很长,详细显示见<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000" target="_blank" rel="noopener">这里</a></li><li><code>git reflog</code> 记录你的每一次命令，最先显示的是这个命令执行之后的版本的版本号的前七位，这样就算你清屏了或者重启了，也能找到某个版本的版本号，就可以轻松回退到那个版本</li><li><code>git branch</code> 查看当前所在的分支。<code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号</li><li><code>git log --graph --pretty=oneline --abbrev-commit</code>用带参数的git log可以看到分支的合并情况。用<code>git log --graph</code>命令可以看到分支合并图</li><li><code>git remote</code> 查看远程库的信息</li><li><code>git remote -v</code> 显示更为详细的信息</li></ul><h2 id="常用修改指令"><a href="#常用修改指令" class="headerlink" title="常用修改指令"></a>常用修改指令</h2><ul><li><code>git add readme.txt</code>添加，但是不提交</li><li><code>git commit -m &quot;提交描述&quot;</code>提交，<strong>只有add后提交才有效</strong>。<em>“改文件-&gt;add文件-&gt;再改-&gt;提交”</em>，则第二次修改无效,不会被提交，只会成功提交第一次的修改。</li></ul><h2 id="撤销修改和版本回退"><a href="#撤销修改和版本回退" class="headerlink" title="撤销修改和版本回退"></a>撤销修改和版本回退</h2><ul><li><code>git checkout -- 文件名</code>把没暂存(即没add)的干掉，或者说，丢弃工作区，回到到暂存状态</li><li><code>git reset HEAD 文件名</code>把暂存的状态取消，工作区内容不变，但状态变为“未暂存”。</li></ul><p>简单来说，没有add过的修改，只需要<code>git checkout -- 文件名</code>即可撤销；add 过的修改，先<code>git reset HEAD 文件名</code>变成没add 过的修改，再<code>git checkout -- 文件名</code>撤销。操作示例可以看<a href="http://7xph6d.com1.z0.glb.clouddn.com/git_%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9.png" target="_blank" rel="noopener">这张图</a></p><ul><li><code>git reset --hard HEAD^</code> 会回退到上一个版本</li><li><code>git reset --hard 某版本号前几位</code>通过命令行上的历史信息（假如你没清屏的话），找到某版本 的版本号回到指定版本。不一定要全部的版本号，就像这个命令的例子，只要前面的约7、8位这样就可以。</li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h3><ul><li><code>git checkout -b dev</code>创建一个新的分支：dev，并且会切换到dev分支。所以这条命令有两个作用。git checkout命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：<code>git branch dev</code>和<code>git checkout dev</code></li><li><code>git branch dev</code>，新建分支是新建指针,指向当前commit</li><li><code>git checkout dev</code>切换到dev分支</li><li><code>git checkout master</code>dev分支的工作完成，我们就可以切换回master分支(<strong>此时在dev分支的修改在master上是看不到的</strong>)</li><li><code>git merge dev</code> 这是在master分支上执行的命令，作用是：把dev分支上的工作成果合并到master分支上</li><li><code>git branch -d dev</code> 删除已合并的分支。删除分支就是删除指针</li><li><code>git branch -D dev</code>Git友情提醒，dev分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用<code>git branch -D dev</code>命令</li><li><code>git rebase master</code>变基。在当前分支(非master)下执行该命令，则相当于把当前分支和mater分支合并，和merge操作类似，但提交历史不同，rebase操作的log更干净。具体可参考<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">Git 分支 - 变基</a></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>假设在master分支和feature1分支对同一文件做了修改</p><ul><li><code>git merge feature1</code> 在master分支上执行该命令，与feature1分支合并。这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件</li></ul><p>合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</p><ul><li><code>git merge --no-ff -m &quot;merge with with no-ff&quot; dev</code>准备合并dev分支，注意<code>--no-ff</code>参数表示禁用Fast forward，因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去</li></ul><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><p>Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p><ul><li><code>git stash</code>保存工作现场</li><li><code>git stash list</code> 查看工作现场</li><li><code>git stash apply</code>恢复工作现场，但是恢复后，stash内容并不删除，有多个工作现场时可以<code>git stash apply stash@{0}</code>恢复特定的现场</li><li><code>git stash drop</code>删除stash的内容</li><li><code>git stash pop</code>恢复的同时也把stas内容删除了</li></ul><h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>这部分只介绍常用的几个操作</p><ul><li><code>git fetch origin</code> 这个命令查找 “origin” 是哪一个服务器，从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code>指针指向新的、更新后的位置</li><li><code>git push (remote) (branch)</code>推送本地的分支来更新远程仓库上的 同名分支。如前文提到的<code>git push origin master</code>就是将本地master分支推送到远程master分支；复杂一点的，<code>git push origin serverfix:awesomebranch</code>将本地的 serverfix分支推送到远程仓库上的awesomebranch分支</li><li><code>git push origin --delete serverfix</code>或者<code>git push origin :remotebranch</code>,删除远程的serverfix分支</li><li><code>git pull</code>在大多数情况下它的含义是一个<code>git fetch</code>紧接着一个<code>git merge</code>命令。具体可参考<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git远程操作详解</a>和<a href="https://git-scm.com/docs/git-pull" target="_blank" rel="noopener">Documentation git-pull</a></li></ul><h2 id="优秀教程-amp-笔记"><a href="#优秀教程-amp-笔记" class="headerlink" title="优秀教程&amp;笔记"></a>优秀教程&amp;笔记</h2><blockquote><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程(强烈推荐)</a></li><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li><li><a href="http://segmentfault.com/a/1190000003728094" target="_blank" rel="noopener">使用git和github管理自己的项目—基础操作学习</a></li><li><a href="http://segmentfault.com/a/1190000003739324" target="_blank" rel="noopener">使用git和github管理自己的项目—真实开发环境的策略</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是git系列博客的第二篇。本文对指令按照使用场景(建库，查看，修改，分支)进行分类归纳，介绍指令基本含义和用法，方便查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="git" scheme="https://brianway.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git在各操作系统平台下的安装和配置</title>
    <link href="https://brianway.github.io/2016/08/07/git-install-and-config/"/>
    <id>https://brianway.github.io/2016/08/07/git-install-and-config/</id>
    <published>2016-08-07T03:40:07.000Z</published>
    <updated>2019-04-07T16:16:59.831Z</updated>
    
    <content type="html"><![CDATA[<p>本文是git系列博客的第一篇，主要介绍git在windows,linux,Mac OX等不同操作系统下的安装和配置，主要以后两者为主。</p><a id="more"></a><h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><ul><li><strong>ubuntu</strong>:<code>sudo apt-get intall git</code> 安装</li><li><strong>windows</strong>:下载<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">git for windows</a>安装即可</li><li><strong>mac</strong>:个人对<a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a>不是很安心,建议安装<a href="https://www.macports.org/" target="_blank" rel="noopener">macports</a>,再用macports安装git(<code>sudo port install git +bash_completion</code>)</li></ul><h2 id="环境相关配置"><a href="#环境相关配置" class="headerlink" title="环境相关配置"></a>环境相关配置</h2><ul><li><code>git config --global user.email &quot;you@example.com&quot;</code> 配置邮件</li><li><code>git config --global user.name &quot;Your Name&quot;</code> 配置用户名</li><li><code>git config --global color.ui true</code> 开启颜色显示</li><li>创建SSH Key。在用户主目录下(<code>~</code>)，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></li><li>登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>.ssh</code>目录下<code>id_rsa.pub</code>文件的内容，点“Add Key”</li></ul><h2 id="命令行显示配置"><a href="#命令行显示配置" class="headerlink" title="命令行显示配置"></a>命令行显示配置</h2><ul><li>提示语换英语,mac下在.bash_profile里添加下面内容,ubuntu在~/.profile下添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git language</span><br><span class="line">export LANGUAGE=&apos;en_US.UTF-8 git&apos;</span><br></pre></td></tr></table></figure><ul><li>终端显示分支,mac下在.bash_profile里添加下面内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Git branch in prompt.</span><br><span class="line"></span><br><span class="line">parse_git_branch() &#123;</span><br><span class="line">    git branch 2&gt; /dev/null | sed -e &apos;/^[^*]/d&apos; -e &apos;s/* \(.*\)/ (\1)/&apos;</span><br><span class="line">&#125;</span><br><span class="line">export PS1=&quot;\u@\h:\w\[\033[32m\]\$(parse_git_branch)\[\033[00m\]$ &quot;</span><br></pre></td></tr></table></figure><p>参考<a href="http://mfitzp.io/article/add-git-branch-name-to-terminal-prompt-mac/" target="_blank" rel="noopener">Add Git Branch Name to Terminal Prompt (Mac)</a></p><h2 id="git补全"><a href="#git补全" class="headerlink" title="git补全"></a>git补全</h2><p>如果是linux或者windows用户，一般不会出现这个问题，mac下我当时是bash环境没设置好，按照<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">这篇文章</a>安的，使用的是Command Line Tools安装的git,不能识别macports里的git的补全。有几种办法可以完全补全</p><ul><li>方法一：直接下载补全文件并使其生效</li></ul><p>参考<a href="http://apple.stackexchange.com/questions/55875/git-auto-complete-for-branches-at-the-command-line" target="_blank" rel="noopener">git auto-complete for <em>branches</em> at the command line?</a></p><p>1.通过curl下载：<code>curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</code></p><p>2.在<code>~/.bash_profile</code>里添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.git-completion.bash ]; then</span><br><span class="line">  . ~/.git-completion.bash</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>方法二：使用macports的bash环境</li></ul><p>参考：<a href="https://trac.macports.org/wiki/howto/bash-completion" target="_blank" rel="noopener">How to use bash-completion</a></p><p>检查的下自己的bash:<code>which bash</code>,<code>which -a bash</code></p><ul><li>方法三：使用<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>并启用git plugins</li></ul><p>检查下支持的shell:<code>cat /etc/shells</code></p><p>查看当前shell:<code>echo $SHELL</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://gist.github.com/trey/2722934" target="_blank" rel="noopener">Creating a Happy Git Environment on OS X</a></li><li><a href="http://askubuntu.com/questions/320661/change-gits-language-to-english-without-changing-the-locale" target="_blank" rel="noopener">提示语中文改英文</a></li><li><a href="http://mfitzp.io/article/add-git-branch-name-to-terminal-prompt-mac/" target="_blank" rel="noopener">Add Git Branch Name to Terminal Prompt (Mac)</a></li><li><a href="http://apple.stackexchange.com/questions/55875/git-auto-complete-for-branches-at-the-command-line" target="_blank" rel="noopener">git auto-complete for <em>branches</em> at the command line?</a></li><li><a href="http://stackoverflow.com/questions/12399002/how-to-configure-git-bash-command-line-completion" target="_blank" rel="noopener">How to configure git bash command line completion?</a></li><li><a href="https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion" target="_blank" rel="noopener">Install Bash git completion</a></li><li><a href="https://trac.macports.org/wiki/howto/bash-completion" target="_blank" rel="noopener">How to use bash-completion</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是git系列博客的第一篇，主要介绍git在windows,linux,Mac OX等不同操作系统下的安装和配置，主要以后两者为主。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="git" scheme="https://brianway.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker commands和Dockerfile</title>
    <link href="https://brianway.github.io/2016/08/01/docker-docker-command-and-Dockerfile/"/>
    <id>https://brianway.github.io/2016/08/01/docker-docker-command-and-Dockerfile/</id>
    <published>2016-07-31T18:08:07.000Z</published>
    <updated>2019-04-07T16:16:59.922Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对Docker commands和Dockerfile的相关知识进行整理</p><a id="more"></a><h2 id="Docker-commands"><a href="#Docker-commands" class="headerlink" title="Docker commands"></a>Docker commands</h2><p>官网传送门：</p><blockquote><ul><li><a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener">Docker run reference</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/" target="_blank" rel="noopener">Docker commands</a></li></ul></blockquote><p>首先，当然是配置命令自动补全，只需要把一个文件用curl下载copy到特定路径即可，具体操作参考<a href="https://docs.docker.com/compose/completion/" target="_blank" rel="noopener">Command-line Completion</a></p><p>其实docker有很完备的命令帮助提示，对哪个指令不清楚，只需要在后面加<code>--help</code>就能看到帮助说明。例如：</p><ul><li>输入<code>docker --help</code>可以看到所有可执行的命令。</li><li>随便挑一个，比如<code>run</code>命令，则输入<code>docker run --help</code>又能看到<code>run</code>的相关帮助了。</li></ul><p>常用命令：</p><ul><li>查看本地images:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>运行image</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">//i.e.</span><br><span class="line">docker run image</span><br><span class="line">docker run -it image /bin/bash</span><br></pre></td></tr></table></figure><p>常用的一些参数：</p><ul><li><code>--rm</code>:container退出后自动删除</li><li><code>-i</code>和<code>-t</code>常常一起用，<code>-it</code>:以超级管理员权限打开一个命令行窗口</li><li><code>-d</code>: 后台运行container</li><li><code>--name</code>:给container命名</li></ul><ul><li>查看当前container</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>删除所有状态的container</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><ul><li>通过另外的tty查看已经运行的容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it $&#123;container_id&#125; /bin/bash</span><br></pre></td></tr></table></figure><ul><li>查看容器的信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect $&#123;container_id&#125;</span><br></pre></td></tr></table></figure><p>另外， 在以上指令中，容器名和容器的container_id都是可以使用的，如果用户没有指定容器名，docker会默认给每个容器分配一个比较友好的随机名称，像fervent_perlman,high_galileo等等</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>官网传送门：</p><blockquote><ul><li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile reference</a></li><li><a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a></li></ul></blockquote><p>感觉文档里说了很全了，这里稍微提几个容易困惑的点</p><p>1.exec form vs shell form</p><p>在<code>CMD</code>和<code>ENTRYPOINT</code>都涉及到着两种形式(<code>CMD</code>多一种完全作为参数的形式)，例如:</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>(exec形式,推荐)</li><li><code>CMD command param1 param2</code> (shell形式)</li></ul><p>至于两种形式的区别，官方的几点说明挺详细的，主要就是变量替换，脚本环境等方面有差别：</p><blockquote><ul><li>Note: If CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and ENTRYPOINT instructions should be specified with the JSON array format.</li><li>Note: The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘).</li><li>Note: Unlike the shell form, the exec form does not invoke a command shell. This means that normal shell processing does not happen. For example, CMD [ “echo”, “$HOME” ] will not do variable substitution on $HOME. If you want shell processing then either use the shell form or execute a shell directly, for example: CMD [ “sh”, “-c”, “echo $HOME” ].</li></ul></blockquote><p>2.ENTRYPOINT vs CMD</p><p>读完官方的<a href="https://docs.docker.com/engine/reference/builder/#/understand-how-cmd-and-entrypoint-interact" target="_blank" rel="noopener">Understand how CMD and ENTRYPOINT interact</a>，觉得这两者特别相似，对这两者有什么区别和联系还是有些困惑，阅读下面这篇文章：</p><blockquote><p><a href="https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/" target="_blank" rel="noopener">Dockerfile: ENTRYPOINT vs CMD</a></p></blockquote><p><strong>简而言之，ENTRYPOINT更像一个写死的可执行指令，CMD更像默认的一个可选项。</strong></p><p>一个image只做一个单一的用途，就像一个可执行的命令时，建议使用ENTRYPOINT，把CMD作为默认参数(第三种形式<code>CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)</code>)。因为一般而言，ENTRYPOINT是不被覆盖的(除非在run时显式使用–entrypoit),而CMD是defaults的选项，从前文的run命令格式<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>可知，用户可以在运行images时输入自己的COMMAND来覆盖默认的CMD。</p><p>3.ADD vs COPY</p><p>这两个好像都是把东西从host拷贝到docker的container里,官方比较如下：</p><blockquote><p>Although ADD and COPY are functionally similar, generally speaking, COPY is preferred. That’s because it’s more transparent than ADD. COPY only supports the basic copying of local files into the container, while ADD has some features (like local-only tar extraction and remote URL support) that are not immediately obvious. Consequently, the best use for ADD is local tar file auto-extraction into the image, as in ADD rootfs.tar.xz /.</p></blockquote><p>简单来说，主要就两点区别：</p><ul><li>COPY只能把本地文件拷贝到container里；ADD还支持从远程拷贝(remote URL support)</li><li>ADD可以自动解压本地压缩文件</li></ul><p>官方建议用COPY(preferred)</p><p>参考链接</p><blockquote><ul><li><a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/add-or-copy" target="_blank" rel="noopener">Reference - ADD or COPY</a></li><li><a href="http://stackoverflow.com/questions/24958140/docker-copy-vs-add" target="_blank" rel="noopener">Stackoverflow - Docker COPY vs ADD</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对Docker commands和Dockerfile的相关知识进行整理&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Docker" scheme="https://brianway.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>docker入门概览</title>
    <link href="https://brianway.github.io/2016/07/29/docker-getting-started/"/>
    <id>https://brianway.github.io/2016/07/29/docker-getting-started/</id>
    <published>2016-07-29T05:55:11.000Z</published>
    <updated>2019-04-07T16:16:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>本文对docker进行大致介绍，包括概述,安装,简单使用,架构,基本原理等方面</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文是自己学习docker的一个记录和整理,啃英文文档挺吃力的,懒得翻译，所以写这篇类似“索引”的文章,希望能帮助和我一样的新手快速入门</li><li>本文主要参考<a href="https://docs.docker.com/" target="_blank" rel="noopener">官方文档(Docker Document)</a>和相关技术博客</li><li>如果有理解有误的地方还望不吝指正</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h3><p>可以参考下面三篇文章。从我使用的感受来看，我觉得Docker就是一个应用打包工具，把写好的应用用docker打包发布，然后别人就可以直接部署使用了，特别方便。</p><ul><li><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">Docker是什么</a></li><li><a href="http://www.jianshu.com/p/a75ddf6915e0" target="_blank" rel="noopener">理解Docker</a></li><li><a href="http://dockone.io/article/1534" target="_blank" rel="noopener">What is Docker？(译文)</a></li></ul><h3 id="什么是Docker-Engine"><a href="#什么是Docker-Engine" class="headerlink" title="什么是Docker Engine?"></a>什么是Docker Engine?</h3><p>Docker Engine is a <strong>client-server application</strong> with these major components:</p><ul><li>A <strong>server</strong> which is a type of long-running program called a daemon process.</li><li>A <strong>REST API</strong> which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.</li><li>A command line interface <strong>(CLI) client</strong>.</li></ul><p>我觉得官网的解释很言简意赅，附上图(摘自官网)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/docker_docker-engine.png" alt="Docker Engine" title>                </div>                <div class="image-caption">Docker Engine</div>            </figure><h3 id="Docker的用处"><a href="#Docker的用处" class="headerlink" title="Docker的用处"></a>Docker的用处</h3><ul><li>Faster delivery of your applications</li><li>Deploying and scaling more easily</li><li>Achieving higher density and running more workloads</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装参考<a href="https://docs.docker.com/engine/installation/#installation" target="_blank" rel="noopener">Install Docker Engine</a></p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>以ubuntu 14.04 为例，参考<a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/" target="_blank" rel="noopener">Installation on Ubuntu</a>安装Docker engine</p><p>这里列出重要的步骤：</p><ol><li>更新apt源，包括添加证书，密钥等</li><li>用sudo apt-get安装</li><li>进一步配置，主要是创建docker用户组</li></ol><p>注 ：如果输入<code>docker info</code>出问题，多半是权限问题，以sudo运行试试</p><h3 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h3><p>Mac下安装参考<a href="https://docs.docker.com/engine/installation/mac/" target="_blank" rel="noopener">Installation on Mac OS X</a></p><p>Mac下有两种安装方式供选</p><ul><li>Docker for Mac : Mac的原生应用，没有使用虚拟机(VirtualBox)，而是使用的HyperKit</li><li>Docker Toolbox : 会安装虚拟机，使用docker-machine来运行boot2docker 和Docker Engine</li></ul><p>两者的区别请参考 <a href="https://docs.docker.com/docker-for-mac/docker-toolbox/" target="_blank" rel="noopener">Docker for Mac vs. Docker Toolbox</a></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>先不多说，跑起来体验下。具体的步骤和指令在<a href="https://blog.saymagic.tech/2015/06/01/learning-docker.html" target="_blank" rel="noopener">Docker简明教程</a>这篇文章已经写得很清楚了，在此不再赘述</p><h2 id="架构和原理"><a href="#架构和原理" class="headerlink" title="架构和原理"></a>架构和原理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/dokcer_architecture.png" alt="dokcer architecture" title>                </div>                <div class="image-caption">dokcer architecture</div>            </figure><p>由上图可知，docker是一个client-server架构</p><ul><li>The Docker daemon : 运行在主机上</li><li>The Docker client : 用户和dokcer daemon交互的接口</li></ul><p>docker的内部主要有三种资源/组件</p><ul><li>docker images : <strong>build</strong> component,只可读</li><li>docker registries : <strong>distribution</strong> component,images共享库</li><li>docker containers : <strong>run</strong> component</li></ul><p>这里重点说说images and containers</p><p>Docker使用<a href="https://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="noopener">union file systems</a> 把不同的层(layer)做整合成单一的image. Union File System的中一种是AUFS,可以参考<a href="http://coolshell.cn/articles/17061.html" target="_blank" rel="noopener">这篇博文</a></p><p><a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/" target="_blank" rel="noopener">官网文档</a>对image的layers是这么描述的</p><blockquote><p>Each Docker image references a list of <strong>read-only</strong> layers that represent filesystem differences. Layers are stacked on top of each other to form a base for a container’s root filesystem</p></blockquote><p>新版docker(version&gt;=1.10)的存储模型有变化</p><blockquote><p>Previously, image and layer data was referenced and stored using a randomly generated UUID. In the new model this is replaced by a secure content hash.</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/docker_container-based-on-ubuntu.png" alt="container-based-on-ubuntu15.04" title>                </div>                <div class="image-caption">container-based-on-ubuntu15.04</div>            </figure><p>而container和image的主要区别就在于<strong>top writable layer</strong>，所有对image的更改都保存在这一层。换句话说，多个container可以共享同一个image，这就大大节省了空间。实现image和container的管理有两个关键的技术：stackable image layers 和 copy-on-write (CoW).</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/docker_multiple-containers.png" alt="multiple containers" title>                </div>                <div class="image-caption">multiple containers</div>            </figure><p>从图中可以看出，copy-on-write (CoW)是一个很好的策略，既节省了空间，又避免了因数据共享带来的写冲突问题，从而提高效率。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要对docker做简单介绍，对于一些更详细的知识，如docker file,volume,network,docker compose等等，会另写文章进行介绍。至于很具体的操作指令，比如怎么安装，怎么build image和run container来跑一个简单的docker hello world，请参考官方文档Docker Engine部分的“get started with docker”或者”learn by example”,也可参考文末的一些参考资料</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker Documentation</a>(官方文档)</li><li><a href="http://dockone.io/article/111" target="_blank" rel="noopener">Docker入门教程</a>(系列)</li><li><a href="http://blog.saymagic.cn/2015/06/01/learning-docker.html#bqlkp" target="_blank" rel="noopener">Docker简明教程</a>（使用演示）</li><li><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">docker中文</a>（系列)</li><li><a href="http://www.docker.org.cn/page/resources.html" target="_blank" rel="noopener">docker资源</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">docker-从入门到实践</a>(gitbook)</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对docker进行大致介绍，包括概述,安装,简单使用,架构,基本原理等方面&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Docker" scheme="https://brianway.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper单机伪集群配置</title>
    <link href="https://brianway.github.io/2016/06/29/zookeeper-replicated/"/>
    <id>https://brianway.github.io/2016/06/29/zookeeper-replicated/</id>
    <published>2016-06-29T04:36:11.000Z</published>
    <updated>2019-04-07T16:16:59.946Z</updated>
    
    <content type="html"><![CDATA[<p>本对zookeeper做简单介绍，分享查阅时搜集的一些好的链接，并以最新的稳定版zookeeper-3.4.8为例，对单机模式和伪分布式的部署步骤做记录和说明。</p><a id="more"></a><h2 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h2><p>Zookeeper 分布式服务框架是曾Apache Hadoop的一个子项目，现在是一个独立的顶级项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><p>通读下面几个链接，可以对zookeeper有个大致了解</p><ul><li>简单介绍：<a href="https://zh.wikipedia.org/wiki/Apache_ZooKeeper" target="_blank" rel="noopener">Apache ZooKeeper - 维基百科</a></li><li>项目主页：<a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Apache ZooKeeper - Home</a></li><li>IBM developerWorks:<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="noopener">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li><li>文档outline:<a href="https://zookeeper.apache.org/doc/trunk/s" target="_blank" rel="noopener">ZooKeeper 3.4 Documentation</a></li></ul><h2 id="单机单server运行"><a href="#单机单server运行" class="headerlink" title="单机单server运行"></a>单机单server运行</h2><p>基本上照着<a href="https://zookeeper.apache.org/doc/trunk/zookeeperStarted.html" target="_blank" rel="noopener">ZooKeeper Getting Started Guide</a>走一遍就OK了，这里简单描述下步骤</p><ol start="0"><li>环境要求:各种系统都行，java １.6＋</li><li>下载压缩包,解压</li><li>把解压目录下<code>conf/zoo_sample.cfg</code>复制一份在同目录下，重命名为<code>zoo.cfg</code>,<code>dataDir</code>属性可设置成别的</li><li>执行解压目录下的<code>bin/zkServer.sh start</code>开启zookeeper</li><li>执行解压目录下的<code>bin/zkCli.sh -server 127.0.0.1:2181</code>连接zookeeper</li></ol><p>这时可以看到连接成功和一些欢迎信息，如果日志选项没改的话，默认是<code>INFO</code>级别，所以会在控制台看到一些日志输出，至此，已经运行成功，可以输入<code>help</code>查看帮助命令，试着玩一玩<code>ls,create,get,set,delete</code>等命令体验下</p><h2 id="伪分布式"><a href="#伪分布式" class="headerlink" title="伪分布式"></a>伪分布式</h2><p>官网对分布式讲的不是很详细，这里简单记录一下</p><p>大体流程就是把压缩包解压三份，每份单独配置<code>conf/zoo.cfg</code>,并在<code>dataDir</code>对应的目录下添加一个只含数字的文本文件<code>myid</code>表明自己是哪台服务器。</p><ul><li>部署规模为3的单机伪机群</li></ul><p>以我的电脑为例，我新建了一个根目录<code>zookeeper</code>,并在该目录下分别新建了三个文件夹：<code>server0</code>,<code>server1</code>,<code>server2</code>,然后在每个文件夹解压zookeeper的压缩包，并另外新建<code>data</code>，<code>logs</code>文件夹来分别存放数据和日志,目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── server0</span><br><span class="line">│   ├── data</span><br><span class="line">│   ├── logs</span><br><span class="line">│   └── zookeeper-3.4.8</span><br><span class="line">├── server1</span><br><span class="line">│   ├── data</span><br><span class="line">│   ├── logs</span><br><span class="line">│   └── zookeeper-3.4.8</span><br><span class="line">└── server2</span><br><span class="line">├── data</span><br><span class="line">├── logs</span><br><span class="line">└── zookeeper-3.4.8</span><br></pre></td></tr></table></figure><p>然后在每个data目录下创建一个myid的文件(另外两个文件是运行后自动生成的，开始没有)，里面写入一个数字，这个数字和配置文件里的一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mi@mi-OptiPlex-9020:~/MyPrograms/zookeeper/server0/data$ cat</span><br><span class="line">myid                  version-2/            zookeeper_server.pid</span><br><span class="line">mi@mi-OptiPlex-9020:~/MyPrograms/zookeeper/server0/data$ cat myid</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>配置<code>conf/zoo.cfg</code>,比如我的<code>server0</code>目录下的配置文件，其他几个类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/home/mi/MyPrograms/zookeeper/server0/data</span><br><span class="line">dataLogDir=/home/mi/MyPrograms/zookeeper/server0/logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2180</span><br><span class="line"></span><br><span class="line">## 单机集群</span><br><span class="line">server.0=127.0.0.1:2880:3880</span><br><span class="line">server.1=127.0.0.1:2881:3881</span><br><span class="line">server.2=127.0.0.1:2882:3882</span><br></pre></td></tr></table></figure><p><code>server.A=B：C：D</code>:其中 A 是一个数字，就是myid里的那个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址,C和D是两个端口。</p><p>两个端口的作用，官网描述如下：</p><blockquote><p>Finally, note the two port numbers after each server name: “ 2888” and “3888”. Peers use the former port to connect to other peers. Such a connection is necessary so that peers can communicate, for example, to agree upon the order of updates. More specifically, a ZooKeeper server uses this port to connect followers to the leader. When a new leader arises, a follower opens a TCP connection to the leader using this port. Because the default leader election also uses TCP, we currently require another port for leader election. This is the second port in the server entry.</p></blockquote><p>简单来说，第一个端口用来集群成员的信息交换以及与集群中的Leader 服务器交换信息，第二个端口是在leader挂掉时专门用来进行选举leader所用。</p><p>因为是伪分布式，所以<code>dataDir</code>,<code>clientPort</code>也不一样，同时C,D两个端口也不能相同。</p><ul><li>启动ZooKeeper伪机群的所有服务器</li></ul><p>分别进入三个服务器文件夹的解压目录的/bin目录下，启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><ul><li>接入客户端</li></ul><p>进入解压目录的/bin目录下(3个server中任意一个)，连接任意一个服务器,比如我就是进入了server2的目录下，连接的server0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkCli.sh  -server 127.0.0.1:2180</span><br></pre></td></tr></table></figure><p>运行截图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/zookeeper_%E5%8D%95%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE-1.png" alt="zookeeper_单机集群运行截图" title>                </div>                <div class="image-caption">zookeeper_单机集群运行截图</div>            </figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li><a href="https://zh.wikipedia.org/wiki/Apache_ZooKeeper" target="_blank" rel="noopener">Apache ZooKeeper - 维基百科</a></li><li><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Apache ZooKeeper - Home</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="noopener">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li><li><a href="https://zookeeper.apache.org/doc/trunk/s" target="_blank" rel="noopener">ZooKeeper 3.4 Documentation</a></li><li><a href="http://blog.csdn.net/xymyeah/article/details/6320668" target="_blank" rel="noopener">zookeeper 单机伪集群配置</a></li><li><a href="http://blog.csdn.net/poechant/article/details/6633923" target="_blank" rel="noopener">zookeeper入门（1）在单机上实现ZooKeeper伪机群/伪集群部署</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本对zookeeper做简单介绍，分享查阅时搜集的一些好的链接，并以最新的稳定版zookeeper-3.4.8为例，对单机模式和伪分布式的部署步骤做记录和说明。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="ZooKeeper" scheme="https://brianway.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>3D Rigid Object Tracking</title>
    <link href="https://brianway.github.io/2016/05/16/3D-Rigid-Object-Tracking/"/>
    <id>https://brianway.github.io/2016/05/16/3D-Rigid-Object-Tracking/</id>
    <published>2016-05-16T04:58:00.000Z</published>
    <updated>2019-04-07T16:16:59.898Z</updated>
    
    <content type="html"><![CDATA[<p>华中科技大学图像分析与理解课程项目–3D Rigid Object Tracking.</p><p>每周最新进展概况可参看<a href="#time-line">Time Line</a>,详细进度可参看<a href="#details">Details</a></p><a id="more"></a><p>组员： <a href="http://brianway.github.io/">魏楚阳</a>，邵滨峰，郑琪，付鼎</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The objective of 3D rigid object tracking is to associate 3D target objects in consecutive video frames and meanwhile estimate the relative pose (3D translation and 3D rotation) between the 3D target and the camera.Rigid means the relative position among object components do not change. For instance, a cup, a book and a car are rigid object while a human face and a cat are non-rigid object.It has a variety of uses, some of which are: humancomputer interaction, security and surveillance, video communication and compression, augmented reality, traffic control, medical imaging and video editing.</p><p>3D object tracking can be especially difficult when the objects are moving fast relative to the frame rate. Another situation that increases the complexity of the problem is when the tracked object changes orientation over time. For these situations the tracking system usually employs a motion model which describes how the image of the target might change for different possible motions of the object.</p><h2 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To Do List"></a>To Do List</h2><p>计划逐步扩充并实现下面的任务</p><ul><li style="list-style: none"><input type="checkbox" checked> 选定项目题目，组队确定组员，创建项目链接(2016.5.13~2016.5.19)</li><li style="list-style: none"><input type="checkbox" checked> 阅读相关论文，确定实现方案(1~2周)</li><li style="list-style: none"><input type="checkbox" checked> 代码实现，PC上验证和测试方案(2周)</li><li style="list-style: none"><input type="checkbox" checked> 移植到移动端，在安卓设备上实现(1周)</li></ul><h2 id="Time-Line"><a href="#Time-Line" class="headerlink" title="Time Line"></a>Time Line</h2><table><thead><tr><th style="text-align:center">Time</th><th style="text-align:left">details</th></tr></thead><tbody><tr><td style="text-align:center">2016.05.16</td><td style="text-align:left">choose the project 5,create the projetct link</td></tr><tr><td style="text-align:center">2016.05.26</td><td style="text-align:left">meet OpenCV,read two references,test one method</td></tr><tr><td style="text-align:center">2016.06.02</td><td style="text-align:left">Android  preparing</td></tr><tr><td style="text-align:center">2016.06.10</td><td style="text-align:left">Monocular camera calibration and find corner on the object by Checkerboard</td></tr><tr><td style="text-align:center">2016.06.16</td><td style="text-align:left">Implement PC demo all by our own and complete the android version with Vuforia</td></tr></tbody></table><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul><li>PC端演示视频</li></ul><embed src="http://player.youku.com/player.php/sid/XMTYxMTIyMzU0MA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><ul><li>Android端演示视频</li></ul><embed src="http://player.youku.com/player.php/sid/XMTYxMDQyODg2OA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><ul><li>[1]. <a href="http://delivery.acm.org/10.1145/1610000/1605357/04637336.pdf" target="_blank" rel="noopener">Multiple 3D Object Tracking for Augmented Reality, In ISMAR, 2008.</a></li><li>[2]. <a href="https://www.ssontech.com/tutes/tuteobj.html" target="_blank" rel="noopener">https://www.ssontech.com/tutes/tuteobj.html</a></li><li>[3]. <a href="http://rse-lab.cs.washington.edu/papers/ijrr-11-tracking.pdf" target="_blank" rel="noopener">Manipulator and Object Tracking for In-Hand 3D Object Modeling, IN IJRR, 2011.</a></li><li>[4]. Robust Statistics for 3D Object Tracking, In ICRA 2006.</li><li>[5]. Real-time 3D Object Pose Estimation and Tracking for Natural Landmark Based Visual Servo. In IROS, 2008.</li><li>[6]. <a href="http://opencv-srf.blogspot.my/2010/09/object-detection-using-color-seperation.html" target="_blank" rel="noopener">OpenCV Tutorial C++</a></li></ul></blockquote><hr><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>项目详细进展</p><h3 id="week-1"><a href="#week-1" class="headerlink" title="week 1"></a>week 1</h3><p>因为之前从来都没有接触过3D object tracking，所以这一周我们主要是从算法入手，选择性地详细阅读了两篇参考文献，了解一下实现步骤。</p><p>为了熟悉一下openCV，我们运行了一个tracking ball的小程序，没有考虑物体的3D信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_trackingball.jpg" alt="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_trackingball.jpg" title>                </div>                <div class="image-caption">http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_trackingball.jpg</div>            </figure><p>3D object tracking的复杂性在于要估计物体姿态，逼近物体表面，而不是简单地用一个方形或者圆形的框把物体框住。由于没有采集深度信息的设备，如Kinect等，我们只能利用基于模型的方法来实现。</p><blockquote><p>[1] Youngmin Park, Vincent Lepetit, Woontack Woo. Multiple 3D Object Tracking for Augmented Reality.</p></blockquote><p>Proposed 方法把object detection和tracking结合起来了，可以满足实时性要求，并且同时可以tracking多个object，这是当时其他方法做不到的。</p><p>Proposed 方法由两个可以并行的模型组成，object detection和object tracking，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_reference1-proposed%E6%96%B9%E6%B3%95.png" alt="图像处理课_reference1-proposed方法.png" title>                </div>                <div class="image-caption">图像处理课_reference1-proposed方法.png</div>            </figure><p>用于表示物体的数据结构：</p><p>包括几何信息和目标物体的外形。几何信息是一个存储在一系列三角形中的标准CAD 3D模型；外形信息则是由一些关键帧(keyframe)集合提供，这些关键帧主要是从不同视角拍摄物体，一般3、4个关键帧就足以360°覆盖整个物体。在每一个关键帧中，提取出特征点，也被称为keypoints，然后通过在3D模型上进行back-projecting的方式确定这些keypoints的3D位置，keypoints及其3D位置也被存储起来。</p><p>来自所有objects的所有N个keyframes被分到多个不同的子集中，每个子集中含有f个keyframe.</p><ul><li>(1) object detection：用reference[8]中的方法来匹配输入帧和关键帧，会得到两者之间特征点的匹配数，然后用RANSAC和non-iterative P-n-P算法来估测物体的pose。<strong>[这里得到的是matched keypoints]</strong></li><li>(2) frame-by-frame tracking：有两个目的：一是只要物体出现了就会被检测出来，以此达到tracking的目的；二是消除了单独的object detection可能产生的抖动。具体做法是：在每一帧输入中提取特征点，用基于cross-correlation和local search的方法将这些特征点和前面一帧中提取的特征点进行匹配。<strong>[这里得到的是“temporal keypoints”]</strong></li><li>(3) 将temporal keypoints和matched keypoints进行融合来估测物体的姿态</li></ul><p>第一篇文章是2008年的，proposed方法可以实现多目标tracking，但是在实时性上可能效果不太好，作者也说的比较委婉。于是我们阅读了下面一篇文献，是2012年的。</p><blockquote><p>[2] Changhyun Choi and Henrik I. Christensen. Real-time 3D Model-based Tracking Using Edge and Keypoint Features for Robotic Manipulation.</p></blockquote><p>主要步骤：</p><ul><li>先用keypoints完成Global Pose Estimation(GPE)中的estimate the initial pose步骤</li><li>然后用edge做tracking, 即Local Pose Estimation(LPE)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_reference2-LPE.png" alt="图像处理课_reference2-LPE.png" title>                </div>                <div class="image-caption">图像处理课_reference2-LPE.png</div>            </figure><p>和[1]一样，这里也用到了事先存储好的关键帧（keyframe）集合；先得到当前帧的SURF keypoints，再利用这些keypoints将当前帧和关键帧match；keypoints的3D坐标也是通过在CAD model上进行back-projecting得到的，从而可以进行pose estimation。</p><p>这篇文章的实验部分写的比较详细，尤其是我们在第一篇文章中不知道CAD模型怎么获取等，在这篇文章中都有讲到。相比之下，这篇文章的方法更复杂，速度非常快，我们准备尝试实现该文章的算法，具体的细节下次再更新~</p><h3 id="week-2"><a href="#week-2" class="headerlink" title="week 2"></a>week 2</h3><p>本周主要完成安卓的准备工作</p><p>1.功能需求：</p><ul><li>调用手机的相机进行拍照</li><li>对拍照得到的图像进行轮廓识别和描点（由于目前图像3D识别相关的c算法还未完成，这里先用google的人脸识别功能代替）</li><li>小组主页的展示</li></ul><p>2.实现效果：</p><p>菜单见下图（菜单中包含照相、分析、关于我们三部分）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week2-%E8%8F%9C%E5%8D%95.jpg" alt="图像处理课_week2-菜单" title>                </div>                <div class="image-caption">图像处理课_week2-菜单</div>            </figure><p>3.相关知识点：</p><ul><li>菜单的动画效果：</li></ul><p>这里的动画效果采用的是属性动画（ValueAnimator），相比于原始动画，属性动画的点击效果会随动画的位置改变而改变这更加符合响应时的逻辑，而且属性动画的可定制性更高可以<br>做出更酷炫的效果。属性动画的原理是基于TimeInterpolator和TypeEvaluator的。如果将属性值的变化过程看做一个数学函数的话，从动画效果上来看它是连续的，但实际上它还是<br>离散的，因为它实际上也就是通过插入中间值（简称插值）从而”一帧一帧”完成动画的，那每一帧在哪里取，取多少呢？这也就是ValueAnimator类主要完成的作用。<br>TimeInterpolator用来控制在哪里取，而TypeEvaluator用来控制取多少。</p><ul><li>调用相机功能：</li></ul><p>调用相机的原理是通过使用startActivityForResult来启动相机组件，拍照完成后通过onActivityResult方法可以获取到拍照得到的图像，进而可以对图像进行处理。在这里需要做一个<br>适配。需要判断当前android手机的版本是6.0以前的还是6.0以后的（&gt;=6.0）,因为android6.0以后采用的是运行时的权限机制，需要在运行时由用户自行决定是否开启某项<br>权限（这里主要是两个权限：调用相机和访问存储空间），这就需要在代码中加入额外的逻辑。</p><ul><li>人脸识别：</li></ul><p>这里调用的是google人脸识别的api，其识别原理是先对人眼进行识别，然后再得到其余的相关点。人脸识别的过程相对比较耗时，因此我们通过使用AsyncTask将其放入异步线程中执行<br>防止其对主线程的阻塞。在AsyncTask类中有三个主要的方法，分别是onPreExecute（）、doInBackground（）、onPostExecute（）。首先在onPreExecute中初始化加载对话框提示用户<br>正在进行加载，然后将人脸识别的任务放在异步的doInBackground方法中进行执行，最后onPostExecute方法回到主线程来取消加载对话框并显示人脸识别后的图像。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week2-%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8.jpg" alt="图像处理课_week2-识别人脸" title>                </div>                <div class="image-caption">图像处理课_week2-识别人脸</div>            </figure><ul><li>app中内嵌web页面：</li></ul><p>这里我们使用的是WebView来做的内嵌页面。通过对WebView设置加载客户端和访问Url地址可以使其显示相关网页上的内容。这里需要注意的是要开启JavaScript配置，这样显示出来的<br>页面才具有交互性。并且设置加载客户端时需要覆盖shouldOverrideUrlLoading方法，这样页面才能在app程序中运行，而不是调用系统的浏览器运行。最后还需要覆盖该activity<br>界面的onKeyDown方法，设置按下返回键时判断WebView能否返回上一页面，若能返回则返回上一页面，否则退出这个activity。</p><p>好吧，这周的工作就到此为止啦，下周将继续研究和实现java使用jni调用c算法的部分~</p><h3 id="week-3"><a href="#week-3" class="headerlink" title="week 3"></a>week 3</h3><p>由于端午过节，更新晚了。</p><p>上周完成了两个任务，一是单目摄像机的标定，主要是利用棋盘格子和opencv的<code>calibrateCamera()</code>函数，计算摄像机的内参矩阵和RT矩阵。那么对于图像平面上的二维点，可以求出对应的三维坐标，找到物体平面和图像平面之间的关系，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week3-%E5%B9%B3%E9%9D%A2.png" alt="week3-平面" title>                </div>                <div class="image-caption">week3-平面</div>            </figure><p>可以看出，与视线垂直的棋盘面上的物体是垂直于棋盘面的。</p><p>另外一个就是以棋盘为参照物，在棋盘旁放置物体，可以找到该物体上的角点，用于后面的三维重建：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week3-%E6%A3%8B%E7%9B%98%E6%A0%BC.png" alt="week3-棋盘格" title>                </div>                <div class="image-caption">week3-棋盘格</div>            </figure><h3 id="week-4"><a href="#week-4" class="headerlink" title="week 4"></a>week 4</h3><p>俗话说的好，deadline是第一生产力。这周我们完成了PC端的简单demo以及android端的程序，演示视频已在<a href="#video">Video</a>部分更新。</p><ul><li>PC部分</li></ul><p>在之前阅读了一些参考文献后，对3d物体追踪的步骤有了基本了解，但由于对CAD等3维模型不熟悉，加上时间比较紧迫，我们降低了实验难度和实现结果的预期，对实验条件进行了简化(如:采用规则物体)并只使用长方体框出物体并进行姿态估计，而不是做到实时勾勒出物体的轮廓。</p><p>效果如图(tracking的框画漏了)，具体可看视频部分：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week4-PC.png" alt="PC" title>                </div>                <div class="image-caption">PC</div>            </figure><p>实现思路是选择一帧图像作为参考，具体而言就是，在棋盘图像上放置物体，利用棋盘对摄像头进行标定，并计算出棋盘坐标系。然后找出图中物体的特征点，计算ORB特征描述。对物体的特征点进行kmeans聚类，可以得到物体的中心点，在中心点处的棋盘坐标系上以长方体给出物体的姿态估计。</p><p>后面对物体的追踪部分就是找出物体特征点，计算其ORB特征描述(正好我们组之前论文阅读汇报作业里读的论文就是<code>BRIEF</code>，也算学以致用吧)，并与参考帧进行特征点匹配。计算匹配特征点之间的单应性矩阵，然后对初始姿态的长方体角点进行变换，更新物体姿态。</p><p>环境配置：Python 2.7.6 + openCV 2.4.10，Ubuntu 14.04</p><ul><li>Android部分</li></ul><p>本来计划是在PC端实现算法，然后封装起来，在移动端通过JNI调用，但由于时间不够App最后的功能实现使用的是Vuforia的SDK中的算法（也是基于openGL实现的，封装成接口，可以直接调用）。</p><p>3D物体追踪主要涉及两个方面：</p><ol><li>物体的特征提取</li><li>根据1中得到的物体特征进行物体识别和追踪</li></ol><p>其中物体的特征识别使用的是Vuforia的Scanner软件，将物体放在定标纸可以定标的区域，然后对物体进行360度的拍摄扫描得到物体的特征信息如图（示例中扫描的物体为一个鼠标）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week4-scanner.png" alt="scanner" title>                </div>                <div class="image-caption">scanner</div>            </figure><p>特征信息会保存到一个od文件中。在Vuforia的开发者平台上，开发者可以创建自己的数据库，在数据库中添加刚刚得到的od文件，之后便可以下载得到这个od文件对应的xml数据文件，这个xml数据文件会在后面我们设计的app中用到。</p><p>接下来就是我们自己app的部分了，首先需要进行一些环境的配置：</p><ol><li>将开发者网站上下载的sdk文件放置到libs文件夹下，并在build.gradle文件依赖中设置编译这个sdk；</li><li>新建一个jniLibs文件夹，将算法主体的libVuforia.so（封装了调用openGL的算法）放置到该文件夹下，在build.gradle文件配置.so文件使其可以被正确引用；</li><li>将开发者网站中注册得到的license key配置到Vuforia的初始代码中；</li><li>将先前得到的xml数据文件放到项目的assets文件中。</li></ol><p>配置完成以后就是界面和实现的部分了。进入物体追踪界面时首先会进行任务的初始化，初始化包括：</p><ol><li>初始化框住物体的openGL view，这个view是基于android的GLSurfaceView实现的；</li><li>渲染器的初始化，这里的渲染器是基于GLSurfaceView里的内部类Renderer来实现的；</li><li>Vuforia任务初始化，初始化后将其绑定到2的渲染器上，在渲染器上通过设置Texture可以设置渲染器的渲染材质，将渲染器绑定到openGL view上。</li></ol><p>初始化时界面背景为黑色，且中间会显示一个进度条代表正在进行初始化，初始化完毕以后显示摄像头界面并取消进度条。初始化完成以后就可开始物体的识别和追踪了。该activity设置了GestureListener实现了手势监听，单击屏幕中要追踪的物体则会显示一个正方体块将目标物体包住（这里需要借助定标纸），与此同时会初始化一个Object Tracker来跟踪物体实时位置变化使包络能和物体一起移动。现在拖动定标纸，就可以看到正方形包络和物体一起发生移动，效果如下图，具体可看视频部分。</p><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE_week4-Android.png" alt="android"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;华中科技大学图像分析与理解课程项目–3D Rigid Object Tracking.&lt;/p&gt;
&lt;p&gt;每周最新进展概况可参看&lt;a href=&quot;#time-line&quot;&gt;Time Line&lt;/a&gt;,详细进度可参看&lt;a href=&quot;#details&quot;&gt;Details&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="project" scheme="https://brianway.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://brianway.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>几种常见排序算法</title>
    <link href="https://brianway.github.io/2016/05/08/algorithms-several-sort-algorithms/"/>
    <id>https://brianway.github.io/2016/05/08/algorithms-several-sort-algorithms/</id>
    <published>2016-05-07T22:19:00.000Z</published>
    <updated>2019-04-07T16:16:59.963Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍几种常见排序算法（选择排序，插入排序，希尔排序，归并排序，快速排序，堆排序），对算法的思路、性质、特点、具体步骤、java实现以及trace图解进行了全面的说明。最后对几种排序算法进行了比较和总结。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文所有图片均截图自coursera上普林斯顿的课程<a href="https://class.coursera.org/algs4partI-010/" target="_blank" rel="noopener">《Algorithms, Part I》</a>中的Slides</li><li>相关命题的证明可参考<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">《算法（第4版）》</a></li><li>源码可在<a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">官网</a>下载,也可以在我的github仓库 <a href="https://github.com/brianway/algorithms-learning" target="_blank" rel="noopener">algorithms-learning</a>下载，已经使用maven构建</li><li>仓库下载：<code>git clone git@github.com:brianway/algorithms-learning.git</code></li></ul><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><blockquote><p>java: <a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/Comparable.html" target="_blank" rel="noopener"><code>Interface Comparable&lt;T&gt;</code></a></p></blockquote><p>Java中很多类已经实现了<code>Comparable&lt;T&gt;</code>接口，用户也可自定义类型实现该接口</p><p>total order:</p><ul><li>Antisymmetry(反对称性): if v ≤ w and w ≤ v, then v = w.</li><li>Transitivity(传递性): if v ≤ w and w ≤ x, then v ≤ x.</li><li>Totality: either v ≤ w or w ≤ v or both.</li></ul><p><em>注意： The <code>&lt;=</code> operator for double is not a total order</em>，violates totality: (Double.NaN <code>&lt;=</code> Double.NaN) is false</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Less. Is item v less than w ?</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Exchange. Swap item in array a[] at index i with the one at index j</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a,, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Comparable swap = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初级排序算法"><a href="#初级排序算法" class="headerlink" title="初级排序算法"></a>初级排序算法</h2><h3 id="selection-sort-选择排序"><a href="#selection-sort-选择排序" class="headerlink" title="selection sort(选择排序)"></a>selection sort(选择排序)</h3><p>思路：</p><blockquote><ul><li>在第i次迭代中，在剩下的(即未排序的)元素中找到最小的元素</li><li>将第i个元素与最小的元素交换位置</li></ul></blockquote><p>现象：</p><ul><li>设已排序的和未排序的交界处为 ↑，则每次循环， ↑ 从左往右移动一个位置</li><li>↑ 左边的元素（包括↑）固定了，且升序</li><li>↑ 右边的任一元素全部比左边的所有元素都大</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_selectionsort-1.png" alt="选择排序" title>                </div>                <div class="image-caption">选择排序</div>            </figure><p>步骤：</p><ul><li>move the pointer to the right</li><li>indentify index of minimun entry on right</li><li>exchange into positon</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_selectionsort-2.png" alt="选择排序" title>                </div>                <div class="image-caption">选择排序</div>            </figure><p>java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (less(a[j], a[min])) min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        exch(a, i, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>运行时间和输入无关，无论输入是已排序，时间复杂度都是O(n^2)</li><li>数据移动最少，交换的次数和数组大小是线性关系</li></ul><h3 id="insertion-sort-插入排序"><a href="#insertion-sort-插入排序" class="headerlink" title="insertion sort(插入排序)"></a>insertion sort(插入排序)</h3><p>思路：</p><blockquote><ul><li>在第i次迭代中，将第i个元素与每一个它左边且比它大的的元素交换位置</li></ul></blockquote><p>现象：</p><ul><li>设已排序的和未排序的交界处为 ↑，则每次循环， ↑ 从左往右移动一个位置</li><li>↑ 左边的元素（包括↑）且升序，但位置不固定(因为后续可能会因插入而移动)</li><li>↑ 右边的元素还不可见</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_insertionsort-1.png" alt="插入排序" title>                </div>                <div class="image-caption">插入排序</div>            </figure><p>步骤：</p><ul><li>Move the pointer to the right.</li><li>Moving from right to left, exchange <code>a[i]</code> with each larger entry to its left.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_insertionsort-2.png" alt="插入排序" title>                </div>                <div class="image-caption">插入排序</div>            </figure><p>java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j-<span class="number">1</span>]); j--) &#123;</span><br><span class="line">            exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inversion（倒置）：An inversion is a pair of keys that are out of order</p><p>部分有序：An array is partially sorted if the number of inversions is ≤ c N.</p><p>特点：</p><ul><li>运行时间和输入有关，当输入已排序时，时间复杂度是O(n);</li><li>For partially-sorted arrays, insertion sort runs in linear time.(交换的次数等于输入中倒置(inversion)的个数)</li><li>插入排序适合部分有序数组，也适合小规模数组</li></ul><h3 id="ShellSort-希尔排序"><a href="#ShellSort-希尔排序" class="headerlink" title="ShellSort(希尔排序)"></a>ShellSort(希尔排序)</h3><p>希尔排序是基于插入排序的。</p><p>思路：</p><blockquote><ul><li>Move entries more than one position at a time by h-sorting the array</li><li>按照h的步长进行插入排序</li></ul></blockquote><p>现象：</p><ul><li>数组中任意间隔为h的元素都是有序的</li><li>A g-sorted array remains g-sorted after h-sorting it.</li></ul><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_shellsort-1.png" alt="希尔排序"></p><p>性质：</p><blockquote><ul><li>递增数列一般采用3x+1：1,4,13,40,121,364…..，使用这种递增数列的希尔排序所需的比较次数不会超过N的若干倍乘以递增数列的长度。</li><li>最坏情况下，使用3x+1递增数列的希尔排序的比较次数是O(N^(3/2))</li></ul></blockquote><p>java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3x+1 increment sequence:  1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; N/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// h-sort the array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h) &#123;</span><br><span class="line">                exch(a, j, j-h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shuffing-不是排序算法"><a href="#shuffing-不是排序算法" class="headerlink" title="shuffing(不是排序算法)"></a>shuffing(不是排序算法)</h3><blockquote><p>目标：Rearrange array so that result is a uniformly random permutation</p></blockquote><p>shuffle sort思路</p><blockquote><ul><li>为数组的每一个位置生成一个随机实数</li><li>排序这个生成的数组</li></ul></blockquote><p>Knuth shuffle demo</p><blockquote><ul><li>In iteration i, pick integer r between 0 and i uniformly at random.</li><li>Swap <code>a[i]</code> and <code>a[r]</code>.</li></ul></blockquote><p>correct variant: between i and N – 1</p><hr><ul><li>Mergesort–Java sort for objects.</li><li>Quicksort–Java sort for primitive types.</li></ul><p>下面看看这两种排序算法</p><h2 id="merge-sort-归并排序"><a href="#merge-sort-归并排序" class="headerlink" title="merge sort(归并排序)"></a>merge sort(归并排序)</h2><p>思路：</p><blockquote><ul><li>Divide array into two halves.</li><li><strong>Recursively</strong> sort each half.</li><li>Merge two halves.</li></ul></blockquote><h3 id="Abstract-in-place-merge-原地归并的抽象方法"><a href="#Abstract-in-place-merge-原地归并的抽象方法" class="headerlink" title="Abstract in-place merge(原地归并的抽象方法)"></a>Abstract in-place merge(原地归并的抽象方法)</h3><blockquote><p>Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi],replace with sorted subarray a[lo] to a[hi]</p></blockquote><p>步骤：</p><ul><li>先将所有元素复制到<code>aux[]</code>中，再归并回<code>a[]</code>中。</li><li>归并时的四个判断：<ul><li>左半边用尽(取右半边元素)</li><li>右半边用尽(取左半边元素)</li><li>右半边的当前元素<strong>小于</strong>左半边的当前元素(取右半边的元素)</li><li>右半边的当前元素<strong>大于/等于</strong>左半边的当前元素(取左半边的元素)</li></ul></li></ul><p>merging java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// stably merge a[lo .. mid] with a[mid+1 ..hi] using aux[lo .. hi]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// precondition: a[lo .. mid] and a[mid+1 .. hi] are sorted subarrays</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy to aux[]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge back to a[]</span></span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>      (i &gt; mid)              a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)               a[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span>                           a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Top-down-mergesort-自顶向下的归并排序"><a href="#Top-down-mergesort-自顶向下的归并排序" class="headerlink" title="Top-down mergesort(自顶向下的归并排序)"></a>Top-down mergesort(自顶向下的归并排序)</h3><p>mergesort java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mergesort a[lo..hi] using auxiliary array aux[lo..hi]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    sort(a, aux, lo, mid);  <span class="comment">//将左边排序</span></span><br><span class="line">    sort(a, aux, mid + <span class="number">1</span>, hi);  <span class="comment">//将右边排序</span></span><br><span class="line">    merge(a, aux, lo, mid, hi); <span class="comment">//归并结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自顶向下的归并排序的轨迹图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_mergesort-1.png" alt="归并排序" title>                </div>                <div class="image-caption">归并排序</div>            </figure><p>由图可知，原地归并排序的大致趋势是，先局部排序，再扩大规模；先左边排序，再右边排序；每次都是左边一半局部排完且merge了，右边一半才开始从最局部的地方开始排序。</p><p>改进</p><ul><li>对小规模子数组使用插入排序</li><li>测试数组是否已经有序（左边最大&lt;右边最小时，直接返回）</li><li>不将元素复制到辅助数组(节省时间而非空间)</li></ul><h3 id="Bottom-up-mergesort-自底向上的归并排序"><a href="#Bottom-up-mergesort-自底向上的归并排序" class="headerlink" title="Bottom-up mergesort(自底向上的归并排序)"></a>Bottom-up mergesort(自底向上的归并排序)</h3><p>思路：</p><blockquote><ul><li>先归并微型数组，从两两归并开始(每个元素理解为大小为1的数组)</li><li>重复上述步骤，逐步扩大归并的规模，2,4,8…..</li></ul></blockquote><p>java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(...)</span></span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> N = a.length;</span><br><span class="line">     Comparable[] aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz+sz)</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N-sz; lo += sz+sz)</span><br><span class="line">     merge(a, aux, lo, lo+sz-<span class="number">1</span>, Math.min(lo+sz+sz-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自底向上的归并排序的轨迹图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_mergesort-2.png" alt="归并排序" title>                </div>                <div class="image-caption">归并排序</div>            </figure><p>由图可知，自底向上归并排序的大致趋势是，先局部排序，逐步扩大到全局排序；步调均匀，稳步扩大</p><hr><h2 id="quicksort"><a href="#quicksort" class="headerlink" title="quicksort"></a>quicksort</h2><p>思路：</p><blockquote><ul><li><strong>Shuffle</strong> the array.</li><li><strong>Partition(切分)</strong> so that, for some j<ul><li>entry a[j] is in place</li><li>no larger entry to the left of j</li><li>no smaller entry to the right of j</li></ul></li><li><strong>Sort</strong> each piece recursively.</li></ul></blockquote><p>其中很重要的一步就是<strong>Partition(切分)</strong>，这个过程使得满足以下三个条件:</p><ul><li>对于某个j,a[j]已经排定;</li><li>a[lo]到a[j-1]中的所有元素都不大于a[j];</li><li>a[j+1]到a[hi]中的所有元素都不小于a[j];</li></ul><p>partition java实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// partition the subarray a[lo..hi] so that a[lo..j-1] &lt;= a[j] &lt;= a[j+1..hi]</span></span><br><span class="line"><span class="comment">// and return the index j.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = hi + <span class="number">1</span>;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find item on lo to swap</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v))</span><br><span class="line">            <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find item on hi to swap</span></span><br><span class="line">        <span class="keyword">while</span> (less(v, a[--j]))</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;      <span class="comment">// redundant since a[lo] acts as sentinel</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if pointers cross</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put partitioning item v at a[j]</span></span><br><span class="line">    exch(a, lo, j);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now, a[lo .. j-1] &lt;= a[j] &lt;= a[j+1 .. hi]</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快排java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    StdRandom.shuffle(a);</span><br><span class="line">    sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// quicksort the subarray from a[lo] to a[hi]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, hi)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快排的轨迹图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_quicksort-1.png" alt="快速排序" title>                </div>                <div class="image-caption">快速排序</div>            </figure><p>由图可知，和归并排序不同，快排的大致趋势是，先全局大体有个走势——左边比右边小，逐步细化到局部；也是先左后右；局部完成时全部排序也就完成了。</p><p>一些实现的细节：</p><ul><li>原地切分：不使用辅助数组</li><li>别越界：测试条件(j == lo)是冗余的(a[lo]不可能比自己小)；</li><li>保持随机性：初始时的随机打乱跟重要</li><li>终止循环</li><li>处理切分元素值有重复的情况：这里可能出问题</li></ul><p>性质：</p><ul><li>快排是in-place的</li><li>快排不稳定</li></ul><p>改进</p><ul><li>对小规模子数组使用插入排序</li><li>三取样切分</li></ul><h3 id="三向切分的快速排序"><a href="#三向切分的快速排序" class="headerlink" title="三向切分的快速排序"></a>三向切分的快速排序</h3><p>思路：</p><blockquote><ul><li>Let v be partitioning item a[lo].</li><li>Scan i from left to right.<ul><li>(a[i] &lt; v): exchange a[lt] with a[i]; increment both lt and i</li><li>(a[i] &gt; v): exchange a[gt] with a[i]; decrement gt</li><li>(a[i] == v): increment i</li></ul></li></ul></blockquote><p>主要是通过增加一个指针来实现的。普通的快拍只有lo和high两个指针，故只能记录<code>大于</code>(high右边)和<code>小于</code>(lo左边)两个区间，<code>等于</code>只能并入其中一个；这里增加了使用了lt,i,gt三个指针，从而达到记录<code>大于</code>(gt右边)、<code>小于</code>(lt左边)和<code>等于</code>(lt和i之间)三个区间。</p><p>三切分的示意图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_quicksort-3way-1.png" alt="三向切分" title>                </div>                <div class="image-caption">三向切分</div>            </figure><p>三向切分的java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quicksort the subarray a[lo .. hi] using 3-way partitioning</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = lo, gt = hi;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">        <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">        <span class="keyword">else</span>              i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a[lo..lt-1] &lt; v = a[lt..gt] &lt; a[gt+1..hi].</span></span><br><span class="line">    sort(a, lo, lt-<span class="number">1</span>);</span><br><span class="line">    sort(a, gt+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Heapsort-堆排序"><a href="#Heapsort-堆排序" class="headerlink" title="Heapsort(堆排序)"></a>Heapsort(堆排序)</h2><p>思路：</p><blockquote><ul><li>Create max-heap with all N keys.</li><li>Repeatedly remove the maximum key.</li></ul></blockquote><ul><li>swim:由下至上的堆有序化</li><li>sink:由上至下的对有序化</li></ul><p>堆排序主要分为两个阶段：</p><ol><li>堆的构造</li><li>下沉排序</li></ol><p>java实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] pq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = pq.length;</span><br><span class="line">    <span class="comment">//堆的构造</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">        sink(pq, k, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下沉排序</span></span><br><span class="line">    <span class="keyword">while</span> (N &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        exch(pq, <span class="number">1</span>, N--);</span><br><span class="line">        sink(pq, <span class="number">1</span>, N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆排序的轨迹图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_heapsort-1.png" alt="堆排序" title>                </div>                <div class="image-caption">堆排序</div>            </figure><p>由图看出，堆排序的趋势是，堆构造阶段，大致是降序的走势，到了下沉阶段，从右到左（或者说从后往前）逐步有序</p><p>Significance： In-place sorting algorithm with N log N worst-case.</p><ul><li>Mergesort: no, linear extra space.</li><li>Quicksort: no, quadratic time in worst case</li></ul><p>缺点</p><ul><li>Inner loop longer than quicksort’s.</li><li>Makes poor use of cache memory.</li><li>Not stable(不稳定)</li></ul><h2 id="总结和比较"><a href="#总结和比较" class="headerlink" title="总结和比较"></a>总结和比较</h2><p>排序算法总结表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/algorithms_sort-summary.png" alt="总结" title>                </div>                <div class="image-caption">总结</div>            </figure><p>最好情况和最坏情况：参见上面的表格</p><p>关于稳定性：</p><ul><li>稳定性，插入排序，归并排序</li><li>不稳定：选择排序，快排，希尔排序，堆排序</li><li>原因： Long-distance exchange</li></ul><p>关于额外空间：除了归并排序需要线性的额外空间，其他都是in-place的</p><h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><ul><li>对于长度为N的数组，选择排序需要N^2/2次比较和N次交换(pf见P156)</li><li>对于随机排列的长度为N的且主键不重复的数组（pf见P157）<ul><li>平均情况下插入排序需要~N^2/4次比较和~N^2/4次交换</li><li>最坏情况下需要~N^2/2次比较和~N^2/2次交换，</li><li>最好情况下需要N-1次比较和0次交换。</li></ul></li><li>Mergesort uses at most N lg N compares and 6 N lg N array accesses to sort any array of size N.  (pf见P173)</li><li>Mergesort uses extra space proportional to N.(The array <code>aux[]</code> needs to be of size N for the last merge.)</li><li>Any compare-based sorting algorithm must use at least lg ( N ! ) ~ N lg N compares in the worst-case.(pf见P177)</li><li>长度为N的无重复数组排序，快速排序平均需要~2N ln N 次比较（以及1/6即1/3 N ln N的交换）<ul><li>最多需要约N^2/2次比较</li><li>最少需要~N lg N 次比较</li></ul></li><li>用下沉操作由N个元素构造堆只需少于2N次比较以及少于N次交换(pf见P206)</li><li>将N个元素排序，堆排序只需少于（2NlgN+2N）次比较以及一半次数的交换(pf见P208)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍几种常见排序算法（选择排序，插入排序，希尔排序，归并排序，快速排序，堆排序），对算法的思路、性质、特点、具体步骤、java实现以及trace图解进行了全面的说明。最后对几种排序算法进行了比较和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="https://brianway.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://brianway.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>java多线程核心技术梳理(附源码)</title>
    <link href="https://brianway.github.io/2016/04/18/javase-multithread-programming-reading-note/"/>
    <id>https://brianway.github.io/2016/04/18/javase-multithread-programming-reading-note/</id>
    <published>2016-04-18T00:18:01.000Z</published>
    <updated>2019-04-07T16:16:59.868Z</updated>
    
    <content type="html"><![CDATA[<p>本文对多线程基础知识进行梳理，主要包括多线程的基本使用，对象及变量的并发访问，线程间通信，lock的使用，定时器，单例模式，以及线程状态与线程组。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>花了一周时间阅读《java多线程编程核心技术》(高洪岩 著)，本文算是此书的整理归纳，书中几乎所有示例，我都亲手敲了一遍，并上传到了我的github上，有兴趣的朋友可以到我的github下载。源码采用maven构建，多线程这部分源码位于<code>java-multithread</code>模块中。</p><blockquote><ul><li>仓库地址：<a href="https://github.com/brianway/java-learning" target="_blank" rel="noopener">java-learning</a></li><li>git clone： <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:brianway/java-learning.git`</li></ul></blockquote><h2 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h2><p>基础知识</p><ul><li>创建线程的两种方式：1.继承Thread类，2.实现Runnable接口。具体两者的联系可以参考我之前的博文<a href="http://blog.csdn.net/h3243212/article/details/50659389" target="_blank" rel="noopener">《java基础巩固笔记(5)-多线程之传统多线程》</a></li><li>一些基本API：isAlive(),sleep(),getId(),yield()等。<ul><li><code>isAlive()</code>测试线程是否处于活动状态</li><li><code>sleep()</code>让“正在执行的线程”休眠</li><li><code>getId()</code>取得线程唯一标识</li><li><code>yield()</code>放弃当前的CPU资源</li></ul></li><li>弃用的API:<code>stop()</code>,<code>suspend()</code>,<code>resume()</code>等，已经弃用了，因为可能产生数据不同步等问题。</li><li>停止线程的几种方式：<ul><li>使用退出标识，使线程正常退出，即run方法完成。</li><li>使用interrupt方法中断线程</li></ul></li><li>线程的优先级:继承性，规则性，随机性<ul><li>线程的优先级具有继承性. 如,线程A启动线程B，则B和A优先级一样</li><li>线程的优先级具有规则性. CPU尽量倾向于把资源优先级高的线程</li><li>线程的优先级具有随机性. 优先级不等同于执行顺序，二者关系不确定</li></ul></li><li>java中的两种线程：用户线程和守护(Daemon)线程。<ul><li>守护线程：进程中不存在非守护线程时，守护线程自动销毁。典型例子如：垃圾回收线程。</li></ul></li></ul><p>比较和辨析</p><ul><li>某个线程与当前线程：当前线程则是指正在运行的那个线程，可由<code>currentThread()</code>方法返回值确定。例如，直接在main方法里调用run方法，和调用线程的start方法，打印出的当前线程结果是不同的。</li><li><code>interrupted()</code>和<code>isInterrupted()</code><ul><li><code>interrupted()</code>是类的静态方法，测试当前线程是否已经是中断状态，执行后具有将状态标志清除为false的功能。</li><li><code>isInterrupted()</code>是类的实例方法，测试Thread对象是否已经是中断状态，但不清楚状态标志。</li></ul></li><li><code>sleep()</code>和<code>wait()</code>区别：<ul><li>sleep()是Thread类的static(静态)的方法；wait()方法是Object类里的方法</li><li>sleep()睡眠时，保持对象锁，仍然占有该锁；wait()睡眠时，释放对象锁</li><li>在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级；wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程</li><li>wait()必须放在synchronized block中，否则会在runtime时扔出<code>java.lang.IllegalMonitorStateException</code>异常</li></ul></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">是否释放锁</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">wait</td><td style="text-align:center">是</td><td style="text-align:center">wait和notify/notifyAll是成对出现的, 必须在synchronize块中被调用</td></tr><tr><td style="text-align:center">sleep</td><td style="text-align:center">否</td><td style="text-align:center">可使低优先级的线程获得执行机会</td></tr><tr><td style="text-align:center">yield</td><td style="text-align:center">否</td><td style="text-align:center">yield方法使当前线程让出CPU占有权, 但让出的时间是不可设定的</td></tr></tbody></table><h2 id="对象及变量的并发访问"><a href="#对象及变量的并发访问" class="headerlink" title="对象及变量的并发访问"></a>对象及变量的并发访问</h2><ul><li><code>synchronized</code>关键字<ul><li>调用用关键字synchronized声明的方法是排队运行的。但假如线程A持有某对象的锁，那线程B异步调用非synchronized类型的方法不受限制。</li><li>synchronized锁重入:一个线程得到对象锁后，再次请求此对象锁时是可以得到该对象的锁的。同时，子类可通过“可重入锁”调用父类的同步方法。</li><li>同步不具有继承性。</li><li>synchronized使用的“对象监视器”是一个，即必须是同一个对象</li></ul></li><li>synchronized同步方法和synchronized同步代码块。<ul><li>对其他synchronized同步方法或代码块调用呈阻塞状态。</li><li>同一时间只有一个线程可执行synchronized方法/代码块中的代码</li></ul></li><li>synchronized(非this对象x)，将x对象作为“对象监视器”<ul><li>当多个线程同时执行<code>synchronized(x){}</code>同步代码块时呈同步效果</li><li>当其他线程执行x对象中synchronizd同步方法时呈同步效果</li><li>当其他线程执行x对象方法里的synchronized(this)代码块时呈同步效果</li></ul></li><li>静态同步synchronized方法与synchronized(class)代码块：对当前对应的class类进行持锁。</li></ul><p><em>线程的私有堆栈图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%A7%81%E6%9C%89%E5%A0%86%E6%A0%88.png" alt="javaSE_多线程-线程的私有堆栈" title>                </div>                <div class="image-caption">javaSE_多线程-线程的私有堆栈</div>            </figure><ul><li>volatile关键字：主要作用是使变量在多个线程间可见。<strong>加volatile关键字可强制性从公共堆栈进行取值,而不是从线程私有数据栈中取得变量的值</strong><ul><li>在方法中while循环中设置状态位(不加volatile关键字)，在外面把状态位置位并不可行，循环不会停止，比如JVM在-server模式。</li><li>原因：是私有堆栈中的值和公共堆栈中的值不同步</li><li>volatile增加了实例变量在多个线程间的可见性，但不支持原子性</li></ul></li><li>原子类:一个原子类型就是一个原子操作可用的类型，可在没有锁的情况下做到线程安全。但原子类也不是完全安全，虽然原子操作是安全的，可方法间的调用却不是原子的，需要用同步。</li></ul><p><em>读取公共内存图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%AF%BB%E5%8F%96%E5%85%AC%E5%85%B1%E5%86%85%E5%AD%98.png" alt="javaSE_多线程-读取公共内存.png" title>                </div>                <div class="image-caption">javaSE_多线程-读取公共内存.png</div>            </figure><p>辨析和零散补充</p><ul><li>synchronized静态方法与非静态方法：synchronized关键字加static静态方法上是给Class类上锁，可以对类的所有实例对象起作用；synchronized关键字加到非static静态方法上是给对象上锁，对该对象起作用。这两个锁不是同一个锁。</li><li>synchronized和volatile比较<ul><li>1)关键字volatile是线程同步的轻量级实现，性能比synchronized好，且volatile只能修饰变量，synchronized可修饰方法和代码块。</li><li>2)多线程访问volatile不会发生阻塞，synchronized会出现阻塞</li><li>3)volatile能保证数据可见性，不保证原子性;synchronized可以保证原子性，也可以间接保证可见性，因为<strong>synchronized会将私有内存和公共内存中的数据做同步</strong>。</li><li>4)volatile解决的是变量在多个线程间的可见性，synchronized解决的是多个线程访问资源的同步性。</li></ul></li><li>String常量池特性，故大多数情况下，synchronized代码块都不适用String作为锁对象。</li><li>多线程死锁。使用JDK自带工具，jps命令+jstack命令监测是否有死锁。</li><li>内置类与静态内置类。</li><li>锁对象的的改变。</li><li>一个线程出现异常时，其所持有的锁会自动释放。</li></ul><p><em>变量在内存中的工作过程图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B.png" alt="javaSE_多线程-变量在内存中的工作过程.png" title>                </div>                <div class="image-caption">javaSE_多线程-变量在内存中的工作过程.png</div>            </figure><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><ul><li>等待/通知机制：<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>。wait使线程停止运行，notify使停止的线程继续运行。<ul><li><code>wait()</code>：将当前执行代码的线程进行等待，置入”预执行队列”。<ul><li>在调用wait()之前，线程必须获得该对象的对象级别锁；</li><li>执行wait()方法后，当前线程立即释放锁；</li><li>从wait()返回前，线程与其他线程竞争重新获得锁</li><li>当线程呈wait()状态时，调用线程的interrup()方法会出现InterrupedException异常</li><li><code>wait(long)</code>是等待某一时间内是否有线程对锁进行唤醒，超时则自动唤醒。</li></ul></li><li><code>notify()</code>：通知可能等待该对象的对象锁的其他线程。随机挑选一个呈wait状态的线程，使它等待获取该对象的对象锁。<ul><li>在调用notify()之前，线程必须获得该对象的对象级别锁；</li><li>执行完notify()方法后，不会马上释放锁，要直到退出synchronized代码块，当前线程才会释放锁。</li><li>notify()一次只随机通知<strong>一个</strong>线程进行唤醒</li></ul></li><li><code>notifyAll()</code>和<code>notify()</code>差不多，只不过是使所有正在等待队中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。</li></ul></li><li>每个锁对象有两个队列：就绪队列和阻塞队列。<ul><li>就绪队列：存储将要获得锁的线程</li><li>阻塞队列：存储被阻塞的的线程</li></ul></li><li>生产者/消费者模式<ul><li>“假死”：线程进入WAITING等待状态，呈假死状态的进程中所有线程都呈WAITING状态。<ul><li>假死的主要原因：有可能连续唤醒同类。notify唤醒的不一定是异类，也许是同类，如“生产者”唤醒“生产者”。</li><li>解决假死：将notify()改为notifyAll()</li><li>wait条件改变，可能出现异常，需要将if改成while</li></ul></li></ul></li><li>通过管道进行线程间通信：一个线程发送数据到输出管道，另一个线程从输入管道读数据。<ul><li>字节流：<code>PipedInputStream</code>和<code>PipedOutputStream</code></li><li>字符流：<code>PipedReader</code>和<code>PipedWriter</code></li></ul></li><li><code>join()</code>：等待线程对象销毁，具有使线程排队运行的作用。<ul><li>join()与interrupt()方法彼此遇到会出现异常。</li><li><code>join(long)</code>可设定等待的时间</li></ul></li><li><code>join</code>与<code>synchronized</code>的区别：join在内部使用wait()方法进行等待;synchronized使用的是“对象监视器”原理作为同步</li><li><code>join(long)</code>与<code>sleep(long)</code>的区别：join(long)内部使用wait(long)实现，所以join(long)具有释放锁的特点;Thread.sleep(long)不释放锁。</li><li><code>ThreadLocal</code>类：每个线程绑定自己的值<ul><li>覆写该类的<code>initialValue()</code>方法可以使变量初始化，从而解决get()返回null的问题</li><li><code>InheritableThreadLocal</code>类可在子线程中取得父线程继承下来的值。</li></ul></li></ul><h2 id="Lock的使用"><a href="#Lock的使用" class="headerlink" title="Lock的使用"></a>Lock的使用</h2><ul><li><code>ReentrantLock</code>类：实现线程之间的同步互斥，比synchronized更灵活<ul><li><code>lock()</code>，调用了的线程就持有了“对象监视器”，效果和synchronized一样</li></ul></li><li>使用<code>Condition</code>实现等待/通知：比wait()和notify()/notyfyAll()更灵活，比如可实现多路通知。<ul><li>调用condition.await()前须先调用lock.lock()获得同步监视器</li></ul></li></ul><p>Object与Condition方法对比</p><table><thead><tr><th style="text-align:center">Object</th><th style="text-align:center">Condition</th></tr></thead><tbody><tr><td style="text-align:center">wait()</td><td style="text-align:center">await()</td></tr><tr><td style="text-align:center">wait(long timeout)</td><td style="text-align:center">await(long time,TimeUnit unit)</td></tr><tr><td style="text-align:center">notify()</td><td style="text-align:center">signal()</td></tr><tr><td style="text-align:center">notifyAll()</td><td style="text-align:center">signalAll()</td></tr></tbody></table><p>一些API</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>int getHoldCount()</code></td><td style="text-align:left">查询当前线程保持此锁定的个数，即调用lock()方法的次数</td></tr><tr><td style="text-align:left"><code>int getQueueLength()</code></td><td style="text-align:left">返回正在等待获取此锁定的线程估计数</td></tr><tr><td style="text-align:left"><code>int getWaitQueueLength(Condition condition)</code></td><td style="text-align:left">返回等待与此锁定相关的给定条件Conditon的线程估计数</td></tr><tr><td style="text-align:left"><code>boolean hasQueueThread(Thread thread)</code></td><td style="text-align:left">查询指定的线程是否正在等待获取此锁定</td></tr><tr><td style="text-align:left"><code>boolean hasQueueThreads()</code></td><td style="text-align:left">查询是否有线程正在等待获取此锁定</td></tr><tr><td style="text-align:left"><code>boolean hasWaiters(Condition)</code></td><td style="text-align:left">查询是否有线程正在等待与此锁定有关的condition条件</td></tr><tr><td style="text-align:left"><code>boolean isFair()</code></td><td style="text-align:left">判断是不是公平锁</td></tr><tr><td style="text-align:left"><code>boolean isHeldByCurrentThread()</code></td><td style="text-align:left">查询当前线程是否保持此锁定</td></tr><tr><td style="text-align:left"><code>boolean isLocked()</code></td><td style="text-align:left">查询此锁定是否由任意线程保持</td></tr><tr><td style="text-align:left"><code>void lockInterruptibly()</code></td><td style="text-align:left">如果当前线程未被中断，则获取锁定，如果已经被中断则出现异常</td></tr><tr><td style="text-align:left"><code>boolean tryLock()</code></td><td style="text-align:left">仅在调用时锁定未被另一个线程保持的情况下，才获取该锁定</td></tr><tr><td style="text-align:left"><code>boolean tryLock(long timeout,TimeUnit unit)</code></td><td style="text-align:left">如果锁定在给定等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁定</td></tr></tbody></table><ul><li>公平锁与非公平锁<ul><li>公平锁表示线程获取锁的顺序是按照加锁的顺序来分配的，即FIFO先进先出。</li><li>非公平锁是一种获取锁的抢占机制，随机获得锁。</li></ul></li><li><code>ReentrantReadWriteLock</code>类<ul><li>读读共享</li><li>写写互斥</li><li>读写互斥</li><li>写读互斥</li></ul></li></ul><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>常用API</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">schedule(TimerTask task, Date time)</td><td style="text-align:left">在指定的日期执行某一次任务</td></tr><tr><td style="text-align:left">scheduleAtFixedRate(TimerTask task, Date firstTime, long period)</td><td style="text-align:left">在指定的日期之后按指定的间隔周期，无限循环的执行某一任务</td></tr><tr><td style="text-align:left">schedule(TimerTask task, long delay)</td><td style="text-align:left">以执行此方法的当前时间为参考时间，在此时间基础上延迟指定的毫秒数后执行一次TimerTask任务</td></tr><tr><td style="text-align:left">schedule(TimerTask task, long delay, long period)</td><td style="text-align:left">以执行此方法的当前时间为参考时间，在此时间基础上延迟指定的毫秒数，再以某一间隔时间无限次数地执行某一TimerTask任务</td></tr></tbody></table><ul><li><code>schedule</code>和<code>scheduleAtFixedRate</code>的区别:schedule不具有追赶执行性;scheduleAtFixedRate具有追赶执行性</li></ul><h2 id="单例模式与多线程"><a href="#单例模式与多线程" class="headerlink" title="单例模式与多线程"></a>单例模式与多线程</h2><ul><li>立即加载/“饿汉模式”：调用方法前，实例已经被创建了。通过静态属性new实例化实现的</li><li>延迟加载/“懒汉模式”：调用get()方法时实例才被创建。最常见的实现办法是在get()方法中进行new实例化<ul><li>缺点：多线程环境中，会出问题</li><li>解决方法<ul><li>声明synchronized关键字，但运行效率非常低下</li><li>同步代码块，效率也低</li><li>针对某些重要代码(实例化语句)单独同步，效率提升，但会出问题</li><li>使用DCL双检查锁</li><li>使用enum枚举数据类型实现单例模式</li></ul></li></ul></li></ul><h2 id="拾遗补增"><a href="#拾遗补增" class="headerlink" title="拾遗补增"></a>拾遗补增</h2><p><em>方法与状态关系示意图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%96%B9%E6%B3%95%E4%B8%8E%E7%8A%B6%E6%80%81%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="javaSE_多线程-方法与状态关系示意图.png" title>                </div>                <div class="image-caption">javaSE_多线程-方法与状态关系示意图.png</div>            </figure><ul><li>线程的状态：<code>Thread.State</code>枚举类,参考官网API<a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/Thread.State.html" target="_blank" rel="noopener">Enum Thread.State</a></li><li>线程组：线程组中可以有线程对象，也可以有线程组，组中还可以有线程。可批量管理线程或线程组对象。</li><li><code>SimpleDateFormat</code>非线程安全，解决办法有：<ul><li>创建多个SimpleDateFormat类的实例</li><li>使用ThreadLocal类</li></ul></li><li>线程组出现异常的处理<ul><li><code>setUncaughtExceptionHandler()</code>给指定线程对线设置异常处理器</li><li><code>setDefaultUncaughtExceptionHandler()</code>对所有线程对象设置异常处理器</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://zhwbqd.github.io/2015/02/13/lock-in-java.html" target="_blank" rel="noopener">浅谈Java中的锁</a></li><li><a href="http://zhh9106.iteye.com/blog/2151791" target="_blank" rel="noopener">java synchronized关键字的用法</a></li><li><a href="http://www.cnblogs.com/DreamSea/archive/2012/01/16/2263844.html" target="_blank" rel="noopener">Java Thread(线程)案例详解sleep和wait的区别</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对多线程基础知识进行梳理，主要包括多线程的基本使用，对象及变量的并发访问，线程间通信，lock的使用，定时器，单例模式，以及线程状态与线程组。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://brianway.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一场说走就走的会友之旅(流水账)</title>
    <link href="https://brianway.github.io/2016/04/05/Travel-notes/"/>
    <id>https://brianway.github.io/2016/04/05/Travel-notes/</id>
    <published>2016-04-05T06:07:00.000Z</published>
    <updated>2019-04-15T15:54:32.692Z</updated>
    
    <content type="html"><![CDATA[<p>好久没出去转转了，上次出去还是毕业前夕7人小分队和班级毕业旅行。转眼快一年了，恰逢清明假日，提前两天便出发，会会老友，聊聊人生。</p><a id="more"></a><h2 id="第一站：北京"><a href="#第一站：北京" class="headerlink" title="第一站：北京"></a>第一站：北京</h2><p>夜发朝至的卧铺，7点就到了北京，感谢杜sir凌晨4点多从村里来接我，在西直门和小鑫汇合，进了传说中的庆丰包子铺尝了尝习大大同款炒肝(just so so)。</p><p>种种原因，错过了八达岭的行程，改道去中科院，途径“怀柔光谷”，转乘小黑车，然后236寝室毕业之后首度合影。(不要问我为什么打码，因为阿耀说要遮住台阶！)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E5%AF%9D%E5%AE%A4%E5%90%88%E5%BD%B1.jpg" alt="寝室合影" title>                </div>                <div class="image-caption">寝室合影</div>            </figure><p>大三暑假时基本把颐和园、圆明园、故宫、景山公园、北海公园玩遍了，所以这次主要是见见老同学，散散步、聊聊天。</p><p>下午加上超洁、张立琨，一起徒步环湖一周，一路走一路聊，从实验室近况聊到工作意向，从选课、实习聊到人生、八卦。然后各种自拍，也是拼了…可以感受下。</p><p>当天雾霾，简直拍不清楚，感受一下不同的雁栖湖吧,清晰版vs雾霾版。</p><ul><li>清晰版</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E9%9B%81%E6%A0%96%E6%B9%96-%E6%B8%85%E6%99%B0.jpg" alt="清晰版" title>                </div>                <div class="image-caption">清晰版</div>            </figure><ul><li>雾霾版</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E9%9B%81%E6%A0%96%E6%B9%96-%E9%9B%BE%E9%9C%BE.jpg" alt="雾霾版" title>                </div>                <div class="image-caption">雾霾版</div>            </figure><p>张立琨的拍照技术不错，构图和角度感觉很nice，还能用手机拍出景深的效果(某朵花的特写)。下面这嵌入乱石的水泥路和地标日出东方均出自他手。</p><ul><li>石头路</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E9%9B%81%E6%A0%96%E6%B9%96-%E7%9F%B3%E5%A4%B4%E8%B7%AF.jpg" alt="石头路" title>                </div>                <div class="image-caption">石头路</div>            </figure><ul><li>日出东方</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E6%97%A5%E5%87%BA%E4%B8%9C%E6%96%B9.jpg" alt="日出东方" title>                </div>                <div class="image-caption">日出东方</div>            </figure><p>晚上筋疲力尽，在室友给我订的中科院招待所入住了双卧双床双电视，简直高大上！感谢室友的全程款待，<strong>包吃包车包住包接送</strong>，真是给力！最后感谢张立琨送我去车站。</p><p>感觉北京这个城市整体给人的节奏很快的感觉，无论是7点的地铁上看到中学生捧着笔记本埋头读记，还是坐错方向结果没挤上地铁，再或者清晨空气中扑鼻的灰尘味，都给人一种无形的压力。</p><h2 id="第二站：嘉兴"><a href="#第二站：嘉兴" class="headerlink" title="第二站：嘉兴"></a>第二站：嘉兴</h2><p>很早二哥就邀我来他家这边玩了，正好恰逢他北大汇丰复试刚过，赋闲在家，我就来了。</p><p>在高铁上列了下假期后几个讲座的提纲，尝试了下15元套餐。一出南站就碰到二哥接我了，在他家围观了下“工科吊”是怎么转战“金融狗”的，你们感受下。</p><ul><li>二哥书架</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E4%BA%8C%E5%93%A5%E4%B9%A6%E6%9E%B6.jpg" alt="二哥书架" title>                </div>                <div class="image-caption">二哥书架</div>            </figure><p>第二天上午，二哥带我逛了下市区的南湖和月河。按照国际惯例，拍照留图。</p><ul><li>南湖小船</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E5%8D%97%E6%B9%96-%E8%88%B9.jpg" alt="南湖小船" title>                </div>                <div class="image-caption">南湖小船</div>            </figure><ul><li>南湖的桥</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E5%8D%97%E6%B9%96-%E6%A1%A5.jpg" alt="南湖桥" title>                </div>                <div class="image-caption">南湖桥</div>            </figure><p>中午和他的同学一起吃的火锅，简直是虐狗。人家都是一对对的，谈婚论嫁了，一对计划着今年领证明年办婚礼，一对谈论着生几个，另一对说要躲开上海的丈母娘换个地方住。。。单身狗表示受到暴击。</p><p>在这里发现浙江人真是会做生意，比如我吃的那家早餐店，同时卖手抓饼和杂粮煎饼(选择多了一倍，原料准备却不用花两倍精力，真是花心思了)，还附带卖豆浆和水等饮品，真是想的周到，一个路边摊而已，居然微信支付宝齐全，方便的一逼；再比如下午和大家一起玩的桌游，一个人才34，饮料无限续杯，还可以打台球和电玩，感觉好划算。</p><h2 id="第三站：杭州"><a href="#第三站：杭州" class="headerlink" title="第三站：杭州"></a>第三站：杭州</h2><p>因为老司机最近很忙，所以我在嘉兴的晚上制定第二天的行程，为了错开西湖客流， 原计划是<code>茅家埠-&gt;浴鹄湾-&gt;四眼井-&gt;江洋生态公园-&gt;大兜路</code>,结果我特么地图都背好了，请教帮主，帮主说那些也是西湖周边，有去无回。真是血坑，早知道直接问帮主就好了。</p><p>这就算了，因为全程都有人带，所以我这次没怎么做攻略，因为我是那种买鞋信脚不信码的人，想着有活地图用啥百度地图。然后事实证明，我错了。</p><ul><li>我：“出了东站坐哪路到紫金港？”</li><li>老司机：“89路”</li></ul><p>嗯，我信了，直到我看到一个93路车的抬头是”前往浙大紫金港”…老司机就是老司机，为了不让这次旅途平淡无趣、没有挑战，为了考察我的信息甄别、信息检索、临场应变等综合能力，为了加深我对杭州公交的认识，选择了这样一道送分题，没难到我，哼哼~</p><p>然后中午到了紫金港,吃了”童年小筑”，就去西溪湿地了。因为下雨，主要是乘船游湖，岸上就简单逛了逛花朝节。景美人更美，哪有心思拍照，此处就无图了，嗯….</p><ul><li>晚餐</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E5%B0%8F%E4%BC%9A%E8%AE%A1%E6%99%9A%E9%A4%90.jpg" alt="晚餐" title>                </div>                <div class="image-caption">晚餐</div>            </figure><p>晚餐没吃完，太多了。。。我和老司机战斗力不行，没办法。老司机没教会我剥螃蟹，看来下次得找老司机的师傅教我了。晚上看了《火锅英雄》，剧情不错~</p><p>第二天上午逛了下紫金港校区，感觉真是漂亮，进门就是偌大的草坪，左手边一栋高高的行政楼和很气派的四层图书馆。校园里面各种视野开阔，绿荫垂柳，小桥流水，真的是美不胜收，哦，又忘了拍照，下次再去好了。</p><p>中午去了玉泉，找帮主蹭饭，帮主真老司机！首先驾轻就熟的穿过条条小路带我来到了一家餐厅，前面一哥们被告知排号要排一个小时，他镇定自若的拿出手机，报了下号码，服务员就把我们领进去了，牛逼！然后几个菜都挺可口的，菜名我忘了，只记得一个叫西湖牛肉羹。</p><ul><li>帮主</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E4%B9%94%E5%B8%AE%E4%B8%BB.jpg" alt="帮主" title>                </div>                <div class="image-caption">帮主</div>            </figure><p>下午先在咖啡厅小憩了一下，顺便参观了帮主的实验室，然后就去爬了下老和山俯瞰风景。路上有个小插曲，我俩无聊，数了下来往车辆的牌子，结果30秒内经过的车，5辆奥迪4辆宝马，不得不感叹杭州人真是有钱。</p><ul><li>老和山俯瞰</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xsna4.com1.z0.glb.clouddn.com/2016-4_%E8%80%81%E5%92%8C%E5%B1%B1.jpg" alt="老和山" title>                </div>                <div class="image-caption">老和山</div>            </figure><p>此行感觉浙大完爆我科，真的有点后悔当初年少无知，没有试一下浙大，没办法，自己选的路，跪着也要走完。</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>这一趟游学收获还是蛮大的，了解了好友们的近况，感受到差距，看到大家都这么优秀，感觉自己必须好好努力了，不然掉队掉太远就不好玩了。以后至少每半年出去一趟，散散心，开开眼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没出去转转了，上次出去还是毕业前夕7人小分队和班级毕业旅行。转眼快一年了，恰逢清明假日，提前两天便出发，会会老友，聊聊人生。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://brianway.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://brianway.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>springmvc+mybatis学习笔记(汇总)</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-TOC/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-TOC/</id>
    <published>2016-03-30T01:40:00.000Z</published>
    <updated>2019-04-07T16:16:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>笔记分为两大部分：mybatis和springmvc</p><ul><li><a href="http://blog.csdn.net/h3243212/article/category/6110387" target="_blank" rel="noopener">mybatis</a></li><li><a href="http://blog.csdn.net/h3243212/article/category/6110387" target="_blank" rel="noopener">springmvc</a></li></ul><p>笔记内容主要是mybatis和springmvc的一些基本概念和使用方法，涉及概念介绍、环境搭建、编程细节、运行调试等方面。</p><p>这套笔记整体偏入门和应用，适合快速上手，对底层实现和机理并未做过多分析。我后续会研读spring源码，并把学习的收获写成博客分享出来，根据情况再开一个仓库或者贴博客链接。</p><a id="more"></a><hr><p>github:</p><ul><li><a href="https://github.com/brianway/springmvc-mybatis-learning" target="_blank" rel="noopener">springmvc-mybatis-learning</a></li><li>git-clone:<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:brianway/springmvc-mybatis-learning.git`</li></ul><p><strong>如果觉得不错，请先在这个仓库上点个star吧</strong>，这也是对我的肯定和鼓励，谢谢了。不定时进行调整和补充，需要关注更新的请 Watch、Star、Fork</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="/mybatis">mybatis</a><ul><li><a href="http://blog.csdn.net/h3243212/article/details/50756617" target="_blank" rel="noopener">mybatis学习笔记(1)-对原生jdbc程序中的问题总结.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50756622" target="_blank" rel="noopener">mybatis学习笔记(2)-mybatis概述.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50756631" target="_blank" rel="noopener">mybatis学习笔记(3)-入门程序一.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50756635" target="_blank" rel="noopener">mybatis学习笔记(3)-入门程序二.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50756808" target="_blank" rel="noopener">mybatis学习笔记(4)-开发dao方法.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50759845" target="_blank" rel="noopener">mybatis学习笔记(5)-配置文件.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50765375" target="_blank" rel="noopener">mybatis学习笔记(6)-输入映射.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50765422" target="_blank" rel="noopener">mybatis学习笔记(7)-输出映射.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50766105" target="_blank" rel="noopener">mybatis学习笔记(8)-动态sql.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50770013" target="_blank" rel="noopener">mybatis学习笔记(9)-订单商品数据模型分析.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50770023" target="_blank" rel="noopener">mybatis学习笔记(10)-一对一查询.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50770026" target="_blank" rel="noopener">mybatis学习笔记(11)-一对多查询.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50770032" target="_blank" rel="noopener">mybatis学习笔记(12)-多对多查询.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50770050" target="_blank" rel="noopener">mybatis学习笔记(13)-延迟加载.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50774921" target="_blank" rel="noopener">mybatis学习笔记(14)-查询缓存之一级缓存.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50778927" target="_blank" rel="noopener">mybatis学习笔记(15)-查询缓存之二级缓存.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50778933" target="_blank" rel="noopener">mybatis学习笔记(16)-mybatis整合ehcache.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50778934" target="_blank" rel="noopener">mybatis学习笔记(17)-spring和mybatis整合.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50778937" target="_blank" rel="noopener">mybatis学习笔记(18)-mybatis逆向工程.md</a></li></ul></li><li><a href="/springmvc">springmvc</a><ul><li><a href="http://blog.csdn.net/h3243212/article/details/50828141" target="_blank" rel="noopener">springmvc学习笔记(1)-框架原理和入门配置.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50829777" target="_blank" rel="noopener">springmvc学习笔记(2)-非注解的处理器映射器和适配器.md</a>   </li><li><a href="http://blog.csdn.net/h3243212/article/details/50834272" target="_blank" rel="noopener">springmvc学习笔记(3)-注解的处理器映射器和适配器.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50834276" target="_blank" rel="noopener">springmvc学习笔记(4)-前端控制器.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50834278" target="_blank" rel="noopener">springmvc学习笔记(5)-入门程序小结.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50837187" target="_blank" rel="noopener">springmvc学习笔记(6)-springmvc整合mybatis(IDEA中通过maven构建).md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50837878" target="_blank" rel="noopener">springmvc学习笔记(7)-springmvc整合mybatis之mapper.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50843840" target="_blank" rel="noopener">springmvc学习笔记(8)-springmvc整合mybatis之service.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50845546" target="_blank" rel="noopener">springmvc学习笔记(9)-springmvc整合mybatis之controller.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50845549" target="_blank" rel="noopener">springmvc学习笔记(10)-springmvc注解开发之商品修改功能.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50854748" target="_blank" rel="noopener">springmvc学习笔记(11)-springmvc注解开发之简单参数绑定.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50854757" target="_blank" rel="noopener">springmvc学习笔记(12)-springmvc注解开发之包装类型参数绑定.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50854765" target="_blank" rel="noopener">springmvc学习笔记(13)-springmvc注解开发之集合类型参数绑定.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50864737" target="_blank" rel="noopener">springmvc学习笔记(14)-springmvc校验.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50864744" target="_blank" rel="noopener">springmvc学习笔记(15)-数据回显.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50864745" target="_blank" rel="noopener">springmvc学习笔记(16)-异常处理器.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50885274" target="_blank" rel="noopener">springmvc学习笔记(17)-上传图片.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50885288" target="_blank" rel="noopener">springmvc学习笔记(18)-json数据交互.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50885293" target="_blank" rel="noopener">springmvc学习笔记(19)-RESTful支持.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50894887" target="_blank" rel="noopener">springmvc学习笔记(20)-拦截器.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50894901" target="_blank" rel="noopener">springmvc学习笔记(21)-springmvc整合mybatis遇到的问题及解决小结.md</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/50894913" target="_blank" rel="noopener">springmvc学习笔记(22)-springmvc开发小结.md</a></li></ul></li></ul><hr><h1 id="sourcecode说明"><a href="#sourcecode说明" class="headerlink" title="sourcecode说明"></a>sourcecode说明</h1><p>该文件下是涉及到的源码，其中mybatis部分都是直接新建的web工程，springmvc部分都是使用maven构建的。</p><p>我使用的IDE是intellij IDEA 15.0.2,以下每个子文件夹对应一个project。</p><ul><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/mybatis" target="_blank" rel="noopener">mybatis</a>:mybatis部分前16篇笔记用到的源码</li><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/mybatis-spring" target="_blank" rel="noopener">mybatis-spring</a>:mybatis部分笔记(17)对应的源码</li><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/mybatis-generator" target="_blank" rel="noopener">mybatis-generator</a>:逆向工程的源码</li><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/springmvcfirst" target="_blank" rel="noopener">springmvcfirst</a>:springmvc部分前两篇笔记对应的非注解方式配置的源码</li><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/springmvcsecond" target="_blank" rel="noopener">springmvcsecond</a>:springmvc部分前几篇笔记对应的注解方式配置的源码</li><li><a href="https://github.com/brianway/springmvc-mybatis-learning/tree/master/sourcecode/learnssm-firstssm" target="_blank" rel="noopener"><strong>learnssm-firstssm</strong></a>:核心代码，springmvc和mybatis整合部分的笔记几乎所有的源码</li></ul><hr><p><strong>All Copyright Reserved</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记分为两大部分：mybatis和springmvc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/h3243212/article/category/6110387&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mybatis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/h3243212/article/category/6110387&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;springmvc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔记内容主要是mybatis和springmvc的一些基本概念和使用方法，涉及概念介绍、环境搭建、编程细节、运行调试等方面。&lt;/p&gt;
&lt;p&gt;这套笔记整体偏入门和应用，适合快速上手，对底层实现和机理并未做过多分析。我后续会研读spring源码，并把学习的收获写成博客分享出来，根据情况再开一个仓库或者贴博客链接。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="总结" scheme="https://brianway.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(22)-springmvc开发小结</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-22-developing-summary/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-22-developing-summary/</id>
    <published>2016-03-29T22:28:22.000Z</published>
    <updated>2019-04-07T16:16:59.952Z</updated>
    
    <content type="html"><![CDATA[<p>本文对springmvc系列博文进行小结</p><a id="more"></a><h2 id="springmvc框架"><a href="#springmvc框架" class="headerlink" title="springmvc框架"></a>springmvc框架</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="springmvc_核心架构图" title>                </div>                <div class="image-caption">springmvc_核心架构图</div>            </figure><ul><li><code>DispatcherServlet</code>前端控制器：接收request，进行response</li><li><strong><code>HandlerMapping</code>处理器映射器</strong>：根据url查找Handler。（可以通过xml配置方式，注解方式）</li><li><strong><code>HandlerAdapter</code>处理器适配器</strong>：根据特定规则去执行Handler，编写Handler时需要按照HandlerAdapter的要求去编写。</li><li><strong><code>Handler</code>处理器</strong>（后端控制器）：需要程序员去编写，<strong>常用注解开发方式</strong>。<ul><li>Handler处理器执行后结果是<code>ModelAndView</code>，具体开发时<code>Handler</code>返回方法值类型包括：<code>ModelAndView</code>、<code>String</code>（逻辑视图名）、<code>void</code>（通过在Handler形参中添加request和response，类似原始 servlet开发方式，注意：可以通过指定response响应的结果类型实现json数据输出）</li></ul></li><li><code>View Resolver</code>视图解析器：根据逻辑视图名生成真正的视图（在springmvc中使用View对象表示）</li><li><code>View</code>视图：jsp页面，仅是数据展示，没有业务逻辑。</li></ul><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="使用注解方式的处理器映射器和适配器"><a href="#使用注解方式的处理器映射器和适配器" class="headerlink" title="使用注解方式的处理器映射器和适配器"></a>使用注解方式的处理器映射器和适配器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在实际开发，使用<code>&lt;mvc:annotation-driven&gt;</code>代替上边处理器映射器和适配器配置。</p><ul><li><code>@controller</code>注解必须要加，作用标识类是一个Handler处理器。</li><li><code>@requestMapping</code>注解必须要加，作用：<ul><li>1、对url和Handler的<strong>方法</strong>进行映射。</li><li>2、可以窄化请求映射，设置Handler的根路径，url就是根路径+子路径请求方式</li><li>3、可以限制http请求的方法</li></ul></li></ul><p>映射成功后，springmvc框架生成一个Handler对象，对象中只包括 一个映射成功的method。</p><h3 id="注解开发中参数绑定"><a href="#注解开发中参数绑定" class="headerlink" title="注解开发中参数绑定"></a>注解开发中参数绑定</h3><p>将request请求过来的key/value的数据（理解一个串），通过转换（参数绑定的一部分），将key/value串转成形参，将转换后的结果传给形参（整个参数绑定过程）。</p><p>springmvc所支持参数绑定：</p><ul><li>1、默认支持很多类型：<code>HttpServletRequest</code>、<code>response</code>、<code>session</code>、<code>model/modelMap</code>(将模型数据填充到request域)</li><li>2、支持简单数据类型，整型、字符串、日期..等<ul><li>只要保证request请求的参数名和形参名称一致，自动绑定成功</li><li>如果request请求的参数名和形参名称不一致，可以使用<code>@RequestParam</code>（指定request请求的参数名），<code>@RequestParam</code>加在形参的前边。</li></ul></li><li>3、支持pojo类型<ul><li>只要保证request请求的参数名称和pojo中的属性名一致，自动将request请求的参数设置到pojo的属性中。</li></ul></li><li>4、包装类型pojo参数绑定<ul><li>第一种方法：在形参中添加<code>HttpServletRequest request</code>参数，通过request接收查询条件参数。</li><li>第二种方法：在形参中让包装类型的pojo接收查询条件参数。</li></ul></li><li>5、集合类型参数绑定<ul><li>数组绑定：方法形参使用数组接收页面请求的多个参数</li><li>list绑定：使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义list<pojo>属性</pojo></li><li>map绑定：在包装类中定义Map对象，并添加<code>get/set</code>方法，action使用包装对象接收</li></ul></li></ul><p><em>注意：形参中即有pojo类型又有简单类型，参数绑定互不影响。</em></p><p>自定义参数绑定</p><ul><li>日期类型绑定自定义：</li></ul><p>定义的<code>Converter&lt;源类型，目标类型&gt;</code>接口实现类，比如：<code>Converter&lt;String,Date&gt;</code>,表示：将请求的日期数据串转成java中的日期类型。</p><p><em>注意：要转换的目标类型一定和接收的pojo中的属性类型一致。</em></p><p>将定义的Converter实现类注入到处理器适配器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- conversionService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.ssm.controller.converter.CustomDateConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="springmvc和struts2区别"><a href="#springmvc和struts2区别" class="headerlink" title="springmvc和struts2区别"></a>springmvc和struts2区别</h3><p>springmvc面向方法开发的（更接近service接口的开发方式），struts2面向类开发。</p><p>springmvc可以单例开发，struts2只能是多例开发。</p><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>服务端校验：</p><ul><li>控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）</li><li>业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。</li><li>持久层dao：一般是不校验的。</li></ul><p>一般使用hibernate的校验框架，依赖<code>hibernate-validator.jar</code>,<code>jboss-logging.jar</code>,<code>validation-api.jar</code>这几个jar包</p><p>开发步骤</p><ul><li>在springmvc.xml中添加校验器</li><li>校验器注入到处理器适配器中</li><li>在CustomValidationMessages.properties配置校验错误信息</li><li>在pojo中添加校验规则</li><li>在控制器中对参数注解<code>@Validated</code>来捕获和显示校验错误信息</li></ul><p>分组校验</p><ul><li>定义校验分组</li><li>在校验规则中添加分组</li><li>在controller方法使用指定分组的校验</li></ul><h2 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h2><p>数据回显有三种方法</p><ul><li>1.springmvc默认对pojo数据进行回显。<ul><li>pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</li><li>使用<code>@ModelAttribute</code>指定pojo回显到页面在request中的key</li></ul></li><li>2.<code>@ModelAttribute</code>还可以将方法的返回值传到页面</li><li>3.使用最简单方法使用model，可以不用<code>@ModelAttribute</code></li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理。</p><p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。</p><p>全局异常处理器处理思路：</p><p>解析出异常类型</p><ul><li>如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示</li><li>如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</li></ul><p>抛出异常的位置</p><ul><li>如果与业务功能相关的异常，建议在service中抛出异常。</li><li>与业务功能没有关系的异常，建议在controller中抛出。</li></ul><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>开发步骤</p><ul><li>在页面form中提交enctype=”multipart/form-data”的数据时，需要springmvc对multipart类型的数据进行解析。</li><li>在springmvc.xml中配置multipart类型解析器</li><li>加入上传图片的jar：<code>commons-fileupload</code></li><li>创建图片虚拟目录存储图片</li></ul><h2 id="json数据交互"><a href="#json数据交互" class="headerlink" title="json数据交互"></a>json数据交互</h2><p>两种json数据交互的形式：</p><ul><li>请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。</li><li>请求key/value、输出json。此方法比较常用。</li></ul><p>需要的依赖：</p><ul><li><code>jackson-databind</code></li><li><code>jackson-mapper-asl</code></li></ul><p>在注解适配器中加入<code>messageConverters</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果使用<code>&lt;mvc:annotation-driven /&gt;</code>则不用定义上边的内容。</strong></p><p>在controller的返回值上加注解<code>@ResponseBody</code>来将java对象输出json，返回json格式数据</p><h2 id="RESTful支持"><a href="#RESTful支持" class="headerlink" title="RESTful支持"></a>RESTful支持</h2><p><code>@RequestMapping(value=&quot;/ itemsView/{id}&quot;)</code>：<code>{×××}</code>占位符，请求的URL可以是<code>/viewItems/1</code>或<code>/viewItems/2</code>，通过在方法中使用<code>@PathVariable</code>获取{×××}中的×××变量。<code>@PathVariable</code>用于将请求URL中的模板变量映射到功能处理方法的参数上。</p><p>如果<code>@RequestMapping</code>中表示为<code>/itemsView/{id}</code>，id和形参名称一致，<code>@PathVariable</code>不用指定名称。</p><p>同时需要配置前端控制器。若要访问静态资源，还需在springmvc.xml中添加静态资源解析方法,如<code>&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</code></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器定义"><a href="#拦截器定义" class="headerlink" title="拦截器定义"></a>拦截器定义</h3><p>定义拦截器，实现<code>HandlerInterceptor</code>接口。接口中提供三个方法。可以从名称和参数看出各个接口的顺序和作用</p><ul><li><code>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception</code><ul><li>参数最少，只有三个</li><li>进入 Handler方法之前执行</li><li>用于身份认证、身份授权。比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</li></ul></li><li><code>public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception</code><ul><li>多了一个modelAndView参数</li><li>进入Handler方法之后，返回modelAndView之前执行</li><li>应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</li></ul></li><li><code>public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception</code><ul><li>多了一个Exception的类型的参数</li><li>执行Handler完成执行此方法</li><li>应用场景：统一异常处理，统一日志处理</li></ul></li></ul><h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><ul><li>针对HandlerMapping配置(一般不推荐)<ul><li>springmvc拦截器针对HandlerMapping进行拦截设置，如果在某个HandlerMapping中配置拦截，经过该HandlerMapping映射成功的handler最终使用该拦截器</li></ul></li><li>类似全局的拦截器<ul><li>springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中。</li></ul></li></ul><h3 id="拦截器测试及其应用"><a href="#拦截器测试及其应用" class="headerlink" title="拦截器测试及其应用"></a>拦截器测试及其应用</h3><p>链式执行测试</p><ul><li>两个拦截器都放行<ul><li>preHandle方法按顺序执行，postHandle和afterCompletion按拦截器配置的逆向顺序执行</li></ul></li><li>拦截器1放行，拦截器2不放行<ul><li>拦截器1放行，拦截器2 preHandle才会执行。</li><li>拦截器2 preHandle不放行，拦截器2 postHandle和afterCompletion不会执行。</li><li>只要有一个拦截器不放行，postHandle不会执行。</li></ul></li><li>两个拦截器都不放<ul><li>拦截器1 preHandle不放行，postHandle和afterCompletion不会执行。</li><li>拦截器1 preHandle不放行，拦截器2不执行。</li></ul></li></ul><p>应用</p><ul><li>统一日志处理拦截器，需要该拦截器preHandle一定要放行，且将它放在拦截器链接中第一个位置。</li><li>登陆认证拦截器，放在拦截器链接中第一个位置。权限校验拦截器，放在登陆认证拦截器之后。（因为登陆通过后才校验权限，当然登录认证拦截器要放在统一日志处理拦截器后面）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对springmvc系列博文进行小结&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="总结" scheme="https://brianway.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(21)-springmvc整合mybatis遇到的问题及解决小结</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-21-debug-summary/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-21-debug-summary/</id>
    <published>2016-03-29T22:28:21.000Z</published>
    <updated>2019-04-07T16:16:59.927Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录springmvc整合mybatis整合过程中遇到的各种问题和解决方法</p><a id="more"></a><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="在web-xml中-lt-listener-class-gt-标签报红"><a href="#在web-xml中-lt-listener-class-gt-标签报红" class="headerlink" title="在web.xml中&lt;listener-class&gt;标签报红"></a>在web.xml中<code>&lt;listener-class&gt;</code>标签报红</h3><p>参考：</p><blockquote><p><a href="http://q.cnblogs.com/q/74982/" target="_blank" rel="noopener">web.xml listener-class is not allowed here</a></p></blockquote><p>解决：改用2.5的版本</p><p>答案节选：</p><blockquote><p>Servlet3.0是J2EE6.0规范的一部分，跟随J2EE6.0一起发布，并且Tomcat7.0已经完全支持Servlet3.0 ；<br>平时，我们一般使用tomcat6.0，是不能够使用servelt3.0的，tomcat6.0还不能支持那些规范；<br>至于说，为毛线不能使用lintener-class，是因为在web-app_3_0.xsd结构定义文件中，根本就不提倡这些配置，因为Servlet3.0已经支持注解形式；</p></blockquote><p>当时解决了报红的问题。但后来我其他部分调试好了后，改回3.0也没报错。</p><h3 id="BeanCreationException"><a href="#BeanCreationException" class="headerlink" title="BeanCreationException"></a>BeanCreationException</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;dataSource&apos; defined in file [D:\intellij\workspace\learnssm-firstssm\target\learnssm-firstssm-1.0-SNAPSHOT\WEB-INF\classes\spring\applicationContext-dao.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0&apos;: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/aspectj/weaver/reflect/ReflectionWorld$ReflectionWorldException</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:478)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)</span><br><span class="line">    ....省略</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0&apos;: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/aspectj/weaver/reflect/ReflectionWorld$ReflectionWorldException</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span><br><span class="line">  ....省略</span><br></pre></td></tr></table></figure><p>是少依赖的问题，输入<code>mvn dependency:tree</code>打依赖树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">D:\intellij\workspace\learnssm-firstssm&gt;mvn dependency:tree</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Building learnssm-firstssm 1.0-SNAPSHOT</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ learnssm-firstssm ---</span><br><span class="line">[INFO] com.iot.learnssm:learnssm-firstssm:war:1.0-SNAPSHOT</span><br><span class="line">[INFO] +- org.springframework:spring-core:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  \- commons-logging:commons-logging:jar:1.2:compile</span><br><span class="line">[INFO] +- org.springframework:spring-webmvc:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-beans:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-context:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  \- org.springframework:spring-aop:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  |     \- aopalliance:aopalliance:jar:1.0:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-expression:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.springframework:spring-web:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] +- org.springframework:spring-jdbc:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.springframework:spring-tx:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] +- mysql:mysql-connector-java:jar:5.1.38:compile</span><br><span class="line">[INFO] +- org.mybatis:mybatis:jar:3.3.1:compile</span><br><span class="line">[INFO] +- org.mybatis:mybatis-spring:jar:1.2.4:compile</span><br><span class="line">[INFO] +- log4j:log4j:jar:1.2.17:compile</span><br><span class="line">[INFO] +- org.slf4j:slf4j-api:jar:1.7.18:compile</span><br><span class="line">[INFO] +- commons-dbcp:commons-dbcp:jar:1.4:compile</span><br><span class="line">[INFO] |  \- commons-pool:commons-pool:jar:1.5.4:compile</span><br><span class="line">[INFO] +- javax.servlet:jstl:jar:1.2:compile</span><br><span class="line">[INFO] \- taglibs:standard:jar:1.1.2:compile</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 7.956 s</span><br><span class="line">[INFO] Finished at: 2016-03-03T20:06:00+08:00</span><br><span class="line">[INFO] Final Memory: 11M/126M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>少了spring-aspects,spring-core等依赖，加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring版本统一设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jar 版本设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mybatis绑定错误"><a href="#mybatis绑定错误" class="headerlink" title="mybatis绑定错误"></a>mybatis绑定错误</h3><p>错误：<code>org.apache.ibatis.binding.BindingException: Invalid bound statement</code></p><p>使用了下面的方法检查，都没有解决。排除了包名不同等低级错误。</p><blockquote><ul><li><a href="http://blog.csdn.net/softwarehe/article/details/8889206" target="_blank" rel="noopener">mybatis绑定错误- softwarehe的专栏- 博客频道- CSDN.NET</a></li><li><a href="http://ljhzzyx.blog.163.com/blog/static/38380312201412453629988/" target="_blank" rel="noopener">Mybatis绑定错误的原因</a></li></ul></blockquote><p>又找到了oschina一个人的帖子，有个回答感觉靠谱</p><blockquote><ul><li><a href="http://www.oschina.net/question/113302_228910" target="_blank" rel="noopener">java spring4+mybatis整合报错BindingException Invalid bound statement</a></li></ul></blockquote><blockquote><p>是的，是没有在pom.xml配置build包含 xml，导致target目录下没有userMapper.xml<br>      -by 唐小明生</p></blockquote><p>我一看自己的target目录,发现还真是少mapper.xml文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_bug_target%E5%B0%91xml%E6%96%87%E4%BB%B6.png" alt="target少mapper的xml文件" title>                </div>                <div class="image-caption">target少mapper的xml文件</div>            </figure><p>我想到了两种解决方案：</p><ul><li>方案一：自定义一个插件，绑定某个生命周期，比如compile，然后插件目标的功能是将源码包下的xml文件copy到相应的输出目录。(现有插件是否有已有这个功能，通过简单的配置就能完成？我还不清楚)</li><li>方案二：在maven工程的<code>src/main/resource</code>目录下建和mapper接口类相应的包，将每个mapper.xml存在这里</li></ul><p>这里我插件玩的不熟，所以没办法，只能手动在resources目录下建包，把每个mapper.xml手动粘贴进去</p><p>解决后如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_solve_mapper%E7%9A%84xml%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8resources.png" alt="mapper.xml存在resources下面" title>                </div>                <div class="image-caption">mapper.xml存在resources下面</div>            </figure><h3 id="请求参数乱码问题"><a href="#请求参数乱码问题" class="headerlink" title="请求参数乱码问题"></a>请求参数乱码问题</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81.png" alt="springmcv_post请求参数乱码" title>                </div>                <div class="image-caption">springmcv_post请求参数乱码</div>            </figure><p>在web.xml添加post乱码filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- post乱码过虑器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上可以解决post请求乱码问题。解决后调试如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmcv_post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3.png" alt="springmcv_post请求参数乱码解决" title>                </div>                <div class="image-caption">springmcv_post请求参数乱码解决</div>            </figure><p>对于get请求中文参数出现乱码解决方法有两个：</p><p>修改tomcat配置文件添加编码与工程编码一致，如下：</p><p><code>&lt;Connector URIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></p><p>另外一种方法对参数进行重新编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userName = <span class="keyword">new</span></span><br><span class="line">String(request.getParamter(<span class="string">"userName"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><p>ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</p><h3 id="请求参数类型转换问题"><a href="#请求参数类型转换问题" class="headerlink" title="请求参数类型转换问题"></a>请求参数类型转换问题</h3><p>编写对应的转换类才行,具体参考前面参数绑定的博文<a href="http://blog.csdn.net/h3243212/article/details/50854748#自定义参数绑定实现日期类型绑定" target="_blank" rel="noopener">《 springmvc学习笔记(11)-springmvc注解开发之简单参数绑定》</a></p><h3 id="maven平台编码问题"><a href="#maven平台编码问题" class="headerlink" title="maven平台编码问题"></a>maven平台编码问题</h3><p><code>[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</code></p><p>参考:</p><blockquote><ul><li><a href="http://blog.csdn.net/jinguangliu/article/details/43373203" target="_blank" rel="noopener">CSDN博客</a></li><li><a href="http://maven.apache.org/general.html#encoding-warning" target="_blank" rel="noopener">Maven官网在FAQ</a></li></ul></blockquote><p>解决:</p><p>在pom.xml文件的设置编码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;  </span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  </span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><h3 id="json格式数据问题"><a href="#json格式数据问题" class="headerlink" title="json格式数据问题"></a>json格式数据问题</h3><ul><li>1.请求是json格式</li></ul><p>debug窗里报下面的错误：</p><p><code>org.springframework.web.HttpMediaTypeNotSupportedException: Content type &#39;application/json;charset=UTF-8&#39; not supported</code></p><p>浏览器报下面的错误：</p><p><code>HTTP Status 415 -</code>and<code>description The server refused this request because the request entity is in a format not supported by the requested resource for the requested method.</code></p><p>2.请求是key/value格式</p><p>debug窗里报下面的错误：</p><p><code>java.lang.IllegalArgumentException: No converter found for return value of type: class com.iot.learnssm.firstssm.po.ItemsCustom</code></p><p>参考stackoverflow的这个链接:</p><blockquote><p><a href="http://stackoverflow.com/questions/32905917/how-to-return-json-data-from-spring-controller-using-responsebody" target="_blank" rel="noopener">How to return JSON data from spring Controller using @ResponseBody</a></p></blockquote><p>多加一个依赖<code>jackson-databind</code>（之前只加了<code>jackson-mapper-asl</code>的依赖， 间接依赖<code>jackson-core-asl</code>，但还不够。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="还没弄懂但不影响运行的问题"><a href="#还没弄懂但不影响运行的问题" class="headerlink" title="还没弄懂但不影响运行的问题"></a>还没弄懂但不影响运行的问题</h2><h3 id="加载spring容器报红"><a href="#加载spring容器报红" class="headerlink" title="加载spring容器报红"></a>加载spring容器报红</h3><ul><li>web.xml节选</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/classes/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_bug_%E5%AE%B9%E5%99%A8%E8%B7%AF%E5%BE%84%E6%8A%A5%E7%BA%A2.png" alt="加载spring容器报红" title>                </div>                <div class="image-caption">加载spring容器报红</div>            </figure><p><code>/classes/spring/applicationContext-*.xml</code>这部分字会报红，但运行起来没问题。我使用下面的那句<code>&lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;</code>不报红.原因不清楚。</p><p>这里两种方式都能跑通，但是引用的路径不同:一个是引用的的输出的target目录的classes下的，一个是引用输出的<code>target/learnssm-firstssm-1.0-SNAPSHOT</code>目录(相当于部署的WEBROOT或者叫做webapp)，所以我觉得还是用WEB-INF下面那个更好</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_solve_%E5%AE%B9%E5%99%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%89%E7%94%A8.png" alt="容器加载文件的选用" title>                </div>                <div class="image-caption">容器加载文件的选用</div>            </figure><h3 id="参数绑定配置问题"><a href="#参数绑定配置问题" class="headerlink" title="参数绑定配置问题"></a>参数绑定配置问题</h3><p>在自定义参数绑定时，spring.xml的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义参数绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 日期类型转换 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.controller.converter.CustomDateConverter"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>&lt;list&gt;</code>标签会报红，但不影响运行。去掉<code>&lt;list&gt;</code>标签，也可以运行成功。原因我还不知道，以后阅读源码会研究下这个问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_bug_%E8%BD%AC%E6%8D%A2%E5%99%A8list%E6%8A%A5%E7%BA%A2.png" alt="转换器list报红" title>                </div>                <div class="image-caption">转换器list报红</div>            </figure><h3 id="maven依赖分析问题"><a href="#maven依赖分析问题" class="headerlink" title="maven依赖分析问题"></a>maven依赖分析问题</h3><p>输入<code>mvn  dependency:analyze</code>进行依赖分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-dependency-plugin:2.8:analyze (default-cli) @ learnssm-firstssm ---</span><br><span class="line">[WARNING] Used undeclared dependencies found:</span><br><span class="line">[WARNING]    org.springframework:spring-context:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-web:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-beans:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING] Unused declared dependencies found:</span><br><span class="line">[WARNING]    org.springframework:spring-orm:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-aspects:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-test:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-jdbc:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    mysql:mysql-connector-java:jar:5.1.38:compile</span><br><span class="line">[WARNING]    org.mybatis:mybatis-spring:jar:1.2.4:compile</span><br><span class="line">[WARNING]    log4j:log4j:jar:1.2.17:compile</span><br><span class="line">[WARNING]    org.slf4j:slf4j-api:jar:1.7.18:compile</span><br><span class="line">[WARNING]    commons-dbcp:commons-dbcp:jar:1.4:compile</span><br><span class="line">[WARNING]    javax.servlet:jstl:jar:1.2:compile</span><br><span class="line">[WARNING]    taglibs:standard:jar:1.1.2:compile</span><br><span class="line">[WARNING]    org.hibernate:hibernate-validator:jar:5.2.4.Final:compile</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 3.294 s</span><br><span class="line">[INFO] Finished at: 2016-03-06T16:35:23+08:00</span><br><span class="line">[INFO] Final Memory: 16M/164M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看到里面有:</p><ul><li><code>Used undeclared dependencies found:</code></li><li><code>Unused declared dependencies found:</code></li></ul><p>当时为了解决缺包的问题，看到相关的spring-xxx包就加进去了，具体相互之间的依赖关系也没搞清楚，等我以后阅读spring源码再慢慢改好了。反正多引比少引好点，起码不会报错，顶多工程冗余点。</p><p>至于说使用了未声明的包就不知道为啥了，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[WARNING]    org.springframework:spring-context:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-web:jar:4.2.4.RELEASE:compile</span><br><span class="line">[WARNING]    org.springframework:spring-beans:jar:4.2.4.RELEASE:compile</span><br></pre></td></tr></table></figure><p>都被<code>org.springframework:spring-webmvc:jar:4.2.4.RELEASE:compile</code>依赖，这点可以从依赖树看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ learnssm-firstssm ---</span><br><span class="line">[INFO] com.iot.learnssm:learnssm-firstssm:war:1.0-SNAPSHOT</span><br><span class="line">[INFO] +- org.springframework:spring-webmvc:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-beans:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-context:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  \- org.springframework:spring-aop:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  |     \- aopalliance:aopalliance:jar:1.0:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-expression:jar:4.2.4.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.springframework:spring-web:jar:4.2.4.RELEASE:compile</span><br></pre></td></tr></table></figure><p>总之，上面未解决的问题，我会留意，如果有大神指导原因，请不吝赐教。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录springmvc整合mybatis整合过程中遇到的各种问题和解决方法&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="总结" scheme="https://brianway.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="debug" scheme="https://brianway.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(20)-拦截器</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-20-interceptor/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-20-interceptor/</id>
    <published>2016-03-29T22:28:20.000Z</published>
    <updated>2019-04-07T16:16:59.816Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍springmvc中的拦截器，包括拦截器定义和的配置，然后演示了一个链式拦截的测试示例，最后通过一个登录认证的例子展示了拦截器的应用</p><a id="more"></a><h2 id="拦截定义"><a href="#拦截定义" class="headerlink" title="拦截定义"></a>拦截定义</h2><p>定义拦截器，实现<code>HandlerInterceptor</code>接口。接口中提供三个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">    <span class="comment">//进入 Handler方法之前执行</span></span><br><span class="line">    <span class="comment">//用于身份认证、身份授权</span></span><br><span class="line">    <span class="comment">//比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return false表示拦截，不向下执行</span></span><br><span class="line">        <span class="comment">//return true表示放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入Handler方法之后，返回modelAndView之前执行</span></span><br><span class="line">    <span class="comment">//应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行Handler完成执行此方法</span></span><br><span class="line">    <span class="comment">//应用场景：统一异常处理，统一日志处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以从名称和参数看出各个接口的顺序和作用:</p><ul><li><code>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception</code><ul><li>参数最少，只有三个</li><li>进入 Handler方法之前执行</li><li>用于身份认证、身份授权。比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</li></ul></li><li><code>public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception</code><ul><li>多了一个modelAndView参数</li><li>进入Handler方法之后，返回modelAndView之前执行</li><li>应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</li></ul></li><li><code>public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception</code><ul><li>多了一个Exception的类型的参数</li><li>执行Handler完成执行此方法</li><li>应用场景：统一异常处理，统一日志处理</li></ul></li></ul><h2 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h2><h3 id="针对HandlerMapping配置"><a href="#针对HandlerMapping配置" class="headerlink" title="针对HandlerMapping配置"></a>针对HandlerMapping配置</h3><p>springmvc拦截器针对HandlerMapping进行拦截设置，如果在某个HandlerMapping中配置拦截，经过该HandlerMapping映射成功的handler最终使用该拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptors"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>一般不推荐使用。</p><h3 id="类似全局的拦截器"><a href="#类似全局的拦截器" class="headerlink" title="类似全局的拦截器"></a>类似全局的拦截器</h3><p>springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多个拦截器,顺序执行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /**表示所有url包括子url路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.interceptor.HandlerInterceptor1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.interceptor.HandlerInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截测试"><a href="#拦截测试" class="headerlink" title="拦截测试"></a>拦截测试</h2><p>测试多个拦截器各个方法执行时机</p><p>访问<code>/items/queryItems.action</code></p><ul><li>1.两个拦截器都放行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [http-apr-8080-exec-1] - DispatcherServlet with name &apos;springmvc&apos; processing GET request for [/ssm1/items/queryItems.action]</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Looking up handler method for path /items/queryItems.action</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Returning handler method [public org.springframework.web.servlet.ModelAndView com.iot.learnssm.firstssm.controller.ItemsController.queryItems(javax.servlet.http.HttpServletRequest,com.iot.learnssm.firstssm.po.ItemsQueryVo) throws java.lang.Exception]</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Returning cached instance of singleton bean &apos;itemsController&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Last-Modified value for [/ssm1/items/queryItems.action] is: -1</span><br><span class="line">HandlerInterceptor1...preHandle</span><br><span class="line">HandlerInterceptor2...preHandle</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Fetching JDBC Connection from DataSource</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Registering transaction synchronization for JDBC Connection</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Returning JDBC Connection to DataSource</span><br><span class="line">HandlerInterceptor2...postHandle</span><br><span class="line">HandlerInterceptor1...postHandle</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Rendering view [org.springframework.web.servlet.view.JstlView: name &apos;items/itemsList&apos;; URL [/WEB-INF/jsp/items/itemsList.jsp]] in DispatcherServlet with name &apos;springmvc&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Added model object &apos;itemtypes&apos; of type [java.util.HashMap] to request in view with name &apos;items/itemsList&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Added model object &apos;itemsQueryVo&apos; of type [com.iot.learnssm.firstssm.po.ItemsQueryVo] to request in view with name &apos;items/itemsList&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Added model object &apos;org.springframework.validation.BindingResult.itemsQueryVo&apos; of type [org.springframework.validation.BeanPropertyBindingResult] to request in view with name &apos;items/itemsList&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Added model object &apos;itemsList&apos; of type [java.util.ArrayList] to request in view with name &apos;items/itemsList&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Forwarding to resource [/WEB-INF/jsp/items/itemsList.jsp] in InternalResourceView &apos;items/itemsList&apos;</span><br><span class="line">HandlerInterceptor2...afterCompletion</span><br><span class="line">HandlerInterceptor1...afterCompletion</span><br><span class="line">DEBUG [http-apr-8080-exec-1] - Successfully completed request</span><br></pre></td></tr></table></figure><p>总结：preHandle方法按顺序执行，postHandle和afterCompletion按拦截器配置的逆向顺序执行。</p><p>2.拦截器1放行，拦截器2不放行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [http-apr-8080-exec-8] - DispatcherServlet with name &apos;springmvc&apos; processing GET request for [/ssm1/items/queryItems.action]</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Looking up handler method for path /items/queryItems.action</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Returning handler method [public org.springframework.web.servlet.ModelAndView com.iot.learnssm.firstssm.controller.ItemsController.queryItems(javax.servlet.http.HttpServletRequest,com.iot.learnssm.firstssm.po.ItemsQueryVo) throws java.lang.Exception]</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Returning cached instance of singleton bean &apos;itemsController&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Last-Modified value for [/ssm1/items/queryItems.action] is: -1</span><br><span class="line">HandlerInterceptor1...preHandle</span><br><span class="line">HandlerInterceptor2...preHandle</span><br><span class="line">HandlerInterceptor1...afterCompletion</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Successfully completed request</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>拦截器1放行，拦截器2 preHandle才会执行。</li><li>拦截器2 preHandle不放行，拦截器2 postHandle和afterCompletion不会执行。</li><li>只要有一个拦截器不放行，postHandle不会执行。</li></ul><p>3.两个拦截器都不放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [http-apr-8080-exec-9] - DispatcherServlet with name &apos;springmvc&apos; processing GET request for [/ssm1/items/queryItems.action]</span><br><span class="line">DEBUG [http-apr-8080-exec-9] - Looking up handler method for path /items/queryItems.action</span><br><span class="line">DEBUG [http-apr-8080-exec-9] - Returning handler method [public org.springframework.web.servlet.ModelAndView com.iot.learnssm.firstssm.controller.ItemsController.queryItems(javax.servlet.http.HttpServletRequest,com.iot.learnssm.firstssm.po.ItemsQueryVo) throws java.lang.Exception]</span><br><span class="line">DEBUG [http-apr-8080-exec-9] - Returning cached instance of singleton bean &apos;itemsController&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-9] - Last-Modified value for [/ssm1/items/queryItems.action] is: -1</span><br><span class="line">HandlerInterceptor1...preHandle</span><br><span class="line">DEBUG [http-apr-8080-exec-9] - Successfully completed request</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>拦截器1 preHandle不放行，postHandle和afterCompletion不会执行。</li><li>拦截器1 preHandle不放行，拦截器2不执行。</li></ul><p>4.拦截器1不放行，拦截器2放行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [http-apr-8080-exec-8] - DispatcherServlet with name &apos;springmvc&apos; processing GET request for [/ssm1/items/queryItems.action]</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Looking up handler method for path /items/queryItems.action</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Returning handler method [public org.springframework.web.servlet.ModelAndView com.iot.learnssm.firstssm.controller.ItemsController.queryItems(javax.servlet.http.HttpServletRequest,com.iot.learnssm.firstssm.po.ItemsQueryVo) throws java.lang.Exception]</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Returning cached instance of singleton bean &apos;itemsController&apos;</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Last-Modified value for [/ssm1/items/queryItems.action] is: -1</span><br><span class="line">HandlerInterceptor1...preHandle</span><br><span class="line">DEBUG [http-apr-8080-exec-8] - Successfully completed request</span><br></pre></td></tr></table></figure><p>和两个拦截器都不行的结果一致，因为拦截器1先执行，没放行</p><ul><li>小结</li></ul><p>根据测试结果，对拦截器应用。</p><p>比如：统一日志处理拦截器，需要该拦截器preHandle一定要放行，且将它放在拦截器链接中第一个位置。</p><p>比如：登陆认证拦截器，放在拦截器链接中第一个位置。权限校验拦截器，放在登陆认证拦截器之后。（因为登陆通过后才校验权限，当然登录认证拦截器要放在统一日志处理拦截器后面）</p><h2 id="拦截器应用-实现登陆认证"><a href="#拦截器应用-实现登陆认证" class="headerlink" title="拦截器应用(实现登陆认证)"></a>拦截器应用(实现登陆认证)</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li>1.用户请求url</li><li>2.拦截器进行拦截校验<ul><li>如果请求的url是公开地址（无需登陆即可访问的url），让放行</li><li>如果用户session 不存在跳转到登陆页面</li><li>如果用户session存在放行，继续操作。</li></ul></li></ul><h3 id="登陆controller方法"><a href="#登陆controller方法" class="headerlink" title="登陆controller方法"></a>登陆controller方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 登陆</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用service进行用户身份验证</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在session中保存用户身份信息</span></span><br><span class="line">        session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">        <span class="comment">// 重定向到商品列表页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/items/queryItems.action"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向到商品列表页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/items/queryItems.action"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登陆认证拦截实现"><a href="#登陆认证拦截实现" class="headerlink" title="登陆认证拦截实现"></a>登陆认证拦截实现</h3><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/3/8.</span></span><br><span class="line"><span class="comment"> * 登陆认证拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入 Handler方法之前执行</span></span><br><span class="line">    <span class="comment">//用于身份认证、身份授权</span></span><br><span class="line">    <span class="comment">//比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求的url</span></span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line">        <span class="comment">//判断url是否是公开 地址（实际使用时将公开 地址配置配置文件中）</span></span><br><span class="line">        <span class="comment">//这里公开地址是登陆提交的地址</span></span><br><span class="line">        <span class="keyword">if</span>(url.indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//如果进行登陆提交，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断session</span></span><br><span class="line">        HttpSession session  = request.getSession();</span><br><span class="line">        <span class="comment">//从session中取出用户身份信息</span></span><br><span class="line">        String username = (String) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//身份存在，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行这里表示用户身份需要认证，跳转登陆页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return false表示拦截，不向下执行</span></span><br><span class="line">        <span class="comment">//return true表示放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入Handler方法之后，返回modelAndView之前执行</span></span><br><span class="line">    <span class="comment">//应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginInterceptor...postHandle"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行Handler完成执行此方法</span></span><br><span class="line">    <span class="comment">//应用场景：统一异常处理，统一日志处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginInterceptor...afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拦截器配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多个拦截器,顺序执行 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登陆认证拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...省略</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍springmvc中的拦截器，包括拦截器定义和的配置，然后演示了一个链式拦截的测试示例，最后通过一个登录认证的例子展示了拦截器的应用&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(19)-RESTful支持</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-19-RESTful-support/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-19-RESTful-support/</id>
    <published>2016-03-29T22:28:19.000Z</published>
    <updated>2019-04-07T16:16:59.945Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍RESTful的概念，并通过一个小例子展示如何编写RESTful风格的controller和配置前端控制器，最后展示静态资源的解析</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先附上两篇博客链接</p><blockquote><ul><li><a href="http://zqpythonic.qiniucdn.com/data/20110912210739/index.html" target="_blank" rel="noopener">理解RESTful架构 - 阮一峰的网络日志</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南- 阮一峰的网络日志</a></li></ul></blockquote><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>RESTful（即Representational State Transfer的缩写）其实是一个开发理念，是对http的很好的诠释。</p><p>1.对url进行规范，写RESTful格式的url</p><ul><li>非REST的url：<code>http://...../queryItems.action?id=001&amp;type=T01</code></li><li>REST的url风格：<code>http://..../items/001</code></li></ul><p>特点：url简洁，将参数通过url传到服务端</p><p>2.http的方法规范</p><p>不管是删除、添加、更新，等等。使用url是一致的，如果进行删除，需要设置http的方法为delete，其他同理。</p><p>后台controller方法：判断http方法，如果是delete执行删除，如果是post执行添加。</p><p>3.对http的contentType规范</p><p>请求时指定contentType，要json数据，设置成json格式的type。</p><h2 id="REST的例子"><a href="#REST的例子" class="headerlink" title="REST的例子"></a>REST的例子</h2><p>查询商品信息，返回json数据。</p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>定义方法，进行url映射使用REST风格的url，将查询商品信息的id传入controller .</p><p>输出json使用<code>@ResponseBody</code>将java对象输出json。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询商品信息，输出json</span></span><br><span class="line"><span class="comment">//itemsView/&#123;id&#125;里边的&#123;id&#125;表示占位符，通过@PathVariable获取占位符中的参数，</span></span><br><span class="line"><span class="comment">//@PathVariable中名称要和占位符一致，形参名无需和其一致</span></span><br><span class="line"><span class="comment">//如果占位符中的名称和形参名一致，在@PathVariable可以不指定名称</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemsView/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">ItemsCustom <span class="title">itemsView</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer items_id)<span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用service查询商品信息</span></span><br><span class="line">    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> itemsCustom;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RequestMapping(value=&quot;/ itemsView/{id}&quot;)</code>：<code>{×××}</code>占位符，请求的URL可以是<code>/viewItems/1</code>或<code>/viewItems/2</code>，通过在方法中使用<code>@PathVariable</code>获取{×××}中的×××变量。<code>@PathVariable</code>用于将请求URL中的模板变量映射到功能处理方法的参数上。</p><p>如果<code>@RequestMapping</code>中表示为<code>/itemsView/{id}</code>，id和形参名称一致，<code>@PathVariable</code>不用指定名称。</p><h3 id="REST方法的前端控制器配置"><a href="#REST方法的前端控制器配置" class="headerlink" title="REST方法的前端控制器配置"></a>REST方法的前端控制器配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc前端控制器，rest配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc_rest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc_rest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问结果如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_RESTful%E6%A0%BC%E5%BC%8F%E8%AE%BF%E9%97%AE.png" alt="RESTful格式访问" title>                </div>                <div class="image-caption">RESTful格式访问</div>            </figure><h2 id="对静态资源的解析"><a href="#对静态资源的解析" class="headerlink" title="对静态资源的解析"></a>对静态资源的解析</h2><p>配置前端控制器的url-parttern中指定<code>/</code>，对静态资源的解析会出现问题，报404错误。</p><p>在springmvc.xml中添加静态资源解析方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态资源解析</span></span><br><span class="line"><span class="comment">    包括 ：js、css、img、..</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这时访问<code>http://localhost:8080/ssm1/js/jquery-1.4.4.min.js</code>，可以在浏览器中看到js的内容</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍RESTful的概念，并通过一个小例子展示如何编写RESTful风格的controller和配置前端控制器，最后展示静态资源的解析&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="RESTful" scheme="https://brianway.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(18)-json数据交互</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-18-json-interaction/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-18-json-interaction/</id>
    <published>2016-03-29T22:28:18.000Z</published>
    <updated>2019-04-07T16:16:59.907Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互</p><a id="more"></a><h2 id="springmvc进行json交互"><a href="#springmvc进行json交互" class="headerlink" title="springmvc进行json交互"></a>springmvc进行json交互</h2><p>json数据格式在接口调用中、html页面中较常用，json格式比较简单，解析还比较方便。</p><p>比如：webservice接口，传输json数据.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json%E4%BA%A4%E4%BA%92.png" alt="json交互" title>                </div>                <div class="image-caption">json交互</div>            </figure><ul><li>请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。</li><li>请求key/value、输出json。此方法比较常用。</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="添加json转换的依赖"><a href="#添加json转换的依赖" class="headerlink" title="添加json转换的依赖"></a>添加json转换的依赖</h3><p>最开始我少了<code>jackson-databind</code>依赖，程序各种报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- json 转换--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看依赖树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.2:compile</span><br><span class="line">[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile</span><br><span class="line">[INFO] |  \- com.fasterxml.jackson.core:jackson-core:jar:2.7.2:compile</span><br><span class="line">[INFO] \- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile</span><br><span class="line">[INFO]    \- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile</span><br></pre></td></tr></table></figure><h3 id="配置json转换器"><a href="#配置json转换器" class="headerlink" title="配置json转换器"></a>配置json转换器</h3><p>在注解适配器中加入<code>messageConverters</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果使用<code>&lt;mvc:annotation-driven /&gt;</code>则不用定义上边的内容。</strong></p><h2 id="json交互测试"><a href="#json交互测试" class="headerlink" title="json交互测试"></a>json交互测试</h2><p>显示两个按钮分别测试</p><ul><li>jsp页面</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: brian</span><br><span class="line">  Date: <span class="number">2016</span>/<span class="number">3</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">49</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;json交互测试&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="comment">//请求json，输出是json</span></span><br><span class="line">        <span class="function">function <span class="title">requestJson</span><span class="params">()</span></span>&#123;     省略    &#125;</span><br><span class="line">        <span class="comment">//请求key/value，输出是json</span></span><br><span class="line">        <span class="function">function <span class="title">responseJson</span><span class="params">()</span></span>&#123;    省略    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"requestJson()"</span> value=<span class="string">"请求json，输出是json"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"responseJson()"</span> value=<span class="string">"请求key/value，输出是json"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonTest</span> </span>&#123;</span><br><span class="line">    省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><h3 id="输入json串，输出是json串"><a href="#输入json串，输出是json串" class="headerlink" title="输入json串，输出是json串"></a>输入json串，输出是json串</h3><p>使用jquery的ajax提交json串，对输出的json结果进行解析。</p><ul><li>jsp页面</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求json，输出是json</span></span><br><span class="line"><span class="function">function <span class="title">requestJson</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:<span class="string">'post'</span>,</span><br><span class="line">        url:<span class="string">'$&#123;pageContext.request.contextPath &#125;/requestJson.action'</span>,</span><br><span class="line">        contentType:<span class="string">'application/json;charset=utf-8'</span>,</span><br><span class="line">        <span class="comment">//数据格式是json串，商品信息</span></span><br><span class="line">        data:<span class="string">'&#123;"name":"手机","price":999&#125;'</span>,</span><br><span class="line">        success:function(data)&#123;<span class="comment">//返回json结果</span></span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//请求json串(商品信息)，输出json(商品信息)</span></span><br><span class="line"><span class="comment">//@RequestBody将请求的商品信息的json串转成itemsCustom对象</span></span><br><span class="line"><span class="comment">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/requestJson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">ItemsCustom <span class="title">requestJson</span><span class="params">(@RequestBody ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class="line">    <span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-1.png" alt="请求json，返回json" title>                </div>                <div class="image-caption">请求json，返回json</div>            </figure><p>可以看到，request和response的HTTP头的Content-Type都是<code>application/json;charset=utf-8</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-2.png" alt="请求json，返回json,response的body" title>                </div>                <div class="image-caption">请求json，返回json,response的body</div>            </figure><h3 id="输入key-value，输出是json串"><a href="#输入key-value，输出是json串" class="headerlink" title="输入key/value，输出是json串"></a>输入key/value，输出是json串</h3><p>使用jquery的ajax提交key/value串，对输出的json结果进行解析</p><ul><li>jsp页面</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求key/value，输出是json</span></span><br><span class="line"><span class="function">function <span class="title">responseJson</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:<span class="string">'post'</span>,</span><br><span class="line">        url:<span class="string">'$&#123;pageContext.request.contextPath &#125;/responseJson.action'</span>,</span><br><span class="line">        <span class="comment">//请求是key/value这里不需要指定contentType，因为默认就 是key/value类型</span></span><br><span class="line">        <span class="comment">//contentType:'application/json;charset=utf-8',</span></span><br><span class="line">        <span class="comment">//数据格式是json串，商品信息</span></span><br><span class="line">        data:<span class="string">'name=手机&amp;price=999'</span>,</span><br><span class="line">        success:function(data)&#123;<span class="comment">//返回json结果</span></span><br><span class="line">            alert(data.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//请求key/value，输出json</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/responseJson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">ItemsCustom <span class="title">responseJson</span><span class="params">(ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class="line">    <span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-keyvalue-1.png" alt="请求key/value,返回json" title>                </div>                <div class="image-caption">请求key/value,返回json</div>            </figure><p>可以看到，key/value键值对的默认Content-Type是<code>application/x-www-form-urlencoded</code>,同时，我们收到了响应“手机”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="JSON" scheme="https://brianway.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(17)-上传图片</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-17-picture-upload/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-17-picture-upload/</id>
    <published>2016-03-29T22:28:17.000Z</published>
    <updated>2019-04-07T16:16:59.879Z</updated>
    
    <content type="html"><![CDATA[<p>本文展示如何在springmvc中上传图片</p><a id="more"></a><h2 id="springmvc中对多部件类型解析"><a href="#springmvc中对多部件类型解析" class="headerlink" title="springmvc中对多部件类型解析"></a>springmvc中对多部件类型解析</h2><p>在修改商品页面，添加上传商品图片功能。</p><p>在页面form中提交<code>enctype=&quot;multipart/form-data&quot;</code>的数据时，需要springmvc对multipart类型的数据进行解析。</p><p>在springmvc.xml中配置multipart类型解析器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加入上传图片的jar"><a href="#加入上传图片的jar" class="headerlink" title="加入上传图片的jar"></a>加入上传图片的jar</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] \- commons-fileupload:commons-fileupload:jar:1.3.1:compile</span><br><span class="line">[INFO]    \- commons-io:commons-io:jar:2.2:compile</span><br></pre></td></tr></table></figure><p>可以看到，其实还间接依赖了<code>commons-io:commons-io:jar</code></p><h2 id="创建图片虚拟目录存储图片"><a href="#创建图片虚拟目录存储图片" class="headerlink" title="创建图片虚拟目录存储图片"></a>创建图片虚拟目录存储图片</h2><p>参考我之前的博文</p><blockquote><p><a href="http://blog.csdn.net/h3243212/article/details/50819218" target="_blank" rel="noopener">在intellij IDEA中为web应用创建图片虚拟目录(详细截图)</a></p></blockquote><p>也可以直接修改tomcat的配置,在conf/server.xml文件，添加虚拟目录.</p><p>注意：在图片虚拟目录中，一定将图片目录分级创建（提高i/o性能），一般我们采用按日期(年、月、日)进行分级创建。</p><h2 id="上传图片代码"><a href="#上传图片代码" class="headerlink" title="上传图片代码"></a>上传图片代码</h2><ul><li>页面</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品图片&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;items.pic !=null&#125;"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"/pic/$&#123;items.pic&#125;"</span> width=<span class="number">100</span> height=<span class="number">100</span>/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;input type=<span class="string">"file"</span>  name=<span class="string">"items_pic"</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><ul><li>controller方法</li></ul><p>修改：商品修改controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemsSubmit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">editItemsSubmit</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">            @ModelAttribute(<span class="string">"items"</span>)</span></span></span><br><span class="line"><span class="function">            @<span class="title">Validated</span><span class="params">(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class="line"><span class="function">            BindingResult bindingResult,</span></span><br><span class="line"><span class="function">            MultipartFile items_pic</span></span><br><span class="line"><span class="function">    )<span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//原始名称</span></span><br><span class="line">String originalFilename = items_pic.getOriginalFilename();</span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line"><span class="keyword">if</span>(items_pic!=<span class="keyword">null</span> &amp;&amp; originalFilename!=<span class="keyword">null</span> &amp;&amp; originalFilename.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储图片的物理路径</span></span><br><span class="line">    String pic_path = <span class="string">"D:\\tmp\\"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新的图片名称</span></span><br><span class="line">    String newFileName = UUID.randomUUID() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//新图片</span></span><br><span class="line">    File newFile = <span class="keyword">new</span> File(pic_path+newFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将内存中的数据写入磁盘</span></span><br><span class="line">    items_pic.transferTo(newFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将新图片名称写到itemsCustom中</span></span><br><span class="line">    itemsCustom.setPic(newFileName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文展示如何在springmvc中上传图片&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(16)-异常处理器</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-16-exception/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-16-exception/</id>
    <published>2016-03-29T22:28:16.000Z</published>
    <updated>2019-04-07T16:16:59.851Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置</p><a id="more"></a><h2 id="异常处理思路"><a href="#异常处理思路" class="headerlink" title="异常处理思路"></a>异常处理思路</h2><p>系统中异常包括两类：</p><ul><li>预期异常</li><li>运行时异常RuntimeException</li></ul><p>前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p><p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="springmvc异常处理" title>                </div>                <div class="image-caption">springmvc异常处理</div>            </figure><p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。</p><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p>对不同的异常类型定义异常类，继承Exception。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.learnssm.firstssm.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/3/7.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span>  <span class="keyword">extends</span>  <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//异常信息</span></span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h2><p>思路：</p><p>系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。</p><p>全局异常处理器处理思路：</p><p>解析出异常类型</p><ul><li>如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示</li><li>如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</li></ul><p>springmvc提供一个<code>HandlerExceptionResolver</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//handler就是处理器适配器要执行Handler对象（只有method）</span></span><br><span class="line">        <span class="comment">//解析出异常类型</span></span><br><span class="line">        <span class="comment">//如果该 异常类型是系统 自定义的异常，直接取出异常信息，在错误页面展示</span></span><br><span class="line">        <span class="comment">//String message = null;</span></span><br><span class="line">        <span class="comment">//if(ex instanceof CustomException)&#123;</span></span><br><span class="line"><span class="comment">//message = ((CustomException)ex).getMessage();</span></span><br><span class="line">        <span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">////如果该 异常类型不是系统 自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</span></span><br><span class="line"><span class="comment">//message="未知错误";</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上边代码变为</span></span><br><span class="line">        CustomException customException;</span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> CustomException)&#123;</span><br><span class="line">            customException = (CustomException)ex;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            customException = <span class="keyword">new</span> CustomException(<span class="string">"未知错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误信息</span></span><br><span class="line">        String message = customException.getMessage();</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将错误信息传到页面</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"message"</span>, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指向错误页面</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Brian</span><br><span class="line">  Date: <span class="number">2016</span>/<span class="number">3</span>/<span class="number">4</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">51</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;错误提示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;message&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="在springmvc-xml配置全局异常处理器"><a href="#在springmvc-xml配置全局异常处理器" class="headerlink" title="在springmvc.xml配置全局异常处理器"></a>在springmvc.xml配置全局异常处理器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局异常处理器</span></span><br><span class="line"><span class="comment">只要实现HandlerExceptionResolver接口就是全局异常处理器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.exception.CustomExceptionResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局异常处理器只有一个，配置多个也没用。</p><h2 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h2><p>在controller、service、dao中任意一处需要手动抛出异常。如果是程序中手动抛出的异常，在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。</p><ul><li>在商品修改的controller方法中抛出异常 .</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItems</span><span class="params">(Model model,@RequestParam(value=<span class="string">"id"</span>,required=<span class="keyword">true</span>)</span> Integer items_id)<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用service根据商品id查询商品信息</span></span><br><span class="line">    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断商品是否为空，根据id没有查询到商品，抛出异常，提示用户商品信息不存在</span></span><br><span class="line">    <span class="keyword">if</span>(itemsCustom == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"修改的商品信息不存在!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过形参中的model将model数据传到页面</span></span><br><span class="line">    <span class="comment">//相当于modelAndView.addObject方法</span></span><br><span class="line">    model.addAttribute(<span class="string">"items"</span>, itemsCustom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"items/editItems"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在service接口中抛出异常：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ItemsCustom <span class="title">findItemsById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class="line">    <span class="keyword">if</span>(items==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"修改的商品信息不存在!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中间对商品信息进行业务处理</span></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="comment">//返回ItemsCustom</span></span><br><span class="line">    ItemsCustom itemsCustom = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//将items的属性值拷贝到itemsCustom</span></span><br><span class="line">    <span class="keyword">if</span>(items!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        itemsCustom = <span class="keyword">new</span> ItemsCustom();</span><br><span class="line">        BeanUtils.copyProperties(items, itemsCustom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果与业务功能相关的异常，建议在service中抛出异常。</li><li>与业务功能没有关系的异常，建议在controller中抛出。</li></ul><p>上边的功能，建议在service中抛出异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(15)-数据回显</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-15-data-echo/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-15-data-echo/</id>
    <published>2016-03-29T22:28:15.000Z</published>
    <updated>2019-04-07T16:16:59.925Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍springmvc中数据回显的几种实现方法</p><a id="more"></a><p>数据回显：提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。</p><h2 id="pojo数据回显方法"><a href="#pojo数据回显方法" class="headerlink" title="pojo数据回显方法"></a>pojo数据回显方法</h2><p>1.springmvc默认对pojo数据进行回显。</p><p><strong>pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</strong></p><p>使用<code>@ModelAttribute</code>指定pojo回显到页面在request中的key</p><p>2.<code>@ModelAttribute</code>还可以将方法的返回值传到页面</p><p>在商品查询列表页面，通过商品类型查询商品信息。在controller中定义商品类型查询方法，最终将商品类型传到页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 商品分类</span></span><br><span class="line"><span class="comment">//itemtypes表示最终将方法返回值放在request中的key</span></span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"itemtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getItemTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; itemTypes = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    itemTypes.put(<span class="string">"101"</span>, <span class="string">"数码"</span>);</span><br><span class="line">    itemTypes.put(<span class="string">"102"</span>, <span class="string">"母婴"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> itemTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面上可以得到itemTypes数据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    商品名称：&lt;input name=<span class="string">"itemsCustom.name"</span> /&gt;</span><br><span class="line">    商品类型：</span><br><span class="line">    &lt;select name=<span class="string">"itemtype"</span>&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"$&#123;itemtypes&#125;"</span> <span class="keyword">var</span>=<span class="string">"itemtype"</span>&gt;</span><br><span class="line">            &lt;option value="$&#123;itemtype.key &#125;"&gt;$&#123;itemtype.value &#125;&lt;/option&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>3.使用最简单方法使用model，可以不用<code>@ModelAttribute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以直接使用model将提交pojo回显到页面</span></span><br><span class="line"><span class="comment">//model.addAttribute("items", itemsCustom);</span></span><br></pre></td></tr></table></figure><h2 id="简单类型数据回显"><a href="#简单类型数据回显" class="headerlink" title="简单类型数据回显"></a>简单类型数据回显</h2><p>使用最简单方法使用model</p><p><code>model.addAttribute(&quot;id&quot;, id);</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍springmvc中数据回显的几种实现方法&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(14)-springmvc校验</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-14-validation/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-14-validation/</id>
    <published>2016-03-29T22:28:14.000Z</published>
    <updated>2019-04-07T16:16:59.960Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。</p><a id="more"></a><h2 id="校验理解"><a href="#校验理解" class="headerlink" title="校验理解"></a>校验理解</h2><p>项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。</p><p>服务端校验：</p><ul><li>控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）</li><li>业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。</li><li>持久层dao：一般是不校验的。</li></ul><h2 id="springmvc校验需求"><a href="#springmvc校验需求" class="headerlink" title="springmvc校验需求"></a>springmvc校验需求</h2><p>springmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。</p><p>校验思路：</p><p>页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。</p><p>具体需求：</p><p>商品修改，添加校验（校验商品名称长度，生产日期的非空校验），如果校验出错，在商品修改页面显示错误信息。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>我们需要三个jar包：</p><ul><li>hibernate-validator.jar</li><li>jboss-logging.jar</li><li>validation-api.jar</li></ul><p>这里我们添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hibernate 校验 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看maven依赖树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO] \- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile</span><br><span class="line">[INFO]    +- javax.validation:validation-api:jar:1.1.0.Final:compile</span><br><span class="line">[INFO]    +- org.jboss.logging:jboss-logging:jar:3.2.1.Final:compile</span><br><span class="line">[INFO]    \- com.fasterxml:classmate:jar:1.1.0:compile</span><br></pre></td></tr></table></figure><p>可以看到，另外两个jar包被<code>hibernate-validator</code>依赖，所以不用再额外添加了。</p><h2 id="配置校验器"><a href="#配置校验器" class="headerlink" title="配置校验器"></a>配置校验器</h2><ul><li>在springmvc.xml中添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate校验器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationMessageSource"</span> <span class="attr">ref</span>=<span class="string">"messageSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 校验错误信息配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源文件名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:CustomValidationMessages<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源文件编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncodings"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>校验器注入到处理器适配器中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">validator</span>=<span class="string">"validator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在CustomValidationMessages.properties配置校验错误信息：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#添加校验的错误提示信息</span><br><span class="line">items.name.length.error=请输入1到30个字符的商品名称</span><br><span class="line">items.createtime.isNUll=请输入商品的生产日期</span><br></pre></td></tr></table></figure><h2 id="在pojo中添加校验规则"><a href="#在pojo中添加校验规则" class="headerlink" title="在pojo中添加校验规则"></a>在pojo中添加校验规则</h2><p>在ItemsCustom.java中添加校验规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//校验名称在1到30字符中间</span></span><br><span class="line">    <span class="comment">//message是提示校验出错显示的信息</span></span><br><span class="line">    <span class="comment">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class="line">    <span class="meta">@Size</span>(min=<span class="number">1</span>,max=<span class="number">30</span>,message=<span class="string">"&#123;items.name.length.error&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非空校验</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message=<span class="string">"&#123;items.createtime.isNUll&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br></pre></td></tr></table></figure><h2 id="捕获和显示校验错误信息"><a href="#捕获和显示校验错误信息" class="headerlink" title="捕获和显示校验错误信息"></a>捕获和显示校验错误信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemsSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemsSubmit</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Validated ItemsCustom itemsCustom,</span></span></span><br><span class="line"><span class="function"><span class="params">        BindingResult bindingResult)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure><ul><li>在controller中将错误信息传到页面即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//获取校验错误信息</span><br><span class="line">if(bindingResult.hasErrors())&#123;</span><br><span class="line">    // 输出错误信息</span><br><span class="line">    List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class="line"></span><br><span class="line">    for (ObjectError objectError :allErrors)&#123;</span><br><span class="line">        // 输出错误信息</span><br><span class="line">        System.out.println(objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    // 将错误信息传到页面</span><br><span class="line">    model.addAttribute(&quot;allErrors&quot;, allErrors);</span><br><span class="line"></span><br><span class="line">    //可以直接使用model将提交pojo回显到页面</span><br><span class="line">    model.addAttribute(&quot;items&quot;, itemsCustom);</span><br><span class="line"></span><br><span class="line">    // 出错重新到商品修改页面</span><br><span class="line">    return &quot;items/editItems&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>页面显示错误信息：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 显示错误信息 --&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;allErrors!=null &#125;"</span>&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;allErrors &#125;"</span> <span class="keyword">var</span>=<span class="string">"error"</span>&gt;</span><br><span class="line">$&#123; error.defaultMessage&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><ul><li>需求：<ul><li>在pojo中定义校验规则，而pojo是被多个controller所共用，当不同的controller方法对同一个pojo进行校验，但是每个controller方法需要不同的校验</li></ul></li><li>解决方法：<ul><li>定义多个校验分组（其实是一个java接口），分组中定义有哪些规则</li><li>每个controller方法使用不同的校验分组</li></ul></li></ul><p>1.校验分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidGroup1</span> </span>&#123;</span><br><span class="line"><span class="comment">//接口中不需要定义任何方法，仅是对不同的校验规则进行分组</span></span><br><span class="line"><span class="comment">//此分组只校验商品名称长度</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在校验规则中添加分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验名称在1到30字符中间</span></span><br><span class="line"><span class="comment">//message是提示校验出错显示的信息</span></span><br><span class="line"><span class="comment">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class="line"><span class="meta">@Size</span>(min=<span class="number">1</span>,max=<span class="number">30</span>,message=<span class="string">"&#123;items.name.length.error&#125;"</span>,groups = &#123;ValidGroup1.class&#125;)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>3.在controller方法使用指定分组的校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value=&#123;ValidGroup1.class&#125;指定使用ValidGroup1分组的校验</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemsSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemsSubmit</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Validated(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class="line"><span class="function">        BindingResult bindingResult)<span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(13)-springmvc注解开发之集合类型参数绑定</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-13-annotation-collection-param-binding/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-13-annotation-collection-param-binding/</id>
    <published>2016-03-29T22:28:13.000Z</published>
    <updated>2019-04-07T16:16:59.910Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定</p><a id="more"></a><h2 id="数组绑定"><a href="#数组绑定" class="headerlink" title="数组绑定"></a>数组绑定</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>商品批量删除，用户在页面选择多个商品，批量删除。</p><h3 id="表现层实现"><a href="#表现层实现" class="headerlink" title="表现层实现"></a>表现层实现</h3><p>关键：将页面选择(多选)的商品id，传到controller方法的形参，方法形参使用数组接收页面请求的多个商品id。</p><ul><li>controller方法定义：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量删除 商品信息</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/deleteItems"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteItems</span><span class="params">(Integer[] items_id)</span> <span class="keyword">throws</span> Exception</span></span><br></pre></td></tr></table></figure><ul><li>页面定义：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;input type="checkbox" name="items_id" value="$&#123;item.id&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;td&gt;&lt;a href="$&#123;pageContext.request.contextPath &#125;/items/editItems.action?id=$&#123;item.id&#125;"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="list绑定"><a href="#list绑定" class="headerlink" title="list绑定"></a>list绑定</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>通常在需要批量提交数据时，将提交的数据绑定到<code>list&lt;pojo&gt;</code>中，比如：成绩录入（录入多门课成绩，批量提交），</p><p>本例子需求：批量商品修改，在页面输入多个商品信息，将多个商品信息提交到controller方法中。</p><h3 id="表现层实现-1"><a href="#表现层实现-1" class="headerlink" title="表现层实现"></a>表现层实现</h3><ul><li>controller方法定义：<ul><li>1、进入批量商品修改页面(页面样式参考商品列表实现)</li><li>2、批量修改商品提交</li></ul></li></ul><p>使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义<code>list&lt;pojo&gt;</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品信息</span></span><br><span class="line">    <span class="keyword">private</span> Items items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class="line">    <span class="keyword">private</span> ItemsCustom itemsCustom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量商品信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ItemsCustom&gt; itemsList;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量修改商品提交</span></span><br><span class="line"><span class="comment">// 通过ItemsQueryVo接收批量提交的商品信息，将商品信息存储到itemsQueryVo中itemsList属性中。</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemsAllSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemsAllSubmit</span><span class="params">(ItemsQueryVo itemsQueryVo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>页面定义：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&lt;input name="itemsList[$&#123;status.index &#125;].name" value="$&#123;item.name &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name="itemsList[$&#123;status.index &#125;].price" value="$&#123;item.price &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name="itemsList[$&#123;status.index &#125;].createtime" value="&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name="itemsList[$&#123;status.index &#125;].detail" value="$&#123;item.detail &#125;"/&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>name的格式：</p><p><strong><code>对应包装pojo中的list类型属性名</code>[<code>下标(从0开始)</code>].<code>包装pojo中List类型的属性中pojo的属性名</code></strong></p><p>例子：</p><p><code>&quot;name=&quot;itemsList[${status.index }].price&quot;</code></p><p><em>可以和包装类型的参数绑定归纳对比一下，其实就是在包装类的pojo基础上多了个下标。只不过包装类参数绑定时，要和包装pojo中的pojo类性的属性名一致，而list参数绑定时，要和包装pojo中的list类型的属性名一致。</em></p><h2 id="map绑定"><a href="#map绑定" class="headerlink" title="map绑定"></a>map绑定</h2><p>也通过在包装pojo中定义map类型属性。</p><p>在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</p><ul><li>包装类中定义Map对象如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; itemInfo = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">  <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>页面定义如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">姓名：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"itemInfo['name']"</span>/&gt;</span><br><span class="line">年龄：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"itemInfo['price']"</span>/&gt;</span><br><span class="line">.. .. ..</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><ul><li>Contrller方法定义如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,QueryVo queryVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(queryVo.getStudentinfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="注解" scheme="https://brianway.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(12)-springmvc注解开发之包装类型参数绑定</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-12-annotation-pack-param-binding/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-12-annotation-pack-param-binding/</id>
    <published>2016-03-29T22:28:12.000Z</published>
    <updated>2019-04-07T16:16:59.834Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍注解开发的介绍包装类型的参数绑定</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>商品查询controller方法中实现商品查询条件传入。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>第一种方法：在形参中添加<code>HttpServletRequest request</code>参数，通过request接收查询条件参数。</li><li>第二种方法：在形参中让包装类型的pojo接收查询条件参数。</li></ul><p>分析：</p><p>页面传参数的特点：复杂，多样性。条件包括：用户账号、商品编号、订单信息。。。</p><p>如果将用户账号、商品编号、订单信息等放在简单pojo（属性是简单类型）中，pojo类属性比较多，比较乱。建议使用包装类型的pojo，pojo中属性是pojo。</p><h2 id="页面参数和controller方法形参定义"><a href="#页面参数和controller方法形参定义" class="headerlink" title="页面参数和controller方法形参定义"></a>页面参数和controller方法形参定义</h2><ul><li>页面参数：</li></ul><p>商品名称：<code>&lt;input name=&quot;itemsCustom.name&quot; /&gt;</code></p><p><strong>注意：itemsCustom和包装pojo中的属性名一致即可。</strong></p><ul><li>controller方法形参：</li></ul><p><code>public ModelAndView queryItems(HttpServletRequest request, ItemsQueryVo itemsQueryVo) throws Exception</code></p><ul><li>包装类ItemsQueryVo中部分属性：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品信息</span></span><br><span class="line">    <span class="keyword">private</span> Items items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class="line">    <span class="keyword">private</span> ItemsCustom itemsCustom;</span><br></pre></td></tr></table></figure><p>可见，<code>ItemsQueryVo</code>中属性<code>itemsCustom</code>和页面参数中一致</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍注解开发的介绍包装类型的参数绑定&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="注解" scheme="https://brianway.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(11)-springmvc注解开发之简单参数绑定</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-11-annotation-simple-param-binding/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-11-annotation-simple-param-binding/</id>
    <published>2016-03-29T22:28:11.000Z</published>
    <updated>2019-04-07T16:16:59.915Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍注解开发的简单参数绑定，包括简单类型、简单pojo以及自定义绑定实现类型转换</p><a id="more"></a><h2 id="spring参数绑定过程"><a href="#spring参数绑定过程" class="headerlink" title="spring参数绑定过程"></a>spring参数绑定过程</h2><p>从客户端请求key/value数据，经过参数绑定，将key/value数据绑定到controller方法的形参上。</p><p>springmvc中，接收页面提交的数据是通过方法形参来接收。而不是在controller类定义成员变更接收！！！！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E8%BF%87%E7%A8%8B.png" alt="参数绑定过程" title>                </div>                <div class="image-caption">参数绑定过程</div>            </figure><h2 id="默认支持的类型"><a href="#默认支持的类型" class="headerlink" title="默认支持的类型"></a>默认支持的类型</h2><p>直接在controller方法形参上定义下边类型的对象，就可以使用这些对象。在参数绑定过程中，如果遇到下边类型直接进行绑定。</p><ul><li><code>HttpServletRequest</code>：通过request对象获取请求信息</li><li><code>HttpServletResponse</code>：通过response处理响应信息</li><li><code>HttpSession</code>：通过session对象得到session中存放的对象</li><li><code>Model/ModelMap</code>：model是一个接口，modelMap是一个接口实现。作用：将model数据填充到request域。</li></ul><h2 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h2><p>通过<code>@RequestParam</code>对简单类型的参数进行绑定。如果不使用<code>@RequestParam</code>，要求request传入参数名称和controller方法的形参名称一致，方可绑定成功。</p><p>如果使用<code>@RequestParam</code>，不用限制request传入参数名称和controller方法的形参名称一致。</p><p>通过required属性指定参数是否必须要传入，如果设置为true，没有传入参数，报下边错误：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%8C%87%E5%AE%9A%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%E6%9C%AA%E4%BC%A0%E5%85%A5%E6%8A%A5%E9%94%99.png" alt="指定传入参数未传入报错" title>                </div>                <div class="image-caption">指定传入参数未传入报错</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/editItems"</span>,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class="line"><span class="comment">//@RequestParam里边指定request传入参数名称和形参进行绑定。</span></span><br><span class="line"><span class="comment">//通过required属性指定参数是否必须要传入</span></span><br><span class="line"><span class="comment">//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItems</span><span class="params">(Model model,@RequestParam(value=<span class="string">"id"</span>,required=<span class="keyword">true</span>)</span> Integer items_id)<span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="pojo绑定"><a href="#pojo绑定" class="headerlink" title="pojo绑定"></a>pojo绑定</h2><p>页面中input的name和controller的pojo形参中的属性名称一致，将页面中数据绑定到pojo。</p><p>注意:这里只是要求name和形参的<strong>属性名</strong>一致，而不是要求和形参的<strong>名称</strong>一致，这点不要混淆了，框架会进入形参内部自动匹配pojo类的属性名。(我没看源码，但应该是用反射实现的)</p><p>页面定义：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="name" value="$&#123;itemsCustom.name &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="price" value="$&#123;itemsCustom.price &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>controller的pojo形参的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br></pre></td></tr></table></figure><h2 id="自定义参数绑定实现日期类型绑定"><a href="#自定义参数绑定实现日期类型绑定" class="headerlink" title="自定义参数绑定实现日期类型绑定"></a>自定义参数绑定实现日期类型绑定</h2><p>对于controller形参中pojo对象，如果属性中有日期类型，需要自定义参数绑定。</p><p>将请求日期数据串传成日期类型，要转换的日期类型和pojo中日期属性的类型保持一致。本文示例中，自定义参数绑定将日期串转成java.util.Date类型。</p><p>需要向处理器适配器中注入自定义的参数绑定组件。</p><ul><li>自定义日期类型绑定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实现 将日期串转成日期类型(格式是yyyy-MM-dd HH:mm:ss)</span></span><br><span class="line"></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//转成直接返回</span></span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果参数绑定失败返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置方式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义参数绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 日期类型转换 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.controller.converter.CustomDateConverter"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springmvc和struts2的区别"><a href="#springmvc和struts2的区别" class="headerlink" title="springmvc和struts2的区别"></a>springmvc和struts2的区别</h2><ul><li>1.springmvc基于方法开发的，struts2基于类开发的。</li></ul><p>springmvc将url和controller方法映射。映射成功后springmvc生成一个Handler对象，对象中只包括了一个method。方法执行结束，形参数据销毁。springmvc的controller开发类似service开发。</p><ul><li><p>2.springmvc可以进行单例开发，并且建议使用单例开发，struts2通过类的成员变量接收参数，无法使用单例，只能使用多例。</p></li><li><p>3.经过实际测试，struts2速度慢，在于使用struts标签，如果使用struts建议使用jstl。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍注解开发的简单参数绑定，包括简单类型、简单pojo以及自定义绑定实现类型转换&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="注解" scheme="https://brianway.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(10)-springmvc注解开发之商品修改功能</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-10-annotation-sample/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-10-annotation-sample/</id>
    <published>2016-03-29T22:28:10.000Z</published>
    <updated>2019-04-07T16:16:59.979Z</updated>
    
    <content type="html"><![CDATA[<p>本文以商品修改为例，记录springmvc的注解开发，包括mapper,service,controller,@RequestMapping,controller方法的返回值等</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>操作流程：</p><ul><li>1.进入商品查询列表页面</li><li>2.点击修改，进入商品修改页面，页面中显示了要修改的商品。要修改的商品从数据库查询，根据商品id(主键)查询商品信息</li><li>3.在商品修改页面，修改商品信息，修改后，点击提交</li></ul><h2 id="开发mapper"><a href="#开发mapper" class="headerlink" title="开发mapper"></a>开发mapper</h2><p>mapper：</p><ul><li>根据id查询商品信息</li><li>根据id更新Items表的数据</li></ul><p>不用开发了，使用逆向工程生成的代码。</p><h2 id="开发service"><a href="#开发service" class="headerlink" title="开发service"></a>开发service</h2><p>在<code>com.iot.learnssm.firstssm.service.ItemsService</code>中添加两个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询商品信息</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Title: findItemsById&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id 查询商品的id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function">ItemsCustom <span class="title">findItemsById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//修改商品信息</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Title: updateItems&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id 修改商品的id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> itemsCustom 修改的商品信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateItems</span><span class="params">(Integer id,ItemsCustom itemsCustom)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>在<code>com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl</code>中实现接口，增加<code>itemsMapper</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemsMapper itemsMapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ItemsCustom <span class="title">findItemsById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class="line">    <span class="comment">//中间对商品信息进行业务处理</span></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="comment">//返回ItemsCustom</span></span><br><span class="line">    ItemsCustom itemsCustom = <span class="keyword">new</span> ItemsCustom();</span><br><span class="line">    <span class="comment">//将items的属性值拷贝到itemsCustom</span></span><br><span class="line">    BeanUtils.copyProperties(items, itemsCustom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateItems</span><span class="params">(Integer id, ItemsCustom itemsCustom)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//添加业务校验，通常在service接口对关键参数进行校验</span></span><br><span class="line">    <span class="comment">//校验 id是否为空，如果为空抛出异常</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新商品信息使用updateByPrimaryKeyWithBLOBs根据id更新items表中所有字段，包括 大文本类型字段</span></span><br><span class="line">    <span class="comment">//updateByPrimaryKeyWithBLOBs要求必须转入id</span></span><br><span class="line">    itemsCustom.setId(id);</span><br><span class="line">    itemsMapper.updateByPrimaryKeyWithBLOBs(itemsCustom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发controller"><a href="#开发controller" class="headerlink" title="开发controller"></a>开发controller</h2><p>方法：</p><ul><li>商品信息修改页面显示</li><li>商品信息修改提交</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@Controller来标识它是一个控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class="line"><span class="comment">//比如：商品列表：/items/queryItems.action</span></span><br><span class="line"><span class="comment">//@RequestMapping("/items")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsService itemsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品查询列表</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryItems"</span>)</span><br><span class="line">    <span class="comment">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class="line">    <span class="comment">//一般建议将url和方法写成一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItems</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查找数据库，查询商品列表</span></span><br><span class="line">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回ModelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定视图</span></span><br><span class="line">        <span class="comment">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class="line">        <span class="comment">//modelAndView.setViewName("/WEB-INF/jsp/items/itemsList.jsp");</span></span><br><span class="line">        <span class="comment">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"items/itemsList"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品信息修改页面显示</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/editItems"</span>)</span><br><span class="line">    <span class="comment">//限制http请求方法，可以post和get</span></span><br><span class="line"><span class="comment">//@RequestMapping(value="/editItems",method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">editItems</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用service根据商品id查询商品信息</span></span><br><span class="line">ItemsCustom itemsCustom = itemsService.findItemsById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回ModelAndView</span></span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将商品信息放到model</span></span><br><span class="line">modelAndView.addObject(<span class="string">"itemsCustom"</span>, itemsCustom);</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品修改页面</span></span><br><span class="line">modelAndView.setViewName(<span class="string">"items/editItems"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品信息修改提交</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/editItemsSubmit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">editItemsSubmit</span><span class="params">(HttpServletRequest request, Integer id, ItemsCustom itemsCustom)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service更新商品信息，页面需要将商品信息传到此方法</span></span><br><span class="line">        itemsService.updateItems(id, itemsCustom);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回ModelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//返回一个成功页面</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><code>@RequestMapping</code></h2><ul><li>url映射</li></ul><p>定义controller方法对应的url，进行处理器映射使用。</p><ul><li>窄化请求映射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@Controller来标识它是一个控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class="line"><span class="comment">//比如：商品列表：/items/queryItems.action</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/items"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br></pre></td></tr></table></figure><ul><li>限制http请求方法</li></ul><p>出于安全性考虑，对http的链接进行方法限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//商品信息修改页面显示</span></span><br><span class="line">    <span class="comment">//@RequestMapping("/editItems")</span></span><br><span class="line">    <span class="comment">//限制http请求方法，可以post和get</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/editItems"</span>,method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">editItems</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure><p>如果限制请求为post方法，进行get请求，即将上面代码的注解改为<code>@RequestMapping(value=&quot;/editItems&quot;,method={RequestMethod.POST})</code></p><p>报错，状态码405：</p><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E9%99%90%E5%88%B6http%E8%AF%B7%E6%B1%82-GET%E6%8B%92%E7%BB%9D.png" alt="GET拒绝"></p><h2 id="controller方法的返回值"><a href="#controller方法的返回值" class="headerlink" title="controller方法的返回值"></a>controller方法的返回值</h2><ul><li>返回<code>ModelAndView</code></li></ul><p>需要方法结束时，定义ModelAndView，将model和view分别进行设置。</p><ul><li>返回string</li></ul><p>如果controller方法返回string</p><p>1.表示返回逻辑视图名。</p><p>真正视图(jsp路径)=前缀+逻辑视图名+后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/editItems"</span>,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class="line"><span class="comment">//@RequestParam里边指定request传入参数名称和形参进行绑定。</span></span><br><span class="line"><span class="comment">//通过required属性指定参数是否必须要传入</span></span><br><span class="line"><span class="comment">//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。</span></span><br><span class="line"><span class="comment">//public String editItems(Model model, @RequestParam(value="id",required=true) Integer items_id)throws Exception &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItems</span><span class="params">(Model model)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用service根据商品id查询商品信息</span></span><br><span class="line">    ItemsCustom itemsCustom = itemsService.findItemsById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过形参中的model将model数据传到页面</span></span><br><span class="line">    <span class="comment">//相当于modelAndView.addObject方法</span></span><br><span class="line">    model.addAttribute(<span class="string">"itemsCustom"</span>, itemsCustom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"items/editItems"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.redirect重定向</p><p>商品修改提交后，重定向到商品查询列表。</p><p>redirect重定向特点：浏览器地址栏中的url会变化。修改提交的request数据无法传到重定向的地址。因为重定向后重新进行request（request无法共享）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向到商品查询列表</span></span><br><span class="line"><span class="comment">//return "redirect:queryItems.action";</span></span><br></pre></td></tr></table></figure><p>3.forward页面转发</p><p>通过forward进行页面转发，浏览器地址栏url不变，request可以共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:queryItems.action"</span>;</span><br></pre></td></tr></table></figure><ul><li>返回void</li></ul><p>在controller方法形参上可以定义request和response，使用request或response指定响应结果：</p><p>1.使用request转向页面，如下：</p><p><code>request.getRequestDispatcher(&quot;页面路径&quot;).forward(request, response);</code></p><p>2.也可以通过response页面重定向：</p><p><code>response.sendRedirect(&quot;url&quot;)</code></p><p>3.也可以通过response指定响应结果，例如响应json数据如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json串"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以商品修改为例，记录springmvc的注解开发，包括mapper,service,controller,@RequestMapping,controller方法的返回值等&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="注解" scheme="https://brianway.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(9)-springmvc整合mybatis之controller</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-9-controller/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-9-controller/</id>
    <published>2016-03-29T22:28:09.000Z</published>
    <updated>2019-04-07T16:16:59.977Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何配置springmvc配置文件和web.xml，以及如何编写controller,jsp</p><a id="more"></a><h2 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h2><p>在<code>resources/spring</code>文件下下创建springmvc.xml文件，配置处理器映射器、适配器、视图解析器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class="line"><span class="comment">    实际开发中加你使用组件扫描</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以扫描controller、service、...</span></span><br><span class="line"><span class="comment">这里让扫描controller，指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.iot.learnssm.firstssm.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class="line"><span class="comment">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class="line"><span class="comment">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment">     实际开发时使用mvc:annotation-driven</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>参考入门程序，web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>firstssm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/classes/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springmvc 前端控制器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class="line"><span class="comment">          若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        第一种:*.action,访问以.action三结尾，由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class="line"><span class="comment">                使用此种方式和实现RESTful风格的url</span></span><br><span class="line"><span class="comment">        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class="line"><span class="comment">                不能根据jsp页面找到handler，会报错</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个文件有两个作用：</p><ul><li>配置前端控制器(<code>DispatcherServlet</code>)</li><li>加载spring容器：添加spring容器监听器，加载spring容器，使用通配符加载<code>spring/</code>下的配置文件<ul><li>applicationContext-dao.xml</li><li>applicationContext-service.xml</li><li>applicationContext-transaction.xml</li></ul></li></ul><h2 id="编写Controller-就是Handler"><a href="#编写Controller-就是Handler" class="headerlink" title="编写Controller(就是Handler)"></a>编写Controller(就是Handler)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.learnssm.firstssm.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.learnssm.firstssm.po.Items;</span><br><span class="line"><span class="keyword">import</span> com.iot.learnssm.firstssm.po.ItemsCustom;</span><br><span class="line"><span class="keyword">import</span> com.iot.learnssm.firstssm.service.ItemsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/3/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用@Controller来标识它是一个控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class="line"><span class="comment">//比如：商品列表：/items/queryItems.action</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsService itemsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品查询列表</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryItems"</span>)</span><br><span class="line">    <span class="comment">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class="line">    <span class="comment">//一般建议将url和方法写成一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItems</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查找数据库，查询商品列表</span></span><br><span class="line">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回ModelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定视图</span></span><br><span class="line">        <span class="comment">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class="line">        <span class="comment">//modelAndView.setViewName("/WEB-INF/jsp/items/itemsList.jsp");</span></span><br><span class="line">        <span class="comment">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"items/itemsList"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写jsp"><a href="#编写jsp" class="headerlink" title="编写jsp"></a>编写jsp</h2><p>服务器路径为<code>WEB-INF/jsp/items/itemsList.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>  prefix=<span class="string">"fmt"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;查询商品列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/item/queryItem.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">查询条件：</span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="submit" value="查询"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">商品列表：</span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生产日期&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品描述&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;td&gt;&lt;a href="$&#123;pageContext.request.contextPath &#125;/item/editItem.action?id=$&#123;item.id&#125;"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何配置springmvc配置文件和web.xml，以及如何编写controller,jsp&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(8)-springmvc整合mybatis之service</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-8-service/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-8-service/</id>
    <published>2016-03-29T22:28:08.000Z</published>
    <updated>2019-04-07T16:16:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录如何整合service,包括定义spring接口，在spring容器配置service以及事务控制。让spring管理service接口。</p><a id="more"></a><h2 id="定义service接口"><a href="#定义service接口" class="headerlink" title="定义service接口"></a>定义service接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//商品查询列表</span></span><br><span class="line">    <span class="function">List&lt;ItemsCustom&gt; <span class="title">findItemsList</span><span class="params">(ItemsQueryVo itemsQueryVo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsMapperCustom itemsMapperCustom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ItemsCustom&gt; <span class="title">findItemsList</span><span class="params">(ItemsQueryVo itemsQueryVo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemsMapperCustom.findItemsList(itemsQueryVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在spring容器配置service"><a href="#在spring容器配置service" class="headerlink" title="在spring容器配置service"></a>在spring容器配置service</h2><p>在<code>resources/spring</code>下创建applicationContext-service.xml，文件中配置service。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 商品管理的service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsService"</span> <span class="attr">class</span>=<span class="string">"com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h2><p>在<code>resources/spring</code>下创建applicationContext-transaction.xml，在applicationContext-transaction.xml中使用spring声明式事务控制方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器</span></span><br><span class="line"><span class="comment">        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源</span></span><br><span class="line"><span class="comment">        dataSource在applicationContext-dao.xml中配置了</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.iot.learnssm.firstssm.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录如何整合service,包括定义spring接口，在spring容器配置service以及事务控制。让spring管理service接口。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(7)-springmvc整合mybatis之mapper</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-7-mapper/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-7-mapper/</id>
    <published>2016-03-29T22:28:07.000Z</published>
    <updated>2019-04-07T16:16:59.840Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录springmvc整合dao的配置</p><a id="more"></a><h2 id="整合dao"><a href="#整合dao" class="headerlink" title="整合dao"></a>整合dao</h2><p>首先在resource文件夹下添加两个文件：数据库配置文件和日志配置文件</p><ul><li>数据库配置文件db.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure><ul><li>日志配置文件log4j.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h3 id="sqlMapConfig-xml"><a href="#sqlMapConfig-xml" class="headerlink" title="sqlMapConfig.xml"></a>sqlMapConfig.xml</h3><p>mybatis自己的配置文件</p><p>在resources目录下新建mybatis文件夹，并新建sqlMapConfig.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局setting配置，根据需要添加 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 批量扫描别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.iot.learnssm.firstssm.po"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mapper</span></span><br><span class="line"><span class="comment">    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。</span></span><br><span class="line"><span class="comment">    必须遵循：mapper.xml和mapper.java文件同名且在一个目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mappers&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/mappers&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h3><p>在resources目录下新建spring文件夹，并新建applicationContext-dao.xml文件</p><p>配置：</p><ul><li>数据源</li><li>SqlSessionFactory</li><li>mapper扫描器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 ，dbcp --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 从整合包里找，org.mybatis:mybatis-spring:1.2.4 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/sqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.iot.learnssm.firstssm.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;property name="sqlSessionFactory" ref="sqlSessionFactory" /&gt;</span></span><br><span class="line"><span class="comment">       会导致数据源配置不管用，数据库连接不上。</span></span><br><span class="line"><span class="comment">       且spring 4弃用</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逆向工程生成po类及mapper-单表增删改查"><a href="#逆向工程生成po类及mapper-单表增删改查" class="headerlink" title="逆向工程生成po类及mapper(单表增删改查)"></a>逆向工程生成po类及mapper(单表增删改查)</h3><p>方法参见<a href="http://blog.csdn.net/h3243212/article/details/50778937" target="_blank" rel="noopener">《mybatis学习笔记(18)-mybatis逆向工程》</a></p><h3 id="手动定义商品查询mapper"><a href="#手动定义商品查询mapper" class="headerlink" title="手动定义商品查询mapper"></a>手动定义商品查询mapper</h3><p>针对综合查询mapper，一般情况会有关联查询，建议自定义mapper</p><ul><li>ItemsMapperCustom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.iot.learnssm.firstssm.mapper.ItemsMapperCustom"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 定义商品查询的sql片段，就是商品查询条件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_items_where"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 使用动态sql，通过if判断，满足条件进行sql拼接 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 商品查询条件通过ItemsQueryVo包装对象 中itemsCustom属性传递 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"itemsCustom!=null"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"itemsCustom.name!=null and itemsCustom.name!=''"</span>&gt;</span></span><br><span class="line">   items.name LIKE '%$&#123;itemsCustom.name&#125;%'</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 商品列表查询 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- parameterType传入包装对象(包装了查询条件)</span></span><br><span class="line"><span class="comment">  resultType建议使用扩展对象</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findItemsList"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.learnssm.firstssm.po.ItemsQueryVo"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">resultType</span>=<span class="string">"com.iot.learnssm.firstssm.po.ItemsCustom"</span>&gt;</span></span><br><span class="line">  SELECT items.* FROM items  </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_items_where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ItemsMapperCustom.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsMapperCustom</span> </span>&#123;</span><br><span class="line">    <span class="comment">//商品查询列表</span></span><br><span class="line">    <span class="function">List&lt;ItemsCustom&gt; <span class="title">findItemsList</span><span class="params">(ItemsQueryVo itemsQueryVo)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>po类<code>ItemsCustom</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.learnssm.firstssm.po;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brian on 2016/3/2.</span></span><br><span class="line"><span class="comment"> * 商品信息的扩展类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsCustom</span> <span class="keyword">extends</span> <span class="title">Items</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加商品信息的扩展属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入pojo的包装类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.learnssm.firstssm.po;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brian on 2016/3/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品信息</span></span><br><span class="line">    <span class="keyword">private</span> Items items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class="line">    <span class="keyword">private</span> ItemsCustom itemsCustom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(Items items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ItemsCustom <span class="title">getItemsCustom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemsCustom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemsCustom</span><span class="params">(ItemsCustom itemsCustom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemsCustom = itemsCustom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合好dao后的工程目录如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%95%B4%E5%90%88%E5%B7%A5%E7%A8%8B-2.png" alt="springmvc_整合工程-2" title>                </div>                <div class="image-caption">springmvc_整合工程-2</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录springmvc整合dao的配置&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(6)-springmvc整合mybatis(IDEA中通过maven构建)</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-6-integrate-mybatis/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-6-integrate-mybatis/</id>
    <published>2016-03-29T22:28:06.000Z</published>
    <updated>2019-04-07T16:16:59.974Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要展示如何在intellij IDEA中通过maven构建springmvc+mybatis框架的开发环境。</p><a id="more"></a><p>需求：使用springmvc和mybatis完成商品列表查询</p><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%95%B4%E5%90%88mybatis%E6%80%9D%E8%B7%AF.png" alt="springmvc_整合mybatis思路" title>                </div>                <div class="image-caption">springmvc_整合mybatis思路</div>            </figure><ul><li><p>第一步：整合dao层</p><ul><li>mybatis和spring整合，通过spring管理mapper接口。</li><li>使用mapper的扫描器自动扫描mapper接口在spring中进行注册。</li></ul></li><li><p>第二步：整合service层</p><ul><li>通过spring管理service接口。</li><li>使用配置方式将service接口配置在spring配置文件中。</li><li>实现事务控制。</li></ul></li><li><p>第三步：整合springmvc</p><ul><li>由于springmvc是spring的模块，不需要整合。</li></ul></li></ul><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>不同于<a href="http://blog.csdn.net/h3243212/article/details/50778934" target="_blank" rel="noopener">《mybatis学习笔记(17)-spring和mybatis整合》</a>中的示例demo,<strong>本文的整合采用maven构建</strong>。</p><p>如何创建使用maven构建的web应用可以参考前面的一篇<a href="http://blog.csdn.net/h3243212/article/details/50828141#环境搭建" target="_blank" rel="noopener">《springmvc学习笔记(1)-框架原理和入门配置》</a></p><p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程，手动建webapp的目录</p><p>在<code>src/main</code>下新建文件夹<code>webapp</code></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.iot.learnssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learnssm-firstssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jar 版本设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JSP tag --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里添加的依赖可能有多的,但总比少包好，我开始就是引少了依赖(springframework的依赖只引用了spring-mvc,连spring-core都没引)，导致报错,以后会出一篇博客专门讲这个系列笔记中debug相关问题。</p><h3 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h3><p>在java目录下建各个package,按照maven的命名习惯:</p><p><code>com.公司名.项目名.模块名</code></p><p>这里我的包为：</p><p><code>com.iot.learnssm.firstssm</code></p><p>包含几个子包：</p><ul><li>controller</li><li>mapper</li><li>po</li><li>service<ul><li>impl</li></ul></li></ul><p>项目结构如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%95%B4%E5%90%88%E5%B7%A5%E7%A8%8B-1.png" alt="springmvc_整合工程-1" title>                </div>                <div class="image-caption">springmvc_整合工程-1</div>            </figure><p>后面几篇笔记会依次记录mapper,service,controller各个部分的整合</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要展示如何在intellij IDEA中通过maven构建springmvc+mybatis框架的开发环境。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="IntelliJ-IDEA" scheme="https://brianway.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
      <category term="Maven" scheme="https://brianway.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(5)-入门程序小结</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-5-Start-Summary/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-5-Start-Summary/</id>
    <published>2016-03-29T22:28:05.000Z</published>
    <updated>2019-04-07T16:16:59.829Z</updated>
    
    <content type="html"><![CDATA[<p>通过入门程序理解springmvc前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。</p><a id="more"></a><h2 id="入门程序配置小结"><a href="#入门程序配置小结" class="headerlink" title="入门程序配置小结"></a>入门程序配置小结</h2><p>前端控制器配置：</p><ul><li>第一种：<code>*.action</code>，访问以<code>.action</code>结尾 由<code>DispatcherServlet</code>进行解析</li><li>第二种：<code>/</code>，所以访问的地址都由<code>DispatcherServlet</code>进行解析，对于静态文件的解析需要配置不让<code>DispatcherServlet</code>进行解析,使用此种方式可以实现RESTful风格的url</li></ul><p>处理器映射器：</p><ul><li>非注解处理器映射器（了解）</li><li>注解的处理器映射器（掌握）</li></ul><p>对标记<code>@Controller</code>类中标识有<code>@RequestMapping</code>的方法进行映射。在<code>@RequestMapping</code>里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。</p><p>处理器适配器：</p><p>非注解处理器适配器（了解）<br>注解的处理器适配器（掌握）<br>注解处理器适配器和注解的处理器映射器是<strong>配对使用</strong>。理解为不能使用非注解映射器进行映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以代替下边的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--注解适配器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="非注解的完整的配置文件"><a href="#非注解的完整的配置文件" class="headerlink" title="非注解的完整的配置文件"></a>非注解的完整的配置文件</h2><p><code>src/main/resources/springmvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.iot.ssm.controller.ItemsController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器映射器</span></span><br><span class="line"><span class="comment">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器</span></span><br><span class="line"><span class="comment">     所有处理器适配器都实现了HandlerAdapter接口</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解的完整配置文件"><a href="#注解的完整配置文件" class="headerlink" title="注解的完整配置文件"></a>注解的完整配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class="line"><span class="comment">    实际开发中加你使用组件扫描</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;bean  class="com.iot.ssm.controller.ItemsController3"/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以扫描controller、service、...</span></span><br><span class="line"><span class="comment">这里让扫描controller，指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.iot.ssm.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class="line"><span class="comment">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class="line"><span class="comment">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment">     实际开发时使用mvc:annotation-driven</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过入门程序理解springmvc前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(4)-前端控制器</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-4-Front-controller/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-4-Front-controller/</id>
    <published>2016-03-29T22:28:04.000Z</published>
    <updated>2019-04-07T16:16:59.852Z</updated>
    
    <content type="html"><![CDATA[<p>本文通过前端控制器源码分析springmvc执行过程</p><a id="more"></a><p>1.前端控制器接收请求</p><p>调用<code>doDispatch</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">         。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.前端控制器调用<code>HandlerMapping</code>（处理器映射器）根据url查找Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the HandlerExecutionChain for this request.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Tries all handler mappings in order.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the HandlerExecutionChain, or &#123;<span class="doctag">@code</span> null&#125; if no handler could be found</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(</span><br><span class="line"><span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.调用处理器适配器执行Handler,得到执行的结果<code>ModelAndView mv</code></p><p>在<code>doDispatch</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><p>4.视图渲染，将model数据填充到request域</p><p><code>doDispatch</code>-&gt;<code>processDispatchResult</code>-&gt;<code>render</code></p><p>在<code>render</code>方法中,视图解析得到view</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// We need to resolve the view name.</span></span><br><span class="line">view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure><p>调用view的渲染方法，将model数据填充到request域</p><p>在<code>render</code>方法中,调用<code>View</code>接口的<code>render</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure><p>程序我也没细读，感觉分析比较浅，很多还没弄懂，等我系统阅读源码后会整理一篇好点的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过前端控制器源码分析springmvc执行过程&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(3)-注解的处理器映射器和适配器</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-3-Annotation/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-3-Annotation/</id>
    <published>2016-03-29T22:28:03.000Z</published>
    <updated>2019-04-07T16:16:59.810Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍注解的处理器映射器和适配器相关配置</p><a id="more"></a><h2 id="默认加载"><a href="#默认加载" class="headerlink" title="默认加载"></a>默认加载</h2><p>前端控制器从<code>\org\springframework\web\servlet\DispatcherServlet.properties</code>件中加载处理器映射器、适配器、视图解析器等组件，如果不在springmvc.xml中配置，则使用默认加载的</p><p>注解的处理器映射器和适配器</p><ul><li>在spring3.1之前使用<code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code>注解映射器。</li><li>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>注解映射器。</li><li>在spring3.1之前使用<code>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</code>注解适配器。</li><li>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>注解适配器</li></ul><h2 id="注解的处理器映射器和适配器"><a href="#注解的处理器映射器和适配器" class="headerlink" title="注解的处理器映射器和适配器"></a>注解的处理器映射器和适配器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class="line"><span class="comment"> mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class="line"><span class="comment"> 比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment"> 实际开发时使用mvc:annotation-driven</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开发注解Handler"><a href="#开发注解Handler" class="headerlink" title="开发注解Handler"></a>开发注解Handler</h2><p>使用注解的映射器和注解的适配器。(使用注解的映射器和注解的适配器必须配对使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@Controller来标识它是一个控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品查询列表</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryItems"</span>)</span><br><span class="line">    <span class="comment">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class="line">    <span class="comment">//一般建议将url和方法写成一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItems</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class="line">        List&lt;Items&gt; itemsList = <span class="keyword">new</span> ArrayList&lt;Items&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向list中填充静态数据</span></span><br><span class="line">        Items items_1 = <span class="keyword">new</span> Items();</span><br><span class="line">        items_1.setName(<span class="string">"联想笔记本"</span>);</span><br><span class="line">        items_1.setPrice(<span class="number">6000f</span>);</span><br><span class="line">        items_1.setDetail(<span class="string">"ThinkPad T430 c3 联想笔记本电脑！"</span>);</span><br><span class="line"></span><br><span class="line">        Items items_2 = <span class="keyword">new</span> Items();</span><br><span class="line">        items_2.setName(<span class="string">"苹果手机"</span>);</span><br><span class="line">        items_2.setPrice(<span class="number">5000f</span>);</span><br><span class="line">        items_2.setDetail(<span class="string">"iphone6苹果手机！"</span>);</span><br><span class="line"></span><br><span class="line">        itemsList.add(items_1);</span><br><span class="line">        itemsList.add(items_2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回ModelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"/WEB-INF/jsp/items/itemsList.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在spring容器中加载Handler"><a href="#在spring容器中加载Handler" class="headerlink" title="在spring容器中加载Handler"></a>在spring容器中加载Handler</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class="line"><span class="comment">    实际开发中加你使用组件扫描</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;bean  class="com.iot.ssm.controller.ItemsController3"/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以扫描controller、service、...</span></span><br><span class="line"><span class="comment">这里让扫描controller，指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.iot.ssm.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://blog.csdn.net/acmman/article/details/46980427" target="_blank" rel="noopener">SpringMVC框架】注解的处理器映射器和适配器配置</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍注解的处理器映射器和适配器相关配置&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(2)-非注解的处理器映射器和适配器</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-2-Non-annotation/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-2-Non-annotation/</id>
    <published>2016-03-29T22:28:02.000Z</published>
    <updated>2019-04-07T16:16:59.911Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍非注解的处理器映射器和适配器配置</p><a id="more"></a><h2 id="非注解的处理器映射器"><a href="#非注解的处理器映射器" class="headerlink" title="非注解的处理器映射器"></a>非注解的处理器映射器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsController"</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.iot.ssm.controller.ItemsController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器</span></span><br><span class="line"><span class="comment">将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简单url映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对 itemsController进行url映射--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems1.action"</span>&gt;</span>itemsController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems2.action"</span>&gt;</span>itemsController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个映射器可并存，前端控制器判断url能让哪些映射器处理就让正确的映射器处理</p><h2 id="非注解的处理器适配器"><a href="#非注解的处理器适配器" class="headerlink" title="非注解的处理器适配器"></a>非注解的处理器适配器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 处理器适配器</span><br><span class="line">    所有处理器适配器都实现了HandlerAdapter接口</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</span><br></pre></td></tr></table></figure><p>要求编写的Handler实现<code>Controller</code>接口</p><p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;/&gt;</code></p><p>要求编写的Handler实现<code>HttpRequestHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.ssm.po.Items;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.HttpRequestHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController2</span> <span class="keyword">implements</span> <span class="title">HttpRequestHandler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class="line">        List&lt;Items&gt; itemsList = <span class="keyword">new</span> ArrayList&lt;Items&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向list中填充静态数据</span></span><br><span class="line">        Items items_1 = <span class="keyword">new</span> Items();</span><br><span class="line">        items_1.setName(<span class="string">"联想笔记本"</span>);</span><br><span class="line">        items_1.setPrice(<span class="number">6000f</span>);</span><br><span class="line">        items_1.setDetail(<span class="string">"ThinkPad T430 联想笔记本电脑！"</span>);</span><br><span class="line"></span><br><span class="line">        Items items_2 = <span class="keyword">new</span> Items();</span><br><span class="line">        items_2.setName(<span class="string">"苹果手机"</span>);</span><br><span class="line">        items_2.setPrice(<span class="number">5000f</span>);</span><br><span class="line">        items_2.setDetail(<span class="string">"iphone6苹果手机！"</span>);</span><br><span class="line"></span><br><span class="line">        itemsList.add(items_1);</span><br><span class="line">        itemsList.add(items_2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置转发的视图</span></span><br><span class="line">        httpServletRequest.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/items/itemsList.jsp"</span>).forward(httpServletRequest,httpServletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpRequestHandler</code>适配器的<code>handleRequest</code>方法返回为<code>void</code>,没有返回<code>ModelAndView</code>，可通过response修改响应内容,比如返回json数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json串"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍非注解的处理器映射器和适配器配置&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>springmvc学习笔记(1)-框架原理和入门配置</title>
    <link href="https://brianway.github.io/2016/03/30/springmvc-learn-1-Frame-start/"/>
    <id>https://brianway.github.io/2016/03/30/springmvc-learn-1-Frame-start/</id>
    <published>2016-03-29T22:28:01.000Z</published>
    <updated>2019-04-07T16:16:59.913Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍springmvc的框架原理，并通过一个入门程序展示环境搭建，配置以及部署调试。</p><p>springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。</p><a id="more"></a><h2 id="springmvc框架原理"><a href="#springmvc框架原理" class="headerlink" title="springmvc框架原理"></a>springmvc框架原理</h2><p>给个官网示意图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/images/mvc.png" alt="The request processing workflow in Spring Web MVC" title>                </div>                <div class="image-caption">The request processing workflow in Spring Web MVC</div>            </figure><p>组件及其作用</p><ul><li>前端控制器(DispatcherServlet)：接收请求，响应结果，相当于转发器，中央处理器。减少了其他组件之间的耦合度</li><li>处理器映射器(HandlerMapping)：根据请求的url查找Handler</li><li><strong>Handler处理器</strong>：按照HandlerAdapter的要求编写</li><li>处理器适配器(HandlerAdapter)：按照特定规则(HandlerAdapter要求的规则)执行Handler。</li><li>视图解析器(ViewResolver)：进行视图解析，根据逻辑视图解析成真正的视图(View)</li><li><strong>视图(View)</strong>：View是一个接口实现类试吃不同的View类型（jsp,pdf等等）</li></ul><p><em>注：其中加粗的为需要程序员开发的，没加粗的为不需要程序员开发的</em></p><p>文末参考链接中《跟开涛学SpringMVC》里面有张图挺好的，感觉很详细.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/springmvc_%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="springmvc_核心架构图" title>                </div>                <div class="image-caption">springmvc_核心架构图</div>            </figure><p>步骤：</p><ul><li>1.发起请求到前端控制器(<code>DispatcherServlet</code>)</li><li>2.前端控制器请求处理器映射器(<code>HandlerMapping</code>)查找<code>Handler</code>(可根据xml配置、注解进行查找)</li><li>3.处理器映射器(<code>HandlerMapping</code>)向前端控制器返回<code>Handler</code></li><li>4.前端控制器调用处理器适配器(<code>HandlerAdapter</code>)执行<code>Handler</code></li><li>5.处理器适配器(HandlerAdapter)去执行Handler</li><li>6.Handler执行完，给适配器返回ModelAndView(Springmvc框架的一个底层对象)</li><li>7.处理器适配器(<code>HandlerAdapter</code>)向前端控制器返回<code>ModelAndView</code></li><li>8.前端控制器(<code>DispatcherServlet</code>)请求视图解析器(<code>ViewResolver</code>)进行视图解析，根据逻辑视图名解析成真正的视图(jsp)</li><li>9.视图解析器(ViewResolver)向前端控制器(<code>DispatcherServlet</code>)返回View</li><li>10.前端控制器进行视图渲染，即将模型数据(在<code>ModelAndView</code>对象中)填充到request域</li><li>11.前端控制器向用户响应结果</li></ul><h2 id="springmvc入门程序"><a href="#springmvc入门程序" class="headerlink" title="springmvc入门程序"></a>springmvc入门程序</h2><p>一个展示商品列表的小页面</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>intellij IDEA 15.0.2</p><ul><li>A方法(有待商榷)</li></ul><p><code>new-&gt;project-&gt;maven-&gt;勾选create from archetype-&gt;选中webapp</code></p><p>在<code>src/main</code>下新建<code>java</code>文件夹，标记为<code>Sources Root</code></p><p>这样建出来的工程感觉有问题，点开一些xml文件一片红，心里不是很踏实，所以放弃这个方法了</p><ul><li>B方法</li></ul><p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程，手动建webapp的目录</p><p>在<code>src/main</code>下新建文件夹<code>webapp</code></p><p>pom.xml文件</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上下面的标签会生成Artifacts</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>build标签的finalName要和Artifacts的output directory一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springmvc-2nd-1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>配置前端控制器</li></ul><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class="line"><span class="comment">      若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">    第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class="line"><span class="comment">            使用此种方式和实现RESTful风格的url</span></span><br><span class="line"><span class="comment">    第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class="line"><span class="comment">            不能根据jsp页面找到handler，会报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置Handler</li></ul><p>将编写Handler在spring容器加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.iot.ssm.controller.ItemsController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置处理器映射器</li></ul><p>在classpath下的springmvc.xml中配置处理器映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理器映射器</span></span><br><span class="line"><span class="comment">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置处理器适配器</li></ul><p>所有处理器适配器都实现了<code>HandlerAdapter</code>接口</p><p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&gt;</code></p><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> Controller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此适配器能执行实现<code>Controller</code>接口的Handler</p><ul><li>配置视图解析器</li></ul><p>需要配置解析jsp的视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">   解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在springmvc.xml中视图解析器配置前缀和后缀：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>程序中不用指定前缀和后缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定视图</span></span><br><span class="line"><span class="comment">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class="line"><span class="comment">//modelAndView.setViewName("/WEB-INF/jsp/items/itemsList.jsp");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class="line">modelAndView.setViewName(<span class="string">"items/itemsList"</span>);</span><br></pre></td></tr></table></figure><h3 id="部署调试"><a href="#部署调试" class="headerlink" title="部署调试"></a>部署调试</h3><p><code>HTTP Status 404 -</code><br>处理器映射器根据url找不到Handler,说明url错误</p><p><code>HTTP Status 404 -/springmvc/WEB-INF/jsp/items/itemsLists.jsp</code><br>处理器映射器根据url找到了Handler，转发的jsp页面找不到</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li><a href="http://sishuok.com/forum/blogPost/list/5160.html" target="_blank" rel="noopener">第二章 Spring MVC入门 —— 跟开涛学SpringMVC</a></li><li><a href="http://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm" target="_blank" rel="noopener">Spring MVC Framework Tutorial - TutorialsPoint</a></li><li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html" target="_blank" rel="noopener">Web MVC framework</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍springmvc的框架原理，并通过一个入门程序展示环境搭建，配置以及部署调试。&lt;/p&gt;
&lt;p&gt;springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>在intellij IDEA中为web应用创建图片虚拟目录(详细截图)</title>
    <link href="https://brianway.github.io/2016/03/30/IDEA-web-virtua-directory/"/>
    <id>https://brianway.github.io/2016/03/30/IDEA-web-virtua-directory/</id>
    <published>2016-03-29T22:28:00.000Z</published>
    <updated>2019-04-07T16:16:59.955Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要展示如何在intellij IDEA中为web应用添加虚拟目录映射,并附上步骤截图</p><a id="more"></a><h2 id="工程配置和环境"><a href="#工程配置和环境" class="headerlink" title="工程配置和环境"></a>工程配置和环境</h2><p>我使用的版本为</p><ul><li>tomcat 8.0.30</li><li>intellij 15.0.2</li><li>jdk 1.8.0_25</li></ul><p>已经部署好了一个web应用，并且已经在IDEA中添加好了tomcat容器，现在想为这个web应用添加一个图片虚拟目录</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul><li>1.点击工具栏的运行配置<code>Edit Configurations</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/IDEA_web-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%9501.png" alt="Edit Configurations" title>                </div>                <div class="image-caption">Edit Configurations</div>            </figure><ul><li>2.在弹出的<code>Run/debug Configurations</code>中选中tomcat容器，选择<code>deployment</code>这个tab</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/IDEA_web-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%9502.png" alt="deployment" title>                </div>                <div class="image-caption">deployment</div>            </figure><ul><li>3.添加物理目录和并设置虚拟目录路径</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/IDEA_web-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%9503.png" alt="添加物理目录和并设置虚拟目录路径" title>                </div>                <div class="image-caption">添加物理目录和并设置虚拟目录路径</div>            </figure><p>这里我选择了D盘下面的tmp文件夹作为物理目录，虚拟目录设为了<code>/pic</code>,我试了下，虽然斜杠少了也没什么影响，一样能访问，不过还是建议加上吧。</p><ul><li>4.运行web应用，访问图片资源</li></ul><p>附上博主帅照一张</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/IDEA_web-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%9504.png" alt="访问图片资源" title>                </div>                <div class="image-caption">访问图片资源</div>            </figure><p>这里需要接上具体访问资源的文件名，不然后访问不到的，如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/IDEA_web-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%9505.png" alt="访问不到" title>                </div>                <div class="image-caption">访问不到</div>            </figure><h2 id="在非IDE环境下配置虚拟目录"><a href="#在非IDE环境下配置虚拟目录" class="headerlink" title="在非IDE环境下配置虚拟目录"></a>在非IDE环境下配置虚拟目录</h2><p>怎么为tomcat配置虚拟目录映射可以参考下面的博客：</p><blockquote><p><a href="http://blog.csdn.net/xiazdong/article/details/7215052" target="_blank" rel="noopener">tomcat配置虚拟目录映射</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要展示如何在intellij IDEA中为web应用添加虚拟目录映射,并附上步骤截图&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="IntelliJ-IDEA" scheme="https://brianway.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(18)-mybatis逆向工程</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-18-Reverse-Engineering/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-18-Reverse-Engineering/</id>
    <published>2016-03-07T18:39:18.000Z</published>
    <updated>2019-04-07T16:16:59.962Z</updated>
    
    <content type="html"><![CDATA[<p>mybaits需要程序员自己编写sql语句,mybatis官方提供逆向工程,可以针对单表自动生成mybatis执行所需要的代码（mapper.java,mapper.xml、po..）</p><p>企业实际开发中，常用的逆向工程方式：由数据库的表生成java代码。</p><a id="more"></a><p>先附上官网链接：</p><blockquote><ul><li><a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">MyBatis Generator</a></li><li><a href="https://github.com/mybatis/generator" target="_blank" rel="noopener">A code generator for MyBatis and iBATIS. - GitHub</a></li></ul></blockquote><h2 id="下载逆向工程"><a href="#下载逆向工程" class="headerlink" title="下载逆向工程"></a>下载逆向工程</h2><p>这里其实可以添加Maven依赖的，因为跟着视频做的，所以我就建了个普通工程，直接添加了个lib文件夹，把要用的jar包直接copy进来了。</p><blockquote><p>maven中央仓库<code>MyBatis-Generator</code>下载地址：<a href="http://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core" target="_blank" rel="noopener">【MyBatis Generator Core】</a></p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="运行逆向工程"><a href="#运行逆向工程" class="headerlink" title="运行逆向工程"></a>运行逆向工程</h3><p>根据官网说的<a href="http://www.mybatis.org/generator/running/running.html" target="_blank" rel="noopener">（Running MyBatis Generator）</a>：</p><p><strong>Running MyBatis Generator</strong></p><p>MyBatis Generator (MBG) can be run in the following ways:</p><ul><li>From the command prompt with an XML configuration</li><li>As an Ant task with an XML configuration</li><li>As a Maven Plugin</li><li>From another Java program with an XML configuration</li><li>From another Java program with a Java based configuration</li></ul><p>还可以通过eclipse的插件生成代码</p><p>建议使用java程序方式，不依赖开发工具。</p><h3 id="生成代码配置文件"><a href="#生成代码配置文件" class="headerlink" title="生成代码配置文件"></a>生成代码配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;jdbcConnection driverClass="oracle.jdbc.OracleDriver"</span></span><br><span class="line"><span class="comment">connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:yycg"</span></span><br><span class="line"><span class="comment">userId="yycg"</span></span><br><span class="line"><span class="comment">password="yycg"&gt;</span></span><br><span class="line"><span class="comment">&lt;/jdbcConnection&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.iot.ssm.po"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.iot.ssm.mapper"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">"com.iot.ssm.mapper"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"items"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orders"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orderdetail"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;table schema="" tableName="sys_user"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_permission"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_user_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table schema="" tableName="sys_role_permission"&gt;&lt;/table&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment"> &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">&lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">&lt;/table&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的位置：</p><ul><li><code>javaModelGenerator</code>,生成PO类的位置</li><li><code>sqlMapGenerator</code>,mapper映射文件生成的位置</li><li><code>javaClientGenerator</code>,mapper接口生成的位置</li><li><code>table</code>,指定数据库表</li></ul><h3 id="执行生成程序"><a href="#执行生成程序" class="headerlink" title="执行生成程序"></a>执行生成程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//指定逆向工程配置文件</span></span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">2016-02-27 16:29:46,419 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Retrieving column information for table &quot;items&quot;</span><br><span class="line">2016-02-27 16:29:46,477 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;id&quot;, data type 4, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,477 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;name&quot;, data type 12, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,477 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;price&quot;, data type 7, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,477 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;detail&quot;, data type -1, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,477 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;pic&quot;, data type 12, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,478 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;createtime&quot;, data type 93, in table &quot;mybatis001..items&quot;</span><br><span class="line">2016-02-27 16:29:46,503 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Retrieving column information for table &quot;orders&quot;</span><br><span class="line">2016-02-27 16:29:46,551 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;id&quot;, data type 4, in table &quot;mybatis001..orders&quot;</span><br><span class="line">2016-02-27 16:29:46,551 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;user_id&quot;, data type 4, in table &quot;mybatis001..orders&quot;</span><br><span class="line">2016-02-27 16:29:46,551 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;number&quot;, data type 12, in table &quot;mybatis001..orders&quot;</span><br><span class="line">2016-02-27 16:29:46,551 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;createtime&quot;, data type 93, in table &quot;mybatis001..orders&quot;</span><br><span class="line">2016-02-27 16:29:46,551 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;note&quot;, data type 12, in table &quot;mybatis001..orders&quot;</span><br><span class="line">2016-02-27 16:29:46,577 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Retrieving column information for table &quot;orderdetail&quot;</span><br><span class="line">2016-02-27 16:29:46,630 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;id&quot;, data type 4, in table &quot;mybatis001..orderdetail&quot;</span><br><span class="line">2016-02-27 16:29:46,630 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;orders_id&quot;, data type 4, in table &quot;mybatis001..orderdetail&quot;</span><br><span class="line">2016-02-27 16:29:46,631 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;items_id&quot;, data type 4, in table &quot;mybatis001..orderdetail&quot;</span><br><span class="line">2016-02-27 16:29:46,631 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;items_num&quot;, data type 4, in table &quot;mybatis001..orderdetail&quot;</span><br><span class="line">2016-02-27 16:29:46,656 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Retrieving column information for table &quot;user&quot;</span><br><span class="line">2016-02-27 16:29:46,706 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;id&quot;, data type 4, in table &quot;mybatis001..user&quot;</span><br><span class="line">2016-02-27 16:29:46,706 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;username&quot;, data type 12, in table &quot;mybatis001..user&quot;</span><br><span class="line">2016-02-27 16:29:46,706 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;birthday&quot;, data type 91, in table &quot;mybatis001..user&quot;</span><br><span class="line">2016-02-27 16:29:46,706 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;sex&quot;, data type 1, in table &quot;mybatis001..user&quot;</span><br><span class="line">2016-02-27 16:29:46,706 [main] DEBUG [org.mybatis.generator.internal.db.DatabaseIntrospector] - Found column &quot;address&quot;, data type 12, in table &quot;mybatis001..user&quot;</span><br></pre></td></tr></table></figure><p>生成后的代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81.png" alt="逆向工程" title>                </div>                <div class="image-caption">逆向工程</div>            </figure><h3 id="使用生成的代码"><a href="#使用生成的代码" class="headerlink" title="使用生成的代码"></a>使用生成的代码</h3><p>需要将生成工程中所生成的代码拷贝到自己的工程中。</p><p>测试ItemsMapper中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.ssm.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.ssm.po.Items;</span><br><span class="line"><span class="keyword">import</span> com.iot.ssm.po.ItemsExample;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ItemsMapper itemsMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在setUp这个方法得到spring容器</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br><span class="line">itemsMapper = (ItemsMapper) applicationContext.getBean(<span class="string">"itemsMapper"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据主键删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//构造 items对象</span></span><br><span class="line">Items items = <span class="keyword">new</span> Items();</span><br><span class="line">items.setName(<span class="string">"手机"</span>);</span><br><span class="line">items.setPrice(<span class="number">999f</span>);</span><br><span class="line">items.setCreatetime(<span class="keyword">new</span> Date());</span><br><span class="line">itemsMapper.insert(items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ItemsExample itemsExample = <span class="keyword">new</span> ItemsExample();</span><br><span class="line"><span class="comment">//通过criteria构造查询条件</span></span><br><span class="line">ItemsExample.Criteria criteria = itemsExample.createCriteria();</span><br><span class="line">criteria.andNameEqualTo(<span class="string">"笔记本"</span>);</span><br><span class="line"><span class="comment">//可能返回多条记录</span></span><br><span class="line">List&lt;Items&gt; list = itemsMapper.selectByExample(itemsExample);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据主键查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Items items = itemsMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">System.out.println(items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对所有字段进行更新，需要先查询出来再更新</span></span><br><span class="line">Items items = itemsMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">items.setName(<span class="string">"手机"</span>);</span><br><span class="line"></span><br><span class="line">itemsMapper.updateByPrimaryKey(items);</span><br><span class="line"><span class="comment">//如果传入字段不空为才更新，在批量更新中使用此方法，不需要先查询再更新</span></span><br><span class="line"><span class="comment">//itemsMapper.updateByPrimaryKeySelective(record);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybaits需要程序员自己编写sql语句,mybatis官方提供逆向工程,可以针对单表自动生成mybatis执行所需要的代码（mapper.java,mapper.xml、po..）&lt;/p&gt;
&lt;p&gt;企业实际开发中，常用的逆向工程方式：由数据库的表生成java代码。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(17)-spring和mybatis整合</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-17-integrate-spring/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-17-integrate-spring/</id>
    <published>2016-03-07T18:39:17.000Z</published>
    <updated>2019-04-07T16:16:59.881Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要将如何将spring和mybatis整合，只是作简单的示例，没有使用Maven构建。并展示mybatis与spring整合后如何进行原始dao开发和mapper代理开发。</p><a id="more"></a><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><p>需要spring通过单例方式管理<code>SqlSessionFactory</code>。</p><p>spring和mybatis整合生成代理对象，使用<code>SqlSessionFactory</code>创建<code>SqlSession</code>。（spring和mybatis整合自动完成）</p><p>持久层的mapper都需要由spring进行管理。</p><h2 id="整合环境"><a href="#整合环境" class="headerlink" title="整合环境"></a>整合环境</h2><p>创建一个新的java工程（接近实际开发的工程结构）</p><p>jar包：</p><ul><li>mybatis3.2.7的jar包</li><li>spring3.2.0的jar包</li><li>mybatis和spring的整合包：早期ibatis和spring整合是由spring官方提供，mybatis和spring整合由mybatis提供。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E4%B8%8Espring%E6%95%B4%E5%90%88%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="mybatis与spring整合工程结构图" title>                </div>                <div class="image-caption">mybatis与spring整合工程结构图</div>            </figure><h2 id="sqlSessionFactory"><a href="#sqlSessionFactory" class="headerlink" title="sqlSessionFactory"></a>sqlSessionFactory</h2><p>在applicationContext.xml配置<code>sqlSessionFactory</code>和数据源</p><p><code>sqlSessionFactory</code>在mybatis和spring的整合包下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源，使用dbcp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessinFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"mybatis/SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原始dao开发-和spring整合后"><a href="#原始dao开发-和spring整合后" class="headerlink" title="原始dao开发(和spring整合后)"></a>原始dao开发(和spring整合后)</h2><ul><li>User.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></span><br><span class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需求:通过id查询用户表的记录 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过select执行数据库查询</span></span><br><span class="line"><span class="comment">     id:标识映射文件中的sql，称为statement的id</span></span><br><span class="line"><span class="comment">     将sql语句封装到mappedStatement对象中，所以将id称为statement的id</span></span><br><span class="line"><span class="comment">     parameterType:指定输入参数的类型</span></span><br><span class="line"><span class="comment">     #&#123;&#125;标示一个占位符,</span></span><br><span class="line"><span class="comment">     #&#123;value&#125;其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#&#123;&#125;中的值可以任意。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.ssm.po.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SqlMapconfig.xml中加载User.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 加载映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlmap/User.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>dao(实现类继承<code>SqlSessionDaoSupport</code>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao接口实现类需要注入<code>SqlSessoinFactory</code>，通过spring进行注入。这里spring声明配置方式，配置dao的bean</p><p><strong>让UserDaoImpl实现类继承SqlSessionDaoSupport</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//继承SqlSessionDaoSupport，通过this.getSqlSession()得到sqlSessoin</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.getSqlSession();</span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置dao</li></ul><p>在applicationContext.xml中配置dao</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原始dao接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.iot.ssm.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在setUp这个方法得到spring容器</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建UserDao的对象</span></span><br><span class="line">UserDao userDao = (UserDao)applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用UserDao的方法</span></span><br><span class="line">User user = userDao.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper代理开发"><a href="#mapper代理开发" class="headerlink" title="mapper代理开发"></a>mapper代理开发</h2><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></span><br><span class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.iot.ssm.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>MapperFactoryBean</code>创建代理对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- mapper配置</span></span><br><span class="line"><span class="comment">    MapperFactoryBean：根据mapper接口生成代理对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line">        //mapperInterface指定mapper接口</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.iot.ssm.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此方法问题：需要针对每个mapper进行配置，麻烦。</p><ul><li>通过<code>MapperScannerConfigurer</code>进行mapper扫描（建议使用）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册</span></span><br><span class="line"><span class="comment">    遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 中</span></span><br><span class="line"><span class="comment">    自动扫描出来的mapper的bean的id为mapper类名（首字母小写）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定扫描的包名</span></span><br><span class="line"><span class="comment">    如果扫描多个包，每个包中间使用半角逗号分隔</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.iot.ssm.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.ssm.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.iot.ssm.po.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在setUp这个方法得到spring容器</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UserMapper userMapper = (UserMapper)applicationContext.getBean(<span class="string">"userMapper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用userMapper的方法</span></span><br><span class="line"></span><br><span class="line">User user = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [D:\intellij\workspace\spring-mybatis\out\production\spring-mybatis\com\iot\ssm\mapper\UserMapper.class]; nested exception is java.lang.IllegalArgumentException</span><br><span class="line"></span><br><span class="line">at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:281)</span><br><span class="line">at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242)</span><br><span class="line">at org.mybatis.spring.mapper.ClassPathMapperScanner.doScan(ClassPathMapperScanner.java:155)</span><br><span class="line">at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(ClassPathBeanDefinitionScanner.java:220)</span><br><span class="line">at org.mybatis.spring.mapper.MapperScannerConfigurer.postProcessBeanDefinitionRegistry(MapperScannerConfigurer.java:315)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:630)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83)</span><br><span class="line">at com.iot.mybatis.mapper.UserMapperTest.setUp(UserMapperTest.java:17)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)</span><br><span class="line">at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)</span><br><span class="line">at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)</span><br><span class="line">at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)</span><br><span class="line">at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)</span><br><span class="line">at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:292)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:157)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class="line">at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br><span class="line">Caused by: java.lang.IllegalArgumentException</span><br><span class="line">at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)</span><br><span class="line">at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)</span><br><span class="line">at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)</span><br><span class="line">at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:52)</span><br><span class="line">at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80)</span><br><span class="line">at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101)</span><br><span class="line">at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257)</span><br><span class="line">... 35 more</span><br></pre></td></tr></table></figure><ul><li>搜到的答案</li></ul><blockquote><ul><li><a href="http://stackoverflow.com/questions/22771826/beandefinitionstoreexception-failed-to-read-candidate-component-class" target="_blank" rel="noopener">BeanDefinitionStoreException Failed to read candidate component class</a></li><li><a href="http://www.osblog.net/blog/399.html" target="_blank" rel="noopener">Failed to read candidate component错误</a></li></ul></blockquote><p>总结起来就是java 8 和spring 3 不能一起用，我在IDEA的<code>project settings</code>里把<code>project language level</code>换成<code>7</code>就好了。具体原因还不清楚</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要将如何将spring和mybatis整合，只是作简单的示例，没有使用Maven构建。并展示mybatis与spring整合后如何进行原始dao开发和mapper代理开发。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringMVC" scheme="https://brianway.github.io/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(16)-mybatis整合ehcache</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-16-ehcache/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-16-ehcache/</id>
    <published>2016-03-07T18:39:16.000Z</published>
    <updated>2019-04-07T16:16:59.856Z</updated>
    
    <content type="html"><![CDATA[<p>ehcache是一个分布式缓存框架</p><a id="more"></a><h2 id="分布缓存"><a href="#分布缓存" class="headerlink" title="分布缓存"></a>分布缓存</h2><p>我们系统为了提高系统并发，性能、一般对系统进行分布式部署（集群部署方式）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E5%88%86%E5%B8%83%E7%BC%93%E5%AD%98.png" alt="分布缓存" title>                </div>                <div class="image-caption">分布缓存</div>            </figure><p>不使用分布缓存，缓存的数据在各各服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理。</p><p>mybatis无法实现分布式缓存，需要和其它分布式缓存框架进行整合。</p><h2 id="整合方法-掌握"><a href="#整合方法-掌握" class="headerlink" title="整合方法(掌握)"></a>整合方法(掌握)</h2><p>mybatis提供了一个<code>cache</code>接口，如果要实现自己的缓存逻辑，实现<code>cache</code>接口开发即可。</p><p>mybatis和ehcache整合，mybatis和ehcache整合包中提供了一个cache接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SPI for cache providers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * One instance of cache will be created for each namespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The cache implementation must have a constructor that receives the cache id as an String parameter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * MyBatis will pass the namespace as id to the constructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * public MyCache(final String id) &#123;</span></span><br><span class="line"><span class="comment"> *  if (id == null) &#123;</span></span><br><span class="line"><span class="comment"> *    throw new IllegalArgumentException("Cache instances require an ID");</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  this.id = id;</span></span><br><span class="line"><span class="comment"> *  initialize();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The identifier of this cache</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key Can be any object but usually it is a &#123;<span class="doctag">@link</span> CacheKey&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value The result of a select.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The object stored in the cache.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Optional. It is not called by the core.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The object that was removed</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Clears this cache instance</span></span><br><span class="line"><span class="comment">   */</span>  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Optional. This method is not called by the core.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The number of elements stored in the cache (not its capacity).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Optional. As of 3.2.6 this method is no longer called by the core.</span></span><br><span class="line"><span class="comment">   *  </span></span><br><span class="line"><span class="comment">   * Any locking needed by the cache must be provided internally by the cache provider.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> A ReadWriteLock</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mybatis默认实现cache类是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PerpetualCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    cache.put(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache.get(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache.remove(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cache.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getId() == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(<span class="string">"Cache instances require an ID."</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Cache)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    Cache otherCache = (Cache) o;</span><br><span class="line">    <span class="keyword">return</span> getId().equals(otherCache.getId());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getId() == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(<span class="string">"Cache instances require an ID."</span>);</span><br><span class="line">    <span class="keyword">return</span> getId().hashCode();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合ehcache"><a href="#整合ehcache" class="headerlink" title="整合ehcache"></a>整合ehcache</h3><ul><li>加入ehcache包<ul><li>ehcache-core-2.6.5.jar</li><li>mybatis-ehcache-1.0.2.jar</li></ul></li></ul><p>配置mapper中<code>cache</code>中的<code>type</code>为ehcache对cache接口的实现类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启本mapper的namespace下的二级缓存</span></span><br><span class="line"><span class="comment">   type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache</span></span><br><span class="line"><span class="comment">   要和ehcache整合，需要配置type为ehcache实现cache接口的类型</span></span><br><span class="line"><span class="comment">   &lt;cache /&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入ehcache的配置文件"><a href="#加入ehcache的配置文件" class="headerlink" title="加入ehcache的配置文件"></a>加入ehcache的配置文件</h3><p>在classpath下配置ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"F:\develop\ehcache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ehcache是一个分布式缓存框架&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
      <category term="缓存" scheme="https://brianway.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(15)-查询缓存之二级缓存</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-15-Secondary-Cache/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-15-Secondary-Cache/</id>
    <published>2016-03-07T18:39:15.000Z</published>
    <updated>2019-04-07T16:16:59.836Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲mybatis的二级缓存，二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><a id="more"></a><h2 id="二级缓存原理"><a href="#二级缓存原理" class="headerlink" title="二级缓存原理"></a>二级缓存原理</h2><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="二级缓存原理"></p><p>首先开启mybatis的二级缓存.</p><p>sqlSession1去查询用户id为1的用户信息，查询到用户信息会将查询数据存储到二级缓存中。</p><p>如果SqlSession3去执行相同mapper下sql，执行commit提交，清空该mapper下的二级缓存区域的数据。</p><p>sqlSession2去查询用户id为1的用户信息，去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p><p>二级缓存与一级缓存区别，<strong>二级缓存的范围更大，多个sqlSession可以共享一个UserMapper的二级缓存区域</strong>。</p><p>UserMapper有一个二级缓存区域（按namespace分），其它mapper也有自己的二级缓存区域（按namespace分）。每一个namespace的mapper都有一个二缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。</p><h2 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h2><p>mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。</p><p>在核心配置文件SqlMapConfig.xml中加入<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></p><table><thead><tr><th style="text-align:left">设置项</th><th style="text-align:left">描述</th><th style="text-align:left">允许值</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">cacheEnabled</td><td style="text-align:left">对在此配置文件下的所有cache 进行全局性开/关设置。</td><td style="text-align:left">true/false</td><td style="text-align:left">true</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在UserMapper.xml中开启二缓存，UserMapper.xml下的sql执行完成会存储到它的缓存区域（HashMap）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启本mapper的namespace下的二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调用pojo类实现序列化接口"><a href="#调用pojo类实现序列化接口" class="headerlink" title="调用pojo类实现序列化接口"></a>调用pojo类实现序列化接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了将缓存数据取出执行反序列化操作，因为二级缓存数据存储介质多种多样，不一定在内存。</p><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二级缓存测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">SqlSession sqlSession3 = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">// 第一次发起请求，查询id为1的用户</span></span><br><span class="line">User user1 = userMapper1.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里执行关闭操作，将sqlsession中的数据写到二级缓存区域</span></span><br><span class="line">sqlSession1.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////使用sqlSession3执行commit()操作</span></span><br><span class="line"><span class="comment">//UserMapper userMapper3 = sqlSession3.getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">//User user  = userMapper3.findUserById(1);</span></span><br><span class="line"><span class="comment">//user.setUsername("张明明");</span></span><br><span class="line"><span class="comment">//userMapper3.updateUser(user);</span></span><br><span class="line"><span class="comment">////执行提交，清空UserMapper下边的二级缓存</span></span><br><span class="line"><span class="comment">//sqlSession3.commit();</span></span><br><span class="line"><span class="comment">//sqlSession3.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">// 第二次发起请求，查询id为1的用户</span></span><br><span class="line">User user2 = userMapper2.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line"></span><br><span class="line">sqlSession2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.无更新，输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Cache Hit Ratio [com.iot.mybatis.mapper.UserMapper]: 0.0</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 103887628.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=测试用户22, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Returned connection 103887628 to pool.</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.iot.mybatis.mapper.UserMapper]: 0.5</span><br><span class="line">User [id=1, username=测试用户22, sex=2, birthday=null, address=null]</span><br></pre></td></tr></table></figure><p>2.有更新，输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Cache Hit Ratio [com.iot.mybatis.mapper.UserMapper]: 0.0</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 103887628.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=测试用户22, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Returned connection 103887628 to pool.</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.iot.mybatis.mapper.UserMapper]: 0.5</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Checked out connection 103887628 from pool.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: update user set username=?,birthday=?,sex=?,address=? where id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 张明明(String), null, 2(String), null, 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==    Updates: 1</span><br><span class="line">DEBUG [main] - Committing JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Returned connection 103887628 to pool.</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.iot.mybatis.mapper.UserMapper]: 0.3333333333333333</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Checked out connection 103887628 from pool.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=张明明, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@631330c]</span><br><span class="line">DEBUG [main] - Returned connection 103887628 to pool.</span><br></pre></td></tr></table></figure><h2 id="useCache配置"><a href="#useCache配置" class="headerlink" title="useCache配置"></a>useCache配置</h2><p>在statement中设置<code>useCache=false</code>可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。</p><p><code>&lt;select id=&quot;findOrderListResultMap&quot; resultMap=&quot;ordersUserMap&quot; useCache=&quot;false&quot;&gt;</code></p><p>总结：针对每次查询都需要最新的数据sql，要设置成useCache=false，禁用二级缓存。</p><h2 id="刷新缓存（就是清空缓存）"><a href="#刷新缓存（就是清空缓存）" class="headerlink" title="刷新缓存（就是清空缓存）"></a>刷新缓存（就是清空缓存）</h2><p>刷新缓存就是清空缓存。在mapper的同一个namespace中，如果有其它insert、update、delete操作数据后需要刷新缓存，如果不执行刷新缓存会出现脏读。</p><p> 设置statement配置中的<code>flushCache=&quot;true&quot;</code>属性，默认情况下为true即刷新缓存，如果改成false则不会刷新。使用缓存时如果手动修改数据库表中的查询数据会出现脏读。如下：</p><p><code>&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot; flushCache=&quot;true&quot;&gt;</code></p><p>总结：一般下执行完commit操作都需要刷新缓存，<code>flushCache=true</code>表示刷新缓存，这样可以避免数据库脏读。</p><h2 id="应用场景和局限性"><a href="#应用场景和局限性" class="headerlink" title="应用场景和局限性"></a>应用场景和局限性</h2><ul><li>应用场景</li></ul><p>对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度，业务场景比如：耗时较高的统计分析sql、电话账单查询sql等。</p><p>实现方法如下：通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p><ul><li>局限性</li></ul><p>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲mybatis的二级缓存，二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
      <category term="缓存" scheme="https://brianway.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(14)-查询缓存之一级缓存</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-14-Cache/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-14-Cache/</id>
    <published>2016-03-07T18:39:14.000Z</published>
    <updated>2019-04-07T16:16:59.980Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲mybatis的一级缓存，一级缓存是SqlSession级别的缓存。</p><a id="more"></a><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。</p><p>mybaits提供一级缓存，和二级缓存。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png" alt="查询缓存" title>                </div>                <div class="image-caption">查询缓存</div>            </figure><p>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。</p><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><p>为什么要用缓存？</p><p>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="一级缓存工作原理"><a href="#一级缓存工作原理" class="headerlink" title="一级缓存工作原理"></a>一级缓存工作原理</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="一级缓存工作原理" title>                </div>                <div class="image-caption">一级缓存工作原理</div>            </figure><p>第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。</p><p>如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p><p>第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。</p><h3 id="一级缓存测试"><a href="#一级缓存测试" class="headerlink" title="一级缓存测试"></a>一级缓存测试</h3><p>mybatis默认支持一级缓存，不需要在配置文件去配置。</p><p>按照上边一级缓存原理步骤去测试。</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一级缓存测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();<span class="comment">// 创建代理对象</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下边查询使用一个SqlSession</span></span><br><span class="line"><span class="comment">// 第一次发起请求，查询id为1的用户</span></span><br><span class="line">User user1 = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新user1的信息</span></span><br><span class="line"><span class="comment">// user1.setUsername("测试用户22");</span></span><br><span class="line"><span class="comment">// userMapper.updateUser(user1);</span></span><br><span class="line"><span class="comment">// //执行commit操作去清空缓存</span></span><br><span class="line"><span class="comment">// sqlSession.commit();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次发起请求，查询id为1的用户</span></span><br><span class="line">User user2 = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.不执行更新操作，输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 110771485.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=王五, sex=2, birthday=null, address=null]</span><br><span class="line">User [id=1, username=王五, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - Returned connection 110771485 to pool.</span><br></pre></td></tr></table></figure><p>2.取消测试代码中更新的的注释，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 110771485.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=王五, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: update user set username=?,birthday=?,sex=?,address=? where id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 测试用户22(String), null, 2(String), null, 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==    Updates: 1</span><br><span class="line">DEBUG [main] - Committing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=测试用户22, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - Returned connection 110771485 to pool.</span><br></pre></td></tr></table></figure><h3 id="一级缓存应用"><a href="#一级缓存应用" class="headerlink" title="一级缓存应用"></a>一级缓存应用</h3><p>正式开发，是将mybatis和spring进行整合开发，事务控制在service中。</p><p>一个service方法中包括 很多mapper方法调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">service&#123;</span><br><span class="line">//开始执行时，开启事务，创建SqlSession对象</span><br><span class="line">//第一次调用mapper的方法findUserById(1)</span><br><span class="line"></span><br><span class="line">//第二次调用mapper的方法findUserById(1)，从一级缓存中取数据</span><br><span class="line">//方法结束，sqlSession关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是执行两次service调用查询相同的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲mybatis的一级缓存，一级缓存是SqlSession级别的缓存。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
      <category term="缓存" scheme="https://brianway.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(13)-延迟加载</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-13-lazeloading/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-13-lazeloading/</id>
    <published>2016-03-07T18:39:13.000Z</published>
    <updated>2019-04-07T16:16:59.938Z</updated>
    
    <content type="html"><![CDATA[<p>resultMap可以实现高级映射（使用<code>association</code>、<code>collection</code>实现一对一及一对多映射），<code>association</code>、<code>collection</code>具备延迟加载功能。</p><p>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p><a id="more"></a><p>需求：</p><p>如果查询订单并且关联查询用户信息。如果先查询订单信息即可满足要求，当我们需要查询用户信息时再查询用户信息。把对用户信息的按需去查询就是延迟加载。</p><h2 id="使用association实现延迟加载"><a href="#使用association实现延迟加载" class="headerlink" title="使用association实现延迟加载"></a>使用association实现延迟加载</h2><ul><li>mapper.xml</li></ul><p>需要定义两个mapper的方法对应的statement。</p><p>1.只查询订单信息</p><p><code>SELECT * FROM orders</code></p><p>在查询订单的statement中使用association去延迟加载（执行）下边的satatement(关联查询用户信息)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询订单关联查询用户，用户信息需要延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersUserLazyLoading"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersUserLazyLoadingResultMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM orders</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.关联查询用户信息</p><p>通过上边查询到的订单信息中user_id去关联查询用户信息,使用UserMapper.xml中的findUserById</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">    SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上边先去执行findOrdersUserLazyLoading，当需要去查询用户的时候再去执行findUserById，通过resultMap的定义将延迟加载执行配置起来。</p><ul><li>延迟加载resultMap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 延迟加载的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.iot.mybatis.po.Orders"</span> <span class="attr">id</span>=<span class="string">"OrdersUserLazyLoadingResultMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对订单信息进行映射配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实现对用户信息进行延迟加载</span></span><br><span class="line"><span class="comment">    select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）</span></span><br><span class="line"><span class="comment">    要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace</span></span><br><span class="line"><span class="comment">    column：订单信息中关联用户信息查询的列，是user_id</span></span><br><span class="line"><span class="comment">    关联查询的sql理解为：</span></span><br><span class="line"><span class="comment">    SELECT orders.*,</span></span><br><span class="line"><span class="comment">    (SELECT username FROM USER WHERE orders.user_id = user.id)username,</span></span><br><span class="line"><span class="comment">    (SELECT sex FROM USER WHERE orders.user_id = user.id)sex</span></span><br><span class="line"><span class="comment">     FROM orders</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span>  <span class="attr">javaType</span>=<span class="string">"com.iot.mybatis.po.User"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper.findUserById"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 实现对用户信息进行延迟加载 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>与非延迟加载的主要区别就在<code>association</code>标签属性多了<code>select</code>和<code>column</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span>  <span class="attr">javaType</span>=<span class="string">"com.iot.mybatis.po.User"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">select</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper.findUserById"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单关联查询用户，用户信息是延迟加载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title">findOrdersUserLazyLoading</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li><p>测试思路</p><ul><li>执行上边mapper方法(<code>findOrdersUserLazyLoading</code>)，内部去调用<code>com.iot.mybatis.mapper.OrdersMapperCustom</code>中的<code>findOrdersUserLazyLoading</code>只查询orders信息（单表）。<ul><li>在程序中去遍历上一步骤查询出的List<orders>，当我们调用Orders中的getUser方法时，开始进行延迟加载。</orders></li><li>延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息。</li></ul></li></ul></li><li><p>延迟加载配置</p></li></ul><p>mybatis默认没有开启延迟加载，需要在SqlMapConfig.xml中setting配置。</p><p>在mybatis核心配置文件中配置：lazyLoadingEnabled、aggressiveLazyLoading</p><table><thead><tr><th style="text-align:left">设置项</th><th style="text-align:left">描述</th><th style="text-align:left">允许值</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">lazyLoadingEnabled</td><td style="text-align:left">全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载</td><td style="text-align:left">true/false</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">aggressiveLazyLoading</td><td style="text-align:left">当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。</td><td style="text-align:left">true/false</td><td style="text-align:left">true</td></tr></tbody></table><p>在SqlMapConfig.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开延迟加载 的开关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将积极加载改为消极加载即按需要加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;setting name="cacheEnabled" value="true"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询订单关联查询用户，用户信息使用延迟加载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserLazyLoading</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();<span class="comment">// 创建代理对象</span></span><br><span class="line">OrdersMapperCustom ordersMapperCustom = sqlSession</span><br><span class="line">.getMapper(OrdersMapperCustom.class);</span><br><span class="line"><span class="comment">// 查询订单信息（单表）</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapperCustom.findOrdersUserLazyLoading();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历上边的订单列表</span></span><br><span class="line"><span class="keyword">for</span> (Orders orders : list) &#123;</span><br><span class="line"><span class="comment">// 执行getUser()去查询用户信息，这里实现按需加载</span></span><br><span class="line">User user = orders.getUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载思考"><a href="#延迟加载思考" class="headerlink" title="延迟加载思考"></a>延迟加载思考</h2><p>不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？？</p><p>实现方法如下：</p><p>定义两个mapper方法：</p><ul><li>查询订单列表</li><li>根据用户id查询用户信息</li></ul><p>实现思路：</p><p>先去查询第一个mapper方法，获取订单信息列表；在程序中（service），按需去调用第二个mapper方法去查询用户信息。</p><p>总之，使用延迟加载方法，先去查询简单的sql（最好单表，也可以关联查询），再去按需要加载关联查询的其它信息。</p><h2 id="IDEA的debug小现象"><a href="#IDEA的debug小现象" class="headerlink" title="IDEA的debug小现象"></a>IDEA的debug小现象</h2><p>使用的是intellij IDEA 15.0.2</p><p>先说一下结果吧，IDEA在debug和run条件下，打印结果不同</p><p>我为了验证延迟加载前的user是否为空，在Orders类中加入了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"----test-print-----"</span>+user+<span class="string">"   user==null: "</span>+(user==<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询订单关联查询用户，用户信息使用延迟加载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserLazyLoading</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();<span class="comment">// 创建代理对象</span></span><br><span class="line">OrdersMapperCustom ordersMapperCustom = sqlSession</span><br><span class="line">.getMapper(OrdersMapperCustom.class);</span><br><span class="line"><span class="comment">// 查询订单信息（单表）</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapperCustom.findOrdersUserLazyLoading();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历上边的订单列表</span></span><br><span class="line"><span class="keyword">for</span> (Orders orders : list) &#123;</span><br><span class="line"><span class="comment">// 执行getUser()去查询用户信息，这里实现按需加载</span></span><br><span class="line"><span class="comment">//User user = orders.getUser();</span></span><br><span class="line"><span class="comment">//System.out.println(user);</span></span><br><span class="line">orders.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后分别run和debug</p><ul><li>run输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 110771485.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM orders</span><br><span class="line">DEBUG [main] - ==&gt; Parameters:</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br><span class="line">----test-print-----null   user==null: true</span><br><span class="line">----test-print-----null   user==null: true</span><br><span class="line">----test-print-----null   user==null: true</span><br></pre></td></tr></table></figure><ul><li>debug输出</li></ul><p>在<code>List&lt;Orders&gt; list = ordersMapperCustom.findOrdersUserLazyLoading();</code>打断点，运行完这句,日志输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 1219273867.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@48aca48b]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM orders</span><br><span class="line">DEBUG [main] - ==&gt; Parameters:</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br></pre></td></tr></table></figure><p>但是当你点开<code>list</code>属性时，控制台又输出了，而且可以看到list里的user是有内容的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br></pre></td></tr></table></figure><p>运行完所有程序，控制台输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 1219273867.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@48aca48b]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM orders</span><br><span class="line">DEBUG [main] - ==&gt; Parameters:</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">----test-print-----User [id=1, username=王五, sex=2, birthday=null, address=null]   user==null: false</span><br><span class="line">----test-print-----User [id=1, username=王五, sex=2, birthday=null, address=null]   user==null: false</span><br><span class="line">----test-print-----User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]   user==null: false</span><br></pre></td></tr></table></figure><p>所以，我觉得应该是在debug时，查看属性的话，IDEA会自动调用get相应的方法，从而触发user的查询。延迟加载的源码实现以后我会阅读，把这个问题弄清楚。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;resultMap可以实现高级映射（使用&lt;code&gt;association&lt;/code&gt;、&lt;code&gt;collection&lt;/code&gt;实现一对一及一对多映射），&lt;code&gt;association&lt;/code&gt;、&lt;code&gt;collection&lt;/code&gt;具备延迟加载功能。&lt;/p&gt;
&lt;p&gt;延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(12)-多对多查询</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-12-many-to-many/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-12-many-to-many/</id>
    <published>2016-03-07T18:39:12.000Z</published>
    <updated>2019-04-07T16:16:59.972Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现多对多查询，查询用户及用户购买商品信息。</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>查询主表是：用户表</p><p>关联表：由于用户和商品没有直接关联，通过订单和订单明细进行关联，所以关联表：orders、orderdetail、items</p><ul><li>sql</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">  user.sex,</span><br><span class="line">  user.address,</span><br><span class="line">  orderdetail.id orderdetail_id,</span><br><span class="line">  orderdetail.items_id,</span><br><span class="line">  orderdetail.items_num,</span><br><span class="line">  orderdetail.orders_id,</span><br><span class="line">  items.name items_name,</span><br><span class="line">  items.detail items_detail,</span><br><span class="line">  items.price items_price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  orders,</span><br><span class="line">  <span class="keyword">user</span>,</span><br><span class="line">  orderdetail,</span><br><span class="line">  items</span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id = user.id <span class="keyword">AND</span> orderdetail.orders_id=orders.id <span class="keyword">AND</span> orderdetail.items_id = items.id</span><br></pre></td></tr></table></figure><ul><li>映射思路</li></ul><p>将用户信息映射到user中。</p><p>在user类中添加订单列表属性<code>List&lt;Orders&gt; orderslist</code>，将用户创建的订单映射到orderslist</p><p>在Orders中添加订单明细列表属性<code>List&lt;OrderDetail&gt;orderdetials</code>，将订单的明细映射到orderdetials</p><p>在OrderDetail中添加<code>Items</code>属性，将订单明细所对应的商品映射到Items</p><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询用户及购买的商品信息，使用resultmap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndItemsResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"UserAndItemsResultMap"</span>&gt;</span></span><br><span class="line">   SELECT</span><br><span class="line">      orders.*,</span><br><span class="line">      user.username,</span><br><span class="line">      user.sex,</span><br><span class="line">      user.address,</span><br><span class="line">      orderdetail.id orderdetail_id,</span><br><span class="line">      orderdetail.items_id,</span><br><span class="line">      orderdetail.items_num,</span><br><span class="line">      orderdetail.orders_id,</span><br><span class="line">      items.name items_name,</span><br><span class="line">      items.detail items_detail,</span><br><span class="line">      items.price items_price</span><br><span class="line">    FROM</span><br><span class="line">      orders,</span><br><span class="line">      user,</span><br><span class="line">      orderdetail,</span><br><span class="line">      items</span><br><span class="line">    WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>resultMap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询用户及购买的商品 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.iot.mybatis.po.User"</span> <span class="attr">id</span>=<span class="string">"UserAndItemsResultMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 订单信息</span></span><br><span class="line"><span class="comment">    一个用户对应多个订单，使用collection映射</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"com.iot.mybatis.po.Orders"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 订单明细</span></span><br><span class="line"><span class="comment">         一个订单包括 多个明细</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetails"</span> <span class="attr">ofType</span>=<span class="string">"com.iot.mybatis.po.Orderdetail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 商品信息</span></span><br><span class="line"><span class="comment">             一个订单明细对应一个商品</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"items"</span> <span class="attr">javaType</span>=<span class="string">"com.iot.mybatis.po.Items"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_detail"</span> <span class="attr">property</span>=<span class="string">"detail"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户购买商品信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt;  <span class="title">findUserAndItemsResultMap</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><h2 id="多对多查询总结"><a href="#多对多查询总结" class="headerlink" title="多对多查询总结"></a>多对多查询总结</h2><p>将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）</p><p>针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。</p><p>一对多是多对多的特例，如下需求：</p><p>查询用户购买的商品信息，用户和商品的关系是多对多关系。</p><ul><li>需求1：</li></ul><p>查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)</p><p>企业开发中常见明细列表，用户购买商品明细列表，</p><p>使用resultType将上边查询列映射到pojo输出。</p><ul><li>需求2：</li></ul><p>查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）</p><p>使用resultMap将用户购买的商品明细列表映射到user对象中。</p><p>总结：</p><p>使用resultMap是针对那些对查询结果映射有特殊要求的功能，比如特殊要求映射成list中包括多个list。</p><h2 id="resultMap总结"><a href="#resultMap总结" class="headerlink" title="resultMap总结"></a>resultMap总结</h2><ul><li><p>resultType</p><ul><li>作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中。</li><li>场合：常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</li></ul></li><li><p>resultMap</p></li></ul><p>使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。</p><p>association：</p><ul><li>作用：将关联查询信息映射到一个pojo对象中。</li><li>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul><p>使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。</p><p>collection：</p><ul><li>作用：将关联查询信息映射到一个list集合中。</li><li>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实现多对多查询，查询用户及用户购买商品信息。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(11)-一对多查询</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-11-one-to-many/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-11-one-to-many/</id>
    <published>2016-03-07T18:39:11.000Z</published>
    <updated>2019-04-07T16:16:59.958Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现一对多查询，查询订单及订单明细的信息</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>sql</li></ul><p>确定主查询表：订单表<br>确定关联查询表：订单明细表<br>在一对一查询基础上添加订单明细表关联即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">  user.sex,</span><br><span class="line">  user.address,</span><br><span class="line">  orderdetail.id orderdetail_id,</span><br><span class="line">  orderdetail.items_id,</span><br><span class="line">  orderdetail.items_num,</span><br><span class="line">  orderdetail.orders_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  orders,</span><br><span class="line">  <span class="keyword">user</span>,</span><br><span class="line">  orderdetail</span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id = user.id <span class="keyword">AND</span> orderdetail.orders_id=orders.id</span><br></pre></td></tr></table></figure><p><strong>注意上面的<code>orderdetail.id (AS) orderdetail_id</code>,这里需要取别名，否则由于orders表也有id字段，在后面映射时会冲突</strong></p><ul><li>映射思路</li></ul><p>使用resultType将上边的查询结果映射到pojo中，订单信息的就是重复。</p><p>对orders映射不能出现重复记录。</p><p>在orders.java类中添加<code>List&lt;orderDetail&gt; orderDetails</code>属性。<br>最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的orderDetails属性中。</p><p>映射成的orders记录数为两条（orders信息不重复）,每个orders中的orderDetails属性存储了该订单所对应的订单明细。</p><ul><li>在orders中添加list订单明细属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单明细</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Orderdetail&gt; orderdetails;</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询订单关联查询用户及订单明细，使用resultmap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersAndOrderDetailResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersAndOrderDetailResultMap"</span>&gt;</span></span><br><span class="line">   SELECT</span><br><span class="line">      orders.*,</span><br><span class="line">      user.username,</span><br><span class="line">      user.sex,</span><br><span class="line">      user.address,</span><br><span class="line">      orderdetail.id orderdetail_id,</span><br><span class="line">      orderdetail.items_id,</span><br><span class="line">      orderdetail.items_num,</span><br><span class="line">      orderdetail.orders_id</span><br><span class="line">    FROM</span><br><span class="line">      orders,</span><br><span class="line">      user,</span><br><span class="line">      orderdetail</span><br><span class="line">    WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>resultMap定义</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 订单及订单明细的resultMap</span></span><br><span class="line"><span class="comment">使用extends继承，不用在中配置订单信息和用户信息的映射</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.iot.mybatis.po.Orders"</span> <span class="attr">id</span>=<span class="string">"OrdersAndOrderDetailResultMap"</span> <span class="attr">extends</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 订单信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 订单明细信息</span></span><br><span class="line"><span class="comment">    一个订单关联查询出了多条明细，要使用collection进行映射</span></span><br><span class="line"><span class="comment">    collection：对关联查询到多条记录映射到集合对象中</span></span><br><span class="line"><span class="comment">    property：将关联查询到多条记录映射到com.iot.mybatis.po.Orders哪个属性</span></span><br><span class="line"><span class="comment">    ofType：指定映射到list集合属性中pojo的类型</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetails"</span> <span class="attr">ofType</span>=<span class="string">"com.iot.mybatis.po.Orderdetail"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：订单明细唯 一标识</span></span><br><span class="line"><span class="comment">        property:要将订单明细的唯 一标识 映射到com.iot.mybatis.po.Orderdetail的哪个属性</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单(关联用户)及订单明细</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orders&gt;  <span class="title">findOrdersAndOrderDetailResultMap</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。</p><p>使用resultType实现：将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。</p><p>另外，下面这篇文章对一对多的resultMap机制解释的很清楚：</p><blockquote><p><a href="http://blog.csdn.net/xzm_rainbow/article/details/15336933" target="_blank" rel="noopener">MyBatis：一对多表关系详解(从案例中解析)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实现一对多查询，查询订单及订单明细的信息&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(10)-一对一查询</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-10-one-to-one/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-10-one-to-one/</id>
    <published>2016-03-07T18:39:10.000Z</published>
    <updated>2019-04-07T16:16:59.948Z</updated>
    
    <content type="html"><![CDATA[<p>本文使用两种方式(resultType和resultMap)实现一对一查询，查询订单信息，关联查询创建订单的用户信息</p><a id="more"></a><h2 id="resultType实现"><a href="#resultType实现" class="headerlink" title="resultType实现"></a>resultType实现</h2><ul><li>sql语句</li></ul><p>确定查询的主表：订单表</p><p>确定查询的关联表：用户表</p><p>关联查询使用内连接？还是外连接？</p><p>由于orders表中有一个外键（user_id），通过外键关联查询用户表只能查询出一条记录，可以使用内连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  orders.*,</span><br><span class="line">  USER.username,</span><br><span class="line">  USER.sex,</span><br><span class="line">  USER.address</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  orders,</span><br><span class="line">  <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id = user.id</span><br></pre></td></tr></table></figure><ul><li>创建pojo</li></ul><p>将上边sql查询的结果映射到pojo中，pojo中必须包括所有查询列名。</p><p>原始的Orders.java不能映射全部字段，需要新创建的pojo。</p><p>创建一个pojo继承包括查询字段较多的po类。</p><p>对应数据表的几个pojo类(Items,Orderdetail,Orders)就是把该类的属性名设为和数据表列字段名相同，并为这些属性添加getter和setter，在这里就不贴代码了，只贴出对应于关联查询的自定义pojo类<code>OrdersCustom</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.po;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: OrdersCustom&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 订单的扩展类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersCustom</span> <span class="keyword">extends</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加用户属性</span></span><br><span class="line"><span class="comment">/*USER.username,</span></span><br><span class="line"><span class="comment">  USER.sex,</span></span><br><span class="line"><span class="comment">  USER.address */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 查询订单关联查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersUser"</span>  <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.OrdersCustom"</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">      orders.*,</span><br><span class="line">      user.username,</span><br><span class="line">      user.sex,</span><br><span class="line">      user.address</span><br><span class="line">    FROM</span><br><span class="line">      orders,</span><br><span class="line">      user</span><br><span class="line">    WHERE orders.user_id = user.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单关联查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrdersCustom&gt; <span class="title">findOrdersUser</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resultMap实现"><a href="#resultMap实现" class="headerlink" title="resultMap实现"></a>resultMap实现</h2><p>使用resultMap将查询结果中的订单信息映射到Orders对象中，在orders类中添加User属性，将关联查询出来的用户信息映射到orders对象中的user属性中。</p><ul><li>定义resultMap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 订单查询关联用户的resultMap</span></span><br><span class="line"><span class="comment">将整个查询的结果映射到com.iot.mybatis.po.Orders中</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.iot.mybatis.po.Orders"</span> <span class="attr">id</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射的订单信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id：指定查询列中的唯一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id</span></span><br><span class="line"><span class="comment">        column：订单信息的唯一标识列</span></span><br><span class="line"><span class="comment">        property：订单信息的唯一标识列所映射到Orders中哪个属性</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射的关联的用户信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association：用于映射关联查询单个对象的信息</span></span><br><span class="line"><span class="comment">    property：要将关联查询的用户信息映射到Orders中哪个属性</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span>  <span class="attr">javaType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：关联查询用户的唯 一标识</span></span><br><span class="line"><span class="comment">        column：指定唯 一标识用户信息的列</span></span><br><span class="line"><span class="comment">        javaType：映射到user的哪个属性</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>statement定义</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询订单关联查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersUserResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    orders.*,</span><br><span class="line">    user.username,</span><br><span class="line">    user.sex,</span><br><span class="line">    user.address</span><br><span class="line">    FROM</span><br><span class="line">    orders,</span><br><span class="line">    user</span><br><span class="line">    WHERE orders.user_id = user.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单关联查询用户使用resultMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title">findOrdersUserResultMap</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserResultMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">OrdersMapperCustom ordersMapperCustom = sqlSession</span><br><span class="line">.getMapper(OrdersMapperCustom.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用maper的方法</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapperCustom.findOrdersUserResultMap();</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resultType和resultMap实现一对一查询小结"><a href="#resultType和resultMap实现一对一查询小结" class="headerlink" title="resultType和resultMap实现一对一查询小结"></a>resultType和resultMap实现一对一查询小结</h2><p>实现一对一查询：</p><ul><li>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</li><li>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。</li><li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文使用两种方式(resultType和resultMap)实现一对一查询，查询订单信息，关联查询创建订单的用户信息&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(9)-订单商品数据模型分析</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-9-model-analysis/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-9-model-analysis/</id>
    <published>2016-03-07T18:39:09.000Z</published>
    <updated>2019-04-07T16:16:59.859Z</updated>
    
    <content type="html"><![CDATA[<p>本文对接下来几篇博客中用到的数据模型进行分析，并附上建表sql文件和测试数据文件</p><a id="more"></a><h2 id="数据模型分析思路"><a href="#数据模型分析思路" class="headerlink" title="数据模型分析思路"></a>数据模型分析思路</h2><ul><li>每张表记录的数据内容</li></ul><p>分模块对每张表记录的内容进行熟悉，相当于你学习系统需求（功能）的过程。</p><ul><li>每张表重要的字段设置</li></ul><p>非空字段、外键字段</p><ul><li>数据库级别表与表之间的关系</li></ul><p>外键关系</p><ul><li>表与表之间的业务关系</li></ul><p>在分析表与表之间的业务关系时一定要建立在某个业务意义基础上去分析。</p><h2 id="数据模型分析"><a href="#数据模型分析" class="headerlink" title="数据模型分析"></a>数据模型分析</h2><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90.png" alt="数据模型分析"></p><ul><li>用户表user：记录了购买商品的用户信息</li><li>订单表orders：记录了用户所创建的订单（购买商品的订单）</li><li>订单明细表orderdetail：记录了订单的详细信息即购买商品的信息</li><li>商品表items：记录了商品信息</li></ul><p>表与表之间的业务关系：</p><p>在分析表与表之间的业务关系时需要建立在某个业务意义基础上去分析。先分析数据级别之间有关系的表之间的业务关系：</p><ul><li>usre和orders：</li></ul><p>user—&gt;orders：一个用户可以创建多个订单，一对多<br>orders—&gt;user：一个订单只由一个用户创建，一对一</p><ul><li>orders和orderdetail：</li></ul><p>orders—&gt;orderdetail：一个订单可以包括多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，一对多关系</p><p>orderdetail—&gt; orders：一个订单明细只能包括在一个订单中，一对一</p><ul><li>orderdetail和itesm：</li></ul><p>orderdetail—&gt;itesms：一个订单明细只对应一个商品信息，一对一</p><p>items—&gt; orderdetail:一个商品可以包括在多个订单明细 ，一对多</p><p>再分析数据库级别没有关系的表之间是否有业务关系：</p><ul><li>orders和items：</li></ul><p>orders和items之间可以通过orderdetail表建立关系。</p><h2 id="订单商品数据模型建表sql"><a href="#订单商品数据模型建表sql" class="headerlink" title="订单商品数据模型建表sql"></a>订单商品数据模型建表sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog v10.2</span></span><br><span class="line"><span class="comment">MySQL - 5.1.72-community : Database - mybatis</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="comment">/*Table structure for table `items` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`items`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品定价'</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'商品描述'</span>,</span><br><span class="line">  <span class="string">`pic`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品图片'</span>,</span><br><span class="line">  <span class="string">`createtime`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生产日期'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `orderdetail` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orderdetail`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`orders_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单id'</span>,</span><br><span class="line">  <span class="string">`items_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</span><br><span class="line">  <span class="string">`items_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品购买数量'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_orderdetail_1`</span> (<span class="string">`orders_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_orderdetail_2`</span> (<span class="string">`items_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_orderdetail_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`orders_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`orders`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_orderdetail_2`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`items_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`items`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `orders` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orders`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'下单用户id'</span>,</span><br><span class="line">  <span class="string">`number`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单号'</span>,</span><br><span class="line">  <span class="string">`createtime`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建订单时间'</span>,</span><br><span class="line">  <span class="string">`note`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_orders_1`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_orders_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">27</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure><p>测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog v10.2</span></span><br><span class="line"><span class="comment">MySQL - 5.1.72-community : Database - mybatis</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="comment">/*Data for the table `items` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`items`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`price`</span>,<span class="string">`detail`</span>,<span class="string">`pic`</span>,<span class="string">`createtime`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'台式机'</span>,<span class="number">3000.0</span>,<span class="string">'该电脑质量非常好！！！！'</span>,<span class="literal">NULL</span>,<span class="string">'2015-02-03 13:22:53'</span>),(<span class="number">2</span>,<span class="string">'笔记本'</span>,<span class="number">6000.0</span>,<span class="string">'笔记本性能好，质量好！！！！！'</span>,<span class="literal">NULL</span>,<span class="string">'2015-02-09 13:22:57'</span>),(<span class="number">3</span>,<span class="string">'背包'</span>,<span class="number">200.0</span>,<span class="string">'名牌背包，容量大质量好！！！！'</span>,<span class="literal">NULL</span>,<span class="string">'2015-02-06 13:23:02'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `orderdetail` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`orderdetail`</span>(<span class="string">`id`</span>,<span class="string">`orders_id`</span>,<span class="string">`items_id`</span>,<span class="string">`items_num`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `orders` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`orders`</span>(<span class="string">`id`</span>,<span class="string">`user_id`</span>,<span class="string">`number`</span>,<span class="string">`createtime`</span>,<span class="string">`note`</span>) <span class="keyword">values</span> (<span class="number">3</span>,<span class="number">1</span>,<span class="string">'1000010'</span>,<span class="string">'2015-02-04 13:22:35'</span>,<span class="literal">NULL</span>),(<span class="number">4</span>,<span class="number">1</span>,<span class="string">'1000011'</span>,<span class="string">'2015-02-03 13:22:41'</span>,<span class="literal">NULL</span>),(<span class="number">5</span>,<span class="number">10</span>,<span class="string">'1000012'</span>,<span class="string">'2015-02-12 16:13:23'</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`username`</span>,<span class="string">`birthday`</span>,<span class="string">`sex`</span>,<span class="string">`address`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'王五'</span>,<span class="literal">NULL</span>,<span class="string">'2'</span>,<span class="literal">NULL</span>),(<span class="number">10</span>,<span class="string">'张三'</span>,<span class="string">'2014-07-10'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>),(<span class="number">16</span>,<span class="string">'张小明'</span>,<span class="literal">NULL</span>,<span class="string">'1'</span>,<span class="string">'河南郑州'</span>),(<span class="number">22</span>,<span class="string">'陈小明'</span>,<span class="literal">NULL</span>,<span class="string">'1'</span>,<span class="string">'河南郑州'</span>),(<span class="number">24</span>,<span class="string">'张三丰'</span>,<span class="literal">NULL</span>,<span class="string">'1'</span>,<span class="string">'河南郑州'</span>),(<span class="number">25</span>,<span class="string">'陈小明'</span>,<span class="literal">NULL</span>,<span class="string">'1'</span>,<span class="string">'河南郑州'</span>),(<span class="number">26</span>,<span class="string">'王五'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对接下来几篇博客中用到的数据模型进行分析，并附上建表sql文件和测试数据文件&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="examples" scheme="https://brianway.github.io/tags/examples/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(8)-动态sql</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-8-dynamic-sql/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-8-dynamic-sql/</id>
    <published>2016-03-07T18:39:08.000Z</published>
    <updated>2019-04-07T16:16:59.947Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis核心,对sql语句进行灵活操作，通过表达式进行判断，对sql进行灵活拼接、组装。</p><a id="more"></a><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户信息综合查询</span></span><br><span class="line"><span class="comment">    #&#123;userCustom.sex&#125;:取出pojo包装对象中性别值</span></span><br><span class="line"><span class="comment">    $&#123;userCustom.username&#125;：取出pojo包装对象中用户名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.UserQueryVo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.UserCustom"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="comment">&lt;!--  where 可以自动去掉条件中的第一个and --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex != '' "</span>&gt;</span></span><br><span class="line">               AND user.sex=#&#123;userCustom.sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username != '' "</span>&gt;</span></span><br><span class="line">               AND user.username LIKE '%$&#123;userCustom.username&#125;%'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用户信息综合查询总数</span></span><br><span class="line"><span class="comment">    parameterType：指定输入类型和findUserList一样</span></span><br><span class="line"><span class="comment">    resultType：输出结果类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserCount"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.UserQueryVo"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    SELECT count(*) FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex != '' "</span>&gt;</span></span><br><span class="line">                AND user.sex=#&#123;userCustom.sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username != '' "</span>&gt;</span></span><br><span class="line">                AND user.username LIKE '%$&#123;userCustom.username&#125;%'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p>1.注释掉<code>testFindUserList()</code>方法中的<code>userCustom.setUsername(&quot;张三&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于这里使用动态sql，如果不设置某个值，条件不会拼接在sql中</span></span><br><span class="line">userCustom.setSex(<span class="string">"1"</span>);</span><br><span class="line"><span class="comment">//userCustom.setUsername("张三");</span></span><br><span class="line">userQueryVo.setUserCustom(userCustom);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Checking to see if class com.iot.mybatis.mapper.UserMapper matches criteria [is assignable to Object]</span><br><span class="line">DEBUG [main] - Checking to see if class com.iot.mybatis.mapper.UserMapperTest matches criteria [is assignable to Object]</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 352359770.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@1500955a]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE user.sex=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 6</span><br><span class="line">[User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市], User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州], User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州], User [id=24, username=张三丰, sex=1, birthday=null, address=河南郑州], User [id=25, username=陈小明, sex=1, birthday=null, address=河南郑州], User [id=28, username=王小军, sex=1, birthday=Tue Feb 23 00:00:00 CST 2016, address=河南郑州]]</span><br></pre></td></tr></table></figure><p>可以看到sql语句为<code>reparing: SELECT * FROM user WHERE user.sex=?</code>，没有username的部分</p><p>2.<code>userQueryVo</code>设为null,则<code>userCustom</code>为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List&lt;UserCustom&gt; list = userMapper.findUserList(userQueryVo);</span></span><br><span class="line">List&lt;UserCustom&gt; list = userMapper.findUserList(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user</span><br><span class="line">DEBUG [main] - ==&gt; Parameters:</span><br><span class="line">DEBUG [main] - &lt;==      Total: 9</span><br><span class="line">[User [id=1, username=王五, sex=2, birthday=null, address=null], User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市], User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州], User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州], User [id=24, username=张三丰, sex=1, birthday=null, address=河南郑州], User [id=25, username=陈小明, sex=1, birthday=null, address=河南郑州], User [id=26, username=王五, sex=null, birthday=null, address=null], User [id=27, username=王大军, sex=2, birthday=Tue Feb 23 00:00:00 CST 2016, address=河南郑州], User [id=28, username=王小军, sex=1, birthday=Tue Feb 23 00:00:00 CST 2016, address=河南郑州]]</span><br></pre></td></tr></table></figure><p>可以看到sql语句变为了<code>SELECT * FROM user</code></p><h2 id="sql片段-重点"><a href="#sql片段-重点" class="headerlink" title="sql片段(重点)"></a>sql片段(重点)</h2><p>将上边实现的动态sql判断代码块抽取出来，组成一个sql片段。其它的statement中就可以引用sql片段。</p><ul><li>定义sql片段</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义sql片段</span></span><br><span class="line"><span class="comment">id：sql片段的唯 一标识</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高</span></span><br><span class="line"><span class="comment">在sql片段中不要包括 where</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_user_where"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex!=''"</span>&gt;</span></span><br><span class="line">            AND user.sex = #&#123;userCustom.sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username!=''"</span>&gt;</span></span><br><span class="line">            AND user.username LIKE '%$&#123;userCustom.username&#125;%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用sql片段</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户信息综合查询</span></span><br><span class="line"><span class="comment">    #&#123;userCustom.sex&#125;:取出pojo包装对象中性别值</span></span><br><span class="line"><span class="comment">    $&#123;userCustom.username&#125;：取出pojo包装对象中用户名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.UserQueryVo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.UserCustom"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="comment">&lt;!--  where 可以自动去掉条件中的第一个and --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_user_where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里还要引用其它的sql片段  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p>向sql传递数组或List，mybatis使用foreach解析</p><p>在用户查询列表和查询总数的statement中增加多个id输入查询。两种方法，sql语句如下：</p><ul><li><code>SELECT * FROM USER WHERE id=1 OR id=10 OR id=16</code></li><li><code>SELECT * FROM USER WHERE id IN(1,10,16)</code></li></ul><p>一个使用OR,一个使用IN</p><ul><li>在输入参数类型中添加<code>List&lt;Integer&gt; ids</code>传入多个id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入多个id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">    getter、setter方法</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!=null"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 foreach遍历传入ids</span></span><br><span class="line"><span class="comment">    collection：指定输入 对象中集合属性</span></span><br><span class="line"><span class="comment">    item：每个遍历生成对象中</span></span><br><span class="line"><span class="comment">    open：开始遍历时拼接的串</span></span><br><span class="line"><span class="comment">    close：结束遍历时拼接的串</span></span><br><span class="line"><span class="comment">    separator：遍历的两个对象中需要拼接的串</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用实现下边的sql拼接：</span></span><br><span class="line"><span class="comment">     AND (id=1 OR id=10 OR id=16)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"user_id"</span> <span class="attr">open</span>=<span class="string">"AND ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个遍历需要拼接的串 --&gt;</span></span><br><span class="line">        id=#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实现  “ and id IN(1,10,16)”拼接 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=","&gt;</span></span><br><span class="line"><span class="comment">        每个遍历需要拼接的串</span></span><br><span class="line"><span class="comment">        #&#123;user_id&#125;</span></span><br><span class="line"><span class="comment">    &lt;/foreach&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><p>在<code>testFindUserList</code>中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入多个id</span></span><br><span class="line">List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">ids.add(<span class="number">1</span>);</span><br><span class="line">ids.add(<span class="number">10</span>);</span><br><span class="line">ids.add(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//将ids通过userQueryVo传入statement中</span></span><br><span class="line">userQueryVo.setIds(ids);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis核心,对sql语句进行灵活操作，通过表达式进行判断，对sql进行灵活拼接、组装。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(7)-输出映射</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-7-output-mapping/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-7-output-mapping/</id>
    <published>2016-03-07T18:39:07.000Z</published>
    <updated>2019-04-07T16:16:59.941Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解mybatis的输出映射。</p><a id="more"></a><p>输出映射有两种方式</p><ul><li><code>resultType</code></li><li><code>resultMap</code></li></ul><h2 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h2><ul><li>使用<code>resultType</code>进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。</li><li>如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象。</li><li>只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象。</li></ul><h3 id="输出简单类型"><a href="#输出简单类型" class="headerlink" title="输出简单类型"></a>输出简单类型</h3><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户信息综合查询总数</span></span><br><span class="line"><span class="comment">       parameterType：指定输入类型和findUserList一样</span></span><br><span class="line"><span class="comment">       resultType：输出结果类型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserCount"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.UserQueryVo"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">       SELECT count(*) FROM user WHERE user.sex=#&#123;userCustom.sex&#125; AND user.username LIKE '%$&#123;userCustom.username&#125;%'</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//用户信息综合查询总数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建UserMapper对象，mybatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建包装对象，设置查询条件</span></span><br><span class="line">UserQueryVo userQueryVo = <span class="keyword">new</span> UserQueryVo();</span><br><span class="line">UserCustom userCustom = <span class="keyword">new</span> UserCustom();</span><br><span class="line"><span class="comment">//由于这里使用动态sql，如果不设置某个值，条件不会拼接在sql中</span></span><br><span class="line">userCustom.setSex(<span class="string">"1"</span>);</span><br><span class="line">userCustom.setUsername(<span class="string">"小"</span>);</span><br><span class="line">userQueryVo.setUserCustom(userCustom);</span><br><span class="line"><span class="comment">//调用userMapper的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = userMapper.findUserCount(userQueryVo);</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结</li></ul><p>查询出来的结果集只有一行且一列，可以使用简单类型进行输出映射。</p><h3 id="输出pojo对象和pojo列表"><a href="#输出pojo对象和pojo列表" class="headerlink" title="输出pojo对象和pojo列表"></a>输出pojo对象和pojo列表</h3><p><strong>不管是输出的pojo单个对象还是一个列表（list中包括pojo），在mapper.xml中<code>resultType</code>指定的类型是一样的。</strong></p><p>在mapper.java指定的方法返回值类型不一样：</p><ul><li>输出单个pojo对象，方法返回值是单个对象类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>输出pojo对象list，方法返回值是List<pojo></pojo></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名列查询用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p><strong>生成的动态代理对象中是根据mapper方法的返回值类型确定是调用<code>selectOne</code>(返回单个对象调用)还是<code>selectList</code> （返回集合对象调用 ）.</strong></p><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>mybatis中使用resultMap完成高级输出结果映射。(一对多，多对多)</p><h3 id="resultMap使用方法"><a href="#resultMap使用方法" class="headerlink" title="resultMap使用方法"></a>resultMap使用方法</h3><p>如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间作一个映射关系。</p><p>1.定义resultMap</p><p>2.使用resultMap作为statement的输出映射类型</p><ul><li>定义reusltMap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义resultMap</span></span><br><span class="line"><span class="comment">将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type：resultMap最终映射的java对象类型,可以使用别名</span></span><br><span class="line"><span class="comment">id：对resultMap的唯一标识</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- id表示查询结果集中唯一标识</span></span><br><span class="line"><span class="comment"> column：查询出来的列名</span></span><br><span class="line"><span class="comment"> property：type指定的pojo类型中的属性名</span></span><br><span class="line"><span class="comment"> 最终resultMap对column和property作一个映射关系 （对应关系）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id_"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> result：对普通名映射定义</span></span><br><span class="line"><span class="comment"> column：查询出来的列名</span></span><br><span class="line"><span class="comment"> property：type指定的pojo类型中的属性名</span></span><br><span class="line"><span class="comment"> 最终resultMap对column和property作一个映射关系 （对应关系）</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username_"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用resultMap作为statement的输出映射类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用resultMap进行输出映射</span></span><br><span class="line"><span class="comment">        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByIdResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">        SELECT id id_,username username_ FROM USER WHERE id=#&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户信息，使用resultMap输出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserByIdResultMap</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByIdResultMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建UserMapper对象，mybatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用userMapper的方法</span></span><br><span class="line"></span><br><span class="line">User user = userMapper.findUserByIdResultMap(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。</p><p>如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间作一个映射关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲解mybatis的输出映射。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(6)-输入映射</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-6-input-mapping/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-6-input-mapping/</id>
    <published>2016-03-07T18:39:06.000Z</published>
    <updated>2019-04-07T16:16:59.870Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解mybatis的输入映射。</p><a id="more"></a><p>通过parameterType指定输入参数的类型，类型可以是</p><ul><li>简单类型</li><li>hashmap</li><li>pojo的包装类型</li></ul><h2 id="传递pojo的包装对象"><a href="#传递pojo的包装对象" class="headerlink" title="传递pojo的包装对象"></a>传递pojo的包装对象</h2><ul><li>定义包装类型pojo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.po;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brian on 2016/2/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在这里包装所需要的查询条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户查询条件</span></span><br><span class="line">    <span class="keyword">private</span> UserCustom userCustom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserCustom <span class="title">getUserCustom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userCustom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserCustom</span><span class="params">(UserCustom userCustom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userCustom = userCustom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以包装其它的查询条件，订单、商品</span></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，UserCustom类继承User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCustom</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><p>在UserMapper.xml中定义用户信息综合查询（查询条件复杂，通过高级查询进行复杂关联查询）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户信息综合查询</span></span><br><span class="line"><span class="comment">    #&#123;userCustom.sex&#125;:取出pojo包装对象中性别值</span></span><br><span class="line"><span class="comment">    $&#123;userCustom.username&#125;：取出pojo包装对象中用户名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.UserQueryVo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.UserCustom"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE user.sex=#&#123;userCustom.sex&#125; AND user.username LIKE '%$&#123;userCustom.username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意不要将<code>#{userCustom.sex}</code>中的<code>userCustom</code>写成<code>UserCustom</code>,前者指属性名(由于使用IDE提示自动补全，所以只是把类型名首字母小写了)，后者指类型名，这里是<code>UserQueryVo</code>类中的<code>userCustom</code>属性，是<strong>属性名</strong>。写错会报如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="line">### Error querying database.  Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named &apos;UserCustom&apos; in &apos;class com.iot.mybatis.po.UserQueryVo&apos;</span><br><span class="line">### Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named &apos;UserCustom&apos; in &apos;class com.iot.mybatis.po.UserQueryVo&apos;</span><br></pre></td></tr></table></figure><ul><li>mapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户信息综合查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserCustom&gt; <span class="title">findUserList</span><span class="params">(UserQueryVo userQueryVo)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户信息的综合 查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建UserMapper对象，mybatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建包装对象，设置查询条件</span></span><br><span class="line">UserQueryVo userQueryVo = <span class="keyword">new</span> UserQueryVo();</span><br><span class="line">UserCustom userCustom = <span class="keyword">new</span> UserCustom();</span><br><span class="line"><span class="comment">//由于这里使用动态sql，如果不设置某个值，条件不会拼接在sql中</span></span><br><span class="line">userCustom.setSex(<span class="string">"1"</span>);</span><br><span class="line">userCustom.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">userQueryVo.setUserCustom(userCustom);</span><br><span class="line"><span class="comment">//调用userMapper的方法</span></span><br><span class="line"></span><br><span class="line">List&lt;UserCustom&gt; list = userMapper.findUserList(userQueryVo);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲解mybatis的输入映射。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(5)-配置文件</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-5-configuration/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-5-configuration/</id>
    <published>2016-03-07T18:39:05.000Z</published>
    <updated>2019-04-07T16:16:59.967Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解SqlMapConfig配置文件</p><a id="more"></a><blockquote><p>参考<a href="http://www.mybatis.org/mybatis-3/configuration.html" target="_blank" rel="noopener">mybatis – MyBatis 3 <code>|</code> Configuration</a></p></blockquote><p>SqlMapConfig.xml中配置的内容和顺序如下</p><ul><li>properties（属性）</li><li>settings（全局配置参数）</li><li><strong>typeAliases（类型别名）</strong></li><li>typeHandlers（类型处理器）</li><li><em>objectFactory（对象工厂）</em></li><li><em>plugins（插件）</em></li><li>environments（环境集合属性对象）<ul><li>environment（环境子属性对象）<ul><li>transactionManager（事务管理）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><strong>mappers（映射器）</strong></li></ul><p>(注：粗体是重点，斜体不常用)</p><h2 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties(属性)"></a>properties(属性)</h2><p>将数据库连接参数单独配置在db.properties中，只需要在SqlMapConfig.xml中加载db.properties的属性值。在SqlMapConfig.xml中就不需要对数据库连接参数硬编码。</p><p>将数据库连接参数只配置在db.properties中。原因：方便对参数进行统一管理，其它xml可以引用该db.properties。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure><p>在sqlMapConfig.xml加载属性文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用jdbc事务管理，事务控制由mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池,由mybatis管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意： MyBatis 将按照下面的顺序(优先级)来加载属性：</p><ul><li>在<code>properties</code>元素体内定义的属性首先被读取。</li><li>然后会读取<code>properties</code>元素中resource或url加载的属性，它会覆盖已读取的同名属性。</li><li>最后读取<code>parameterType</code>传递的属性，它会覆盖已读取的同名属性。</li></ul><p>建议：</p><ul><li>不要在<code>properties</code>元素体内添加任何属性值，只将属性值定义在properties文件中。</li><li>在properties文件中定义属性名要有一定的特殊性，如：XXXXX.XXXXX.XXXX</li></ul><h2 id="settings-全局参数配置"><a href="#settings-全局参数配置" class="headerlink" title="settings(全局参数配置)"></a>settings(全局参数配置)</h2><p>mybatis框架在运行时可以调整一些运行参数,比如：开启二级缓存、开启延迟加载…</p><p>全局参数将会影响mybatis的运行行为。具体参考官网：</p><blockquote><p><a href="http://www.mybatis.org/mybatis-3/configuration.html#settings" target="_blank" rel="noopener">mybatis-settings</a></p></blockquote><h2 id="typeAliases-类型别名"><a href="#typeAliases-类型别名" class="headerlink" title="typeAliases(类型别名)"></a>typeAliases(类型别名)</h2><p>在mapper.xml中，定义很多的statement，statement需要<code>parameterType</code>指定输入参数的类型、需要<code>resultType</code>指定输出结果的映射类型。</p><p>如果在指定类型时输入类型全路径，不方便进行开发，可以针对<code>parameterType</code>或<code>resultType</code>指定的类型定义一些别名，在mapper.xml中通过别名定义，方便开发。</p><ul><li>mybatis默认支持别名</li></ul><blockquote><p>参考 <a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="noopener">typeAliases</a></p></blockquote><table><thead><tr><th style="text-align:left">别名</th><th style="text-align:left">映射的类型</th></tr></thead><tbody><tr><td style="text-align:left">_byte</td><td style="text-align:left">byte</td></tr><tr><td style="text-align:left">_long</td><td style="text-align:left">long</td></tr><tr><td style="text-align:left">_short</td><td style="text-align:left">short</td></tr><tr><td style="text-align:left">_int</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_integer</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_double</td><td style="text-align:left">double</td></tr><tr><td style="text-align:left">_float</td><td style="text-align:left">float</td></tr><tr><td style="text-align:left">_boolean</td><td style="text-align:left">boolean</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">String</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">Byte</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">Long</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">Short</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">integer</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">Double</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">Float</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">Boolean</td></tr><tr><td style="text-align:left">date</td><td style="text-align:left">Date</td></tr><tr><td style="text-align:left">decimal</td><td style="text-align:left">BigDecimal</td></tr><tr><td style="text-align:left">bigdecimal</td><td style="text-align:left">BigDecimal</td></tr></tbody></table><ul><li>自定义别名<ul><li>单个别名定义</li><li>批量定义别名（常用）</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 别名定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 针对单个别名定义</span></span><br><span class="line"><span class="comment">    type：类型的路径</span></span><br><span class="line"><span class="comment">    alias：别名</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;typeAlias type="cn.itcast.mybatis.po.User" alias="user"/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义</span></span><br><span class="line"><span class="comment">    指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.iot.mybatis.po"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="typeHandlers-类型处理器"><a href="#typeHandlers-类型处理器" class="headerlink" title="typeHandlers(类型处理器)"></a>typeHandlers(类型处理器)</h2><p>mybatis中通过typeHandlers完成jdbc类型和java类型的转换。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis自带的类型处理器基本上满足日常需求，不需要单独定义。</p><p>mybatis支持类型处理器</p><blockquote><p> 参考 <a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers</a></p></blockquote><table><thead><tr><th style="text-align:left">类型处理器</th><th style="text-align:left">Java类型</th><th style="text-align:left">JDBC类型</th></tr></thead><tbody><tr><td style="text-align:left">BooleanTypeHandler</td><td style="text-align:left">Boolean，boolean</td><td style="text-align:left">任何兼容的布尔值</td></tr><tr><td style="text-align:left">ByteTypeHandler</td><td style="text-align:left">Byte，byte</td><td style="text-align:left">任何兼容的数字或字节类型</td></tr><tr><td style="text-align:left">ShortTypeHandler</td><td style="text-align:left">Short，short</td><td style="text-align:left">任何兼容的数字或短整型</td></tr><tr><td style="text-align:left">IntegerTypeHandler</td><td style="text-align:left">Integer，int</td><td style="text-align:left">任何兼容的数字和整型</td></tr><tr><td style="text-align:left">LongTypeHandler</td><td style="text-align:left">Long，long</td><td style="text-align:left">任何兼容的数字或长整型</td></tr><tr><td style="text-align:left">FloatTypeHandler</td><td style="text-align:left">Float，float</td><td style="text-align:left">任何兼容的数字或单精度浮点型</td></tr><tr><td style="text-align:left">DoubleTypeHandler</td><td style="text-align:left">Double，double</td><td style="text-align:left">任何兼容的数字或双精度浮点型</td></tr><tr><td style="text-align:left">BigDecimalTypeHandler</td><td style="text-align:left">BigDecimal</td><td style="text-align:left">任何兼容的数字或十进制小数类型</td></tr><tr><td style="text-align:left">StringTypeHandler</td><td style="text-align:left">String</td><td style="text-align:left">CHAR和VARCHAR类型</td></tr><tr><td style="text-align:left">ClobTypeHandler</td><td style="text-align:left">String</td><td style="text-align:left">CLOB和LONGVARCHAR类型</td></tr><tr><td style="text-align:left">NStringTypeHandler</td><td style="text-align:left">String</td><td style="text-align:left">NVARCHAR和NCHAR类型</td></tr><tr><td style="text-align:left">NClobTypeHandler</td><td style="text-align:left">String</td><td style="text-align:left">NCLOB类型</td></tr><tr><td style="text-align:left">ByteArrayTypeHandler</td><td style="text-align:left">byte[]</td><td style="text-align:left">任何兼容的字节流类型</td></tr><tr><td style="text-align:left">BlobTypeHandler</td><td style="text-align:left">byte[]</td><td style="text-align:left">BLOB和LONGVARBINARY类型</td></tr><tr><td style="text-align:left">DateTypeHandler</td><td style="text-align:left">Date（java.util）</td><td style="text-align:left">TIMESTAMP类型</td></tr><tr><td style="text-align:left">DateOnlyTypeHandler</td><td style="text-align:left">Date（java.util）</td><td style="text-align:left">DATE类型</td></tr><tr><td style="text-align:left">TimeOnlyTypeHandler</td><td style="text-align:left">Date（java.util）</td><td style="text-align:left">TIME类型</td></tr><tr><td style="text-align:left">SqlTimestampTypeHandler</td><td style="text-align:left">Timestamp（java.sql）</td><td style="text-align:left">TIMESTAMP类型</td></tr><tr><td style="text-align:left">SqlDateTypeHandler</td><td style="text-align:left">Date（java.sql）</td><td style="text-align:left">DATE类型</td></tr><tr><td style="text-align:left">SqlTimeTypeHandler</td><td style="text-align:left">Time（java.sql）</td><td style="text-align:left">TIME类型</td></tr><tr><td style="text-align:left">ObjectTypeHandler</td><td style="text-align:left">任意</td><td style="text-align:left">其他或未指定类型</td></tr><tr><td style="text-align:left">EnumTypeHandler</td><td style="text-align:left">Enumeration类型</td><td style="text-align:left">VARCHAR-任何兼容的字符串类型，作为代码存储（而不是索引）</td></tr></tbody></table><h2 id="mappers-映射配置"><a href="#mappers-映射配置" class="headerlink" title="mappers(映射配置)"></a>mappers(映射配置)</h2><ul><li>通过resource加载单个映射文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过mapper接口加载单个mapper</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 通过mapper接口加载单个 映射文件</span></span><br><span class="line"><span class="comment">        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中</span></span><br><span class="line"><span class="comment">        上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.iot.mybatis.mapper------------------package包</span><br><span class="line">           |----UserMapper.java</span><br><span class="line">           |----UserMapper.xml</span><br></pre></td></tr></table></figure><ul><li>批量加载mapper(推荐使用)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量加载mapper</span></span><br><span class="line"><span class="comment">指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载</span></span><br><span class="line"><span class="comment">遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中</span></span><br><span class="line"><span class="comment">上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.iot.mybatis.mapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲解SqlMapConfig配置文件&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(4)-开发dao方法</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-4-dao/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-4-dao/</id>
    <published>2016-03-07T18:39:04.000Z</published>
    <updated>2019-04-07T16:16:59.942Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解SqlSession，并对两种方法(原始dao开发和mapper代理开发)分别做简单展示</p><a id="more"></a><h2 id="SqlSession使用范围"><a href="#SqlSession使用范围" class="headerlink" title="SqlSession使用范围"></a>SqlSession使用范围</h2><ul><li>SqlSessionFactoryBuilder</li></ul><p>通过<code>SqlSessionFactoryBuilder</code>创建会话工厂<code>SqlSessionFactory</code>将<code>SqlSessionFactoryBuilder</code>当成一个工具类使用即可，不需要使用单例管理<code>SqlSessionFactoryBuilder</code>。在需要创建<code>SqlSessionFactory</code>时候，只需要new一次<code>SqlSessionFactoryBuilder</code>即可。</p><ul><li><code>SqlSessionFactory</code></li></ul><p>通过<code>SqlSessionFactory</code>创建<code>SqlSession</code>，使用单例模式管理<code>sqlSessionFactory</code>（工厂一旦创建，使用一个实例）。将来mybatis和spring整合后，使用单例模式管理<code>sqlSessionFactory</code>。</p><ul><li><code>SqlSession</code></li></ul><p><code>SqlSession</code>是一个面向用户（程序员）的接口。SqlSession中提供了很多操作数据库的方法：如：<code>selectOne</code>(返回单个对象)、<code>selectList</code>（返回单个或多个对象）。</p><p><code>SqlSession</code>是线程不安全的，在<code>SqlSesion</code>实现类中除了有接口中的方法（操作数据库的方法）还有数据域属性。</p><p><code>SqlSession</code>最佳应用场合在方法体内，定义成局部变量使用。</p><h2 id="原始dao开发方法"><a href="#原始dao开发方法" class="headerlink" title="原始dao开发方法"></a>原始dao开发方法</h2><p>程序员需要写dao接口和dao实现类</p><h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名列查询用户列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dao接口实现类"><a href="#dao接口实现类" class="headerlink" title="dao接口实现类"></a>dao接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.mybatis.po.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brian on 2016/2/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="comment">// 需要向dao实现类中注入SqlSessionFactory</span></span><br><span class="line">    <span class="comment">// 这里通过构造方法注入</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,id);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行插入操作</span></span><br><span class="line">        sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行插入操作</span></span><br><span class="line">        sqlSession.delete(<span class="string">"test.deleteUser"</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.mybatis.po.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此方法是在执行testFindUserById之前执行</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建sqlSessionFactory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mybatis配置文件</span></span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">// 得到配置文件流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">.build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建UserDao的对象</span></span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl(sqlSessionFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用UserDao的方法</span></span><br><span class="line">User user = userDao.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结原始dao开发问题"><a href="#总结原始dao开发问题" class="headerlink" title="总结原始dao开发问题"></a>总结原始dao开发问题</h3><p>1.dao接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。</p><p>2.调用sqlsession方法时将statement的id硬编码了</p><p>3.调用sqlsession方法时传入的变量，由于sqlsession方法使用泛型，即使变量类型传入错误，在编译阶段也不报错，不利于程序员开发。</p><h2 id="mapper代理方法"><a href="#mapper代理方法" class="headerlink" title="mapper代理方法"></a>mapper代理方法</h2><p>程序员只需要mapper接口（相当 于dao接口）</p><p>程序员还需要编写mapper.xml映射文件</p><p>程序员编写mapper接口需要遵循一些开发规范，mybatis可以自动生成mapper接口实现类代理对象。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li>在mapper.xml中namespace等于mapper接口地址</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></span><br><span class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>mapper.java接口中的方法名和mapper.xml中statement的id一致</p></li><li><p>mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。</p></li><li><p>mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">    SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>总结：以上开发规范主要是对下边的代码进行统一生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>, id);</span><br><span class="line">sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></span><br><span class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.iot.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需求:通过id查询用户表的记录 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过select执行数据库查询</span></span><br><span class="line"><span class="comment">     id:标识映射文件中的sql，称为statement的id</span></span><br><span class="line"><span class="comment">     将sql语句封装到mappedStatement对象中，所以将id称为statement的id</span></span><br><span class="line"><span class="comment">     parameterType:指定输入参数的类型</span></span><br><span class="line"><span class="comment">     #&#123;&#125;标示一个占位符,</span></span><br><span class="line"><span class="comment">     #&#123;value&#125;其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#&#123;&#125;中的值可以任意。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户名称模糊查询用户信息，可能返回多条</span></span><br><span class="line"><span class="comment">resultType：指定就是单条记录所映射的java对象类型</span></span><br><span class="line"><span class="comment">$&#123;&#125;:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。</span></span><br><span class="line"><span class="comment">使用$&#123;&#125;拼接sql，引起 sql注入</span></span><br><span class="line"><span class="comment">$&#123;value&#125;：接收输入参数的内容，如果传入类型是简单类型，$&#123;&#125;中只能使用value</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE username LIKE '%$&#123;value&#125;%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加用户</span></span><br><span class="line"><span class="comment">        parameterType：指定输入 参数类型是pojo（包括 用户信息）</span></span><br><span class="line"><span class="comment">        #&#123;&#125;中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         将插入数据的主键返回，返回到user对象中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性</span></span><br><span class="line"><span class="comment">         order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</span></span><br><span class="line"><span class="comment">         resultType：指定SELECT LAST_INSERT_ID()的结果类型</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">          SELECT LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        INSERT INTO user (username,birthday,sex,address)values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用mysql的uuid（）生成主键</span></span><br><span class="line"><span class="comment">            执行过程：</span></span><br><span class="line"><span class="comment">            首先通过uuid()得到主键，将主键设置到user对象的id属性中</span></span><br><span class="line"><span class="comment">            其次在insert执行时，从user对象中取出id属性值</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  &lt;selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"&gt;</span></span><br><span class="line"><span class="comment">            SELECT uuid()</span></span><br><span class="line"><span class="comment">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">        insert into user(id,username,birthday,sex,address) value(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;) --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除 用户</span></span><br><span class="line"><span class="comment">        根据id删除用户，需要输入 id值</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id更新用户</span></span><br><span class="line"><span class="comment">    分析：</span></span><br><span class="line"><span class="comment">    需要传入用户的id</span></span><br><span class="line"><span class="comment">    需要传入用户的更新信息</span></span><br><span class="line"><span class="comment">    parameterType指定user对象，包括 id和更新信息，注意：id必须存在</span></span><br><span class="line"><span class="comment">    #&#123;id&#125;：从输入 user对象中获取id属性值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在SqlMapConfig.xml中加载映射文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UserMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名列查询用户列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapperTest/java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解Before是在执行本类所有测试方法之前先调用这个方法  </span></span><br><span class="line">    <span class="meta">@Before</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;  </span><br><span class="line">        <span class="comment">//创建SqlSessionFactory  </span></span><br><span class="line">        String resource=<span class="string">"SqlMapConfig.xml"</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//将配置文件加载成流  </span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);  </span><br><span class="line">        <span class="comment">//创建会话工厂，传入mybatis配置文件的信息  </span></span><br><span class="line">        sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;  </span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建UserMapper代理对象  </span></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用userMapper的方法  </span></span><br><span class="line">        User user=userMapper.findUserById(<span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        System.out.println(user.getUsername());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些问题总结"><a href="#一些问题总结" class="headerlink" title="一些问题总结"></a>一些问题总结</h3><ul><li>代理对象内部调用<code>selectOne</code>或<code>selectList</code><ul><li>如果mapper方法返回单个pojo对象（非集合对象），代理对象内部通过selectOne查询数据库。</li><li>如果mapper方法返回集合对象，代理对象内部通过selectList查询数据库。</li></ul></li></ul><ul><li>mapper接口方法参数只能有一个是否影响系统开发</li></ul><p>mapper接口方法参数只能有一个，系统是否不利于扩展维护?系统框架中，dao层的代码是被业务层公用的。即使mapper接口只有一个参数，可以使用包装类型的pojo满足不同的业务方法的需求。</p><p>注意：持久层方法的参数可以包装类型、map…等，service方法中建议不要使用包装类型（不利于业务层的可扩展）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解SqlSession，并对两种方法(原始dao开发和mapper代理开发)分别做简单展示&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(3)-入门程序二</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-3-starting-2/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-3-starting-2/</id>
    <published>2016-03-07T18:38:04.000Z</published>
    <updated>2019-04-07T16:16:59.944Z</updated>
    
    <content type="html"><![CDATA[<p>添加、删除、更新用户</p><a id="more"></a><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><ul><li>User.xml,在入门程序一基础上增加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加用户</span></span><br><span class="line"><span class="comment">    parameterType：指定输入 参数类型是pojo（包括 用户信息）</span></span><br><span class="line"><span class="comment">    #&#123;&#125;中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     将插入数据的主键返回，返回到user对象中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性</span></span><br><span class="line"><span class="comment">     order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</span></span><br><span class="line"><span class="comment">     resultType：指定SELECT LAST_INSERT_ID()的结果类型</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">      SELECT LAST_INSERT_ID()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO user (username,birthday,sex,address)values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mysql的uuid（）生成主键</span></span><br><span class="line"><span class="comment">        执行过程：</span></span><br><span class="line"><span class="comment">        首先通过uuid()得到主键，将主键设置到user对象的id属性中</span></span><br><span class="line"><span class="comment">        其次在insert执行时，从user对象中取出id属性值</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"&gt;</span></span><br><span class="line"><span class="comment">        SELECT uuid()</span></span><br><span class="line"><span class="comment">    &lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">    insert into user(id,username,birthday,sex,address) value(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;) --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 删除 用户</span></span><br><span class="line"><span class="comment">    根据id删除用户，需要输入 id值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据id更新用户</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">需要传入用户的id</span></span><br><span class="line"><span class="comment">需要传入用户的更新信息</span></span><br><span class="line"><span class="comment">parameterType指定user对象，包括 id和更新信息，注意：id必须存在</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从输入 user对象中获取id属性值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">    update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(注：这里的<code>birthday</code>字段在mysql表中是DATE类型，在User类中<code>birthday</code>属性是java的<code>java.util.Date</code>类型，并没有进行转换就插入成功了。</p><p>看到有的文章说，在字段中有Date和DateTime类型，在插入数据时只要将实体的属性设置成Timestamp就会对应mysql的DateTime类型，Date会对应mysql的Date类型:<br><code>#{modified_date,jdbcType=TIMESTAMP}、#{date,jdbcType=DATE}</code></p><p>我上面的<code>birthday</code>，配置成<code>#{birthday,jdbcType=TIMESTAMP}</code>，结果也插入成功了，具体实现待查)</p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><ul><li>User.java,在入门程序一基础上增加三个测试方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加用户信息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// mybatis配置文件</span></span><br><span class="line">      String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">      <span class="comment">// 得到配置文件流</span></span><br><span class="line">      InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">      SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">              .build(inputStream);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过工厂得到SqlSession</span></span><br><span class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">// 插入用户对象</span></span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setUsername(<span class="string">"王小军"</span>);</span><br><span class="line">      user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">      user.setSex(<span class="string">"1"</span>);</span><br><span class="line">      user.setAddress(<span class="string">"河南郑州"</span>);</span><br><span class="line"></span><br><span class="line">      sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取用户信息主键</span></span><br><span class="line">      System.out.println(user.getId());</span><br><span class="line">      <span class="comment">// 关闭会话</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据id删除 用户信息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// mybatis配置文件</span></span><br><span class="line">      String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">      <span class="comment">// 得到配置文件流</span></span><br><span class="line">      InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">      SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">              .build(inputStream);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过工厂得到SqlSession</span></span><br><span class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 传入id删除 用户</span></span><br><span class="line">      sqlSession.delete(<span class="string">"test.deleteUser"</span>, <span class="number">29</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 关闭会话</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新用户信息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// mybatis配置文件</span></span><br><span class="line">      String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">      <span class="comment">// 得到配置文件流</span></span><br><span class="line">      InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">      SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">              .build(inputStream);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过工厂得到SqlSession</span></span><br><span class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">// 更新用户信息</span></span><br><span class="line"></span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      <span class="comment">//必须设置id</span></span><br><span class="line">      user.setId(<span class="number">27</span>);</span><br><span class="line">      user.setUsername(<span class="string">"王大军"</span>);</span><br><span class="line">      user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">      user.setSex(<span class="string">"2"</span>);</span><br><span class="line">      user.setAddress(<span class="string">"河南郑州"</span>);</span><br><span class="line"></span><br><span class="line">      sqlSession.update(<span class="string">"test.updateUser"</span>, user);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 关闭会话</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>自增主键返回</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">          SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有在上面的配置中配置<code>resultType</code>，则会报下面的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="line">### Error updating database.  Cause: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement &apos;test.insertUser!selectKey&apos;.  It&apos;s likely that neither a Result Type nor a Result Map was specified.</span><br><span class="line">### The error may exist in sqlmap/User.xml</span><br><span class="line">### The error may involve test.insertUser!selectKey-Inline</span><br><span class="line">### The error occurred while setting parameters</span><br><span class="line">### SQL: SELECT LAST_INSERT_ID()</span><br><span class="line">### Cause: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement &apos;test.insertUser!selectKey&apos;.  It&apos;s likely that neither a Result Type nor a Result Map was specified.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Caused by: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement &apos;test.insertUser!selectKey&apos;.  It&apos;s likely that neither a Result Type nor a Result Map was specified.</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>#{}</code>和<code>${}</code></li></ul><p><code>#{}</code>表示一个占位符号，<code>#{}</code>接收输入参数，类型可以是简单类型，pojo、hashmap。</p><p>如果接收简单类型，<code>#{}</code>中可以写成value或其它名称。</p><p><code>#{}</code>接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性…的方式获取对象属性值。</p><p><code>${}</code>表示一个拼接符号，会引用sql注入，所以<strong>不建议使用<code>${}</code></strong>。</p><p><code>${}</code>接收输入参数，类型可以是简单类型，pojo、hashmap。</p><p>如果接收简单类型，<code>${}</code>中只能写成value。</p><p><code>${}</code>接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性…的方式获取对象属性值。</p><h2 id="mybatis和hibernate本质区别和应用场景"><a href="#mybatis和hibernate本质区别和应用场景" class="headerlink" title="mybatis和hibernate本质区别和应用场景"></a>mybatis和hibernate本质区别和应用场景</h2><ul><li>hibernate</li></ul><p>是一个标准ORM框架（对象关系映射）。入门门槛较高的，不需要程序写sql，sql语句自动生成了。对sql语句进行优化、修改比较困难的。</p><p>应用场景：适用与需求变化不多的中小型项目，比如：后台管理系统，erp、orm、oa。。</p><ul><li>mybatis</li></ul><p>专注是sql本身，需要程序员自己编写sql语句，sql修改、优化比较方便。mybatis是一个不完全的ORM框架，虽然程序员自己写sql，mybatis也可以实现映射（输入映射、输出映射）。</p><p>应用场景：适用与需求变化较多的项目，比如：互联网项目。</p><p>企业进行技术选型，以低成本高回报作为技术选型的原则，根据项目组的技术力量进行选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;添加、删除、更新用户&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="examples" scheme="https://brianway.github.io/tags/examples/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(3)-入门程序一</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-3-starting-1/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-3-starting-1/</id>
    <published>2016-03-07T18:38:03.000Z</published>
    <updated>2019-04-07T16:16:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis入门程序</p><a id="more"></a><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>在IDEA中新建了一个普通的java项目，新建文件夹lib,加入jar包,工程结构如图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E4%B8%80-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="mybatis_入门程序一-工程结构图" title>                </div>                <div class="image-caption">mybatis_入门程序一-工程结构图</div>            </figure><ul><li>log4j.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><ul><li>SqlMapConfig.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理，事务控制由mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池,由mybatis管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><ul><li>sqlmap/User.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></span><br><span class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需求:通过id查询用户表的记录 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过select执行数据库查询</span></span><br><span class="line"><span class="comment">     id:标识映射文件中的sql，称为statement的id</span></span><br><span class="line"><span class="comment">     将sql语句封装到mappedStatement对象中，所以将id称为statement的id</span></span><br><span class="line"><span class="comment">     parameterType:指定输入参数的类型</span></span><br><span class="line"><span class="comment">     #&#123;&#125;标示一个占位符,</span></span><br><span class="line"><span class="comment">     #&#123;value&#125;其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#&#123;&#125;中的值可以任意。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM  user  WHERE id=#&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户名称模糊查询用户信息，可能返回多条</span></span><br><span class="line"><span class="comment">resultType：指定就是单条记录所映射的java对象类型</span></span><br><span class="line"><span class="comment">$&#123;&#125;:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。</span></span><br><span class="line"><span class="comment">使用$&#123;&#125;拼接sql，引起 sql注入</span></span><br><span class="line"><span class="comment">$&#123;value&#125;：接收输入参数的内容，如果传入类型是简单类型，$&#123;&#125;中只能使用value</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultType</span>=<span class="string">"com.iot.mybatis.po.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE username LIKE '%$&#123;value&#125;%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在sqlMapConfig.xml中加载User.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlmap/User.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><ul><li>po类<code>User.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/2/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性名要和数据库表的字段对应</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", sex="</span> + sex</span><br><span class="line">                + <span class="string">", birthday="</span> + birthday + <span class="string">", address="</span> + address + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iot.mybatis.po.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/2/23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisFirst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户信息，得到一条记录结果</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByIdTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// mybatis配置文件</span></span><br><span class="line">        String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        <span class="comment">// 得到配置文件流</span></span><br><span class="line">        InputStream inputStream =  Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//创建会话工厂，传入mybatis配置文件的信息</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂得到SqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过SqlSession操作数据库</span></span><br><span class="line">        <span class="comment">// 第一个参数：映射文件中statement的id，等于=namespace+"."+statement的id</span></span><br><span class="line">        <span class="comment">// 第二个参数：指定和映射文件中所匹配的parameterType类型的参数</span></span><br><span class="line">        <span class="comment">// sqlSession.selectOne结果 是与映射文件中所匹配的resultType类型的对象</span></span><br><span class="line">        <span class="comment">// selectOne查询出一条记录</span></span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户名称模糊查询用户列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByNameTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// mybatis配置文件</span></span><br><span class="line">        String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        <span class="comment">// 得到配置文件流</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">                .build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂得到SqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// list中的user和映射文件中resultType所指定的类型一致</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>, <span class="string">"小明"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><ul><li><code>findUserByIdTest()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Logging initialized using &apos;class org.apache.ibatis.logging.slf4j.Slf4jImpl&apos; adapter.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 1857815974.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6ebc05a6]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=?</span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">User [id=1, username=王五, sex=2, birthday=null, address=null]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6ebc05a6]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@6ebc05a6]</span><br><span class="line">DEBUG [main] - Returned connection 1857815974 to pool.</span><br></pre></td></tr></table></figure><ul><li><code>findUserByNameTest()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Logging initialized using &apos;class org.apache.ibatis.logging.slf4j.Slf4jImpl&apos; adapter.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 1596467899.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f282abb]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE username LIKE &apos;%小明%&apos;</span><br><span class="line">DEBUG [main] - ==&gt; Parameters:</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br><span class="line">[User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州], User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州], User [id=25, username=陈小明, sex=1, birthday=null, address=河南郑州]]</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f282abb]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f282abb]</span><br><span class="line">DEBUG [main] - Returned connection 1596467899 to pool.</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>parameterType</code></li></ul><p>在映射文件中通过parameterType指定输入参数的类型</p><ul><li><code>resultType</code></li></ul><p>在映射文件中通过resultType指定输出结果的类型</p><ul><li><code>#{}</code>和<code>${}</code></li></ul><p><code>#{}</code>表示一个占位符号;</p><p><code>${}</code>表示一个拼接符号，会引起sql注入，所以不建议使用</p><ul><li><code>selectOne</code>和<code>selectList</code></li></ul><p><code>selectOne</code>表示查询一条记录进行映射，使用<code>selectList</code>也可以使用，只不过只有一个对象</p><p><code>selectList</code>表示查询出一个列表(参数记录)进行映射，不能够使用<code>selectOne</code>查，不然会报下面的错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis入门程序&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="examples" scheme="https://brianway.github.io/tags/examples/"/>
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(2)-mybatis概述</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-2-mybatis-summary/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-2-mybatis-summary/</id>
    <published>2016-03-07T18:38:02.000Z</published>
    <updated>2019-04-07T16:16:59.853Z</updated>
    
    <content type="html"><![CDATA[<p>本文对mybatis做一个简单介绍，包括框架原理，执行过程，开发方法，输入输出映射以及动态sql,我会在后续的系列文章中一一详细说明</p><a id="more"></a><h2 id="mybatis-介绍"><a href="#mybatis-介绍" class="headerlink" title="mybatis 介绍"></a>mybatis 介绍</h2><p>mybatis是一个持久层的框架，是apache下的顶级项目。</p><p>mybatis托管到goolecode下，再后来托管到github下(<a href="https://github.com/mybatis/mybatis-3/releases)。" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases)。</a></p><p>mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。</p><p>mybatis可以将向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射）</p><h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><p>mybatis框架</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/mybatis_%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="mybatis框架图" title>                </div>                <div class="image-caption">mybatis框架图</div>            </figure><h2 id="mybatis框架执行过程"><a href="#mybatis框架执行过程" class="headerlink" title="mybatis框架执行过程"></a>mybatis框架执行过程</h2><p>1、配置mybatis的配置文件，SqlMapConfig.xml（名称不固定）</p><p>2、通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂(SqlSessionFactory在实际使用时按单例方式)</p><p>3、通过SqlSessionFactory创建SqlSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议sqlSession应用场合在方法体内。</p><p>4、调用sqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。</p><p>5、释放资源，关闭SqlSession</p><h2 id="mybatis开发dao的方法"><a href="#mybatis开发dao的方法" class="headerlink" title="mybatis开发dao的方法"></a>mybatis开发dao的方法</h2><p>1.原始dao 的方法</p><ul><li>需要程序员编写dao接口和实现类</li><li>需要在dao实现类中注入一个SqlSessionFactory工厂</li></ul><p>2.mapper代理开发方法（建议使用）</p><p>只需要程序员编写mapper接口（就是dao接口）。<br>程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范：</p><ul><li>mapper.xml中namespace就是mapper.java的类全路径。</li><li>mapper.xml中statement的id和mapper.java中方法名一致。</li><li>mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致</li><li>mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。</li></ul><p>SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。</p><h2 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h2><ul><li><p>输入映射：</p><ul><li>parameterType：指定输入参数类型可以简单类型、pojo、hashmap。</li><li>对于综合查询，建议parameterType使用包装的pojo，有利于系统扩展。</li></ul></li><li><p>输出映射：</p><ul><li>resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。</li><li>reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。<ul><li>高级映射：<br>  将关联查询的列映射到一个pojo属性中。（一对一）<br>  将关联查询的列映射到一个List<pojo>中。（一对多）</pojo></li></ul></li></ul></li></ul><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><ul><li>动态sql：（重点）<ul><li>if判断（掌握）</li><li>where</li><li>foreach</li><li>sql片段（掌握）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对mybatis做一个简单介绍，包括框架原理，执行过程，开发方法，输入输出映射以及动态sql,我会在后续的系列文章中一一详细说明&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记(1)-对原生jdbc程序中的问题总结</title>
    <link href="https://brianway.github.io/2016/03/08/mybatis-learn-1-jdbc-summary/"/>
    <id>https://brianway.github.io/2016/03/08/mybatis-learn-1-jdbc-summary/</id>
    <published>2016-03-07T18:38:01.000Z</published>
    <updated>2019-04-07T16:16:59.876Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结jdbc编程的一般步骤，总结这样编程存在的问题，并附上典型地jdbc示例demo</p><a id="more"></a><h2 id="jdbc编程步骤"><a href="#jdbc编程步骤" class="headerlink" title="jdbc编程步骤"></a>jdbc编程步骤</h2><ol><li>加载数据库驱动</li><li>创建并获取数据库链接</li><li>创建jdbc statement对象</li><li>设置sql语句</li><li>设置sql语句中的参数(使用preparedStatement)</li><li>通过statement执行sql并获取结果</li><li>对sql执行结果进行解析处理</li><li>释放资源(resultSet、preparedstatement、connection)</li></ol><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>1.数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p><p>设想：使用数据库连接池管理数据库连接。</p><p>2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p><p>设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。</p><p>3.向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。</p><p>设想：将sql语句及占位符号和参数全部配置在xml中。</p><p>4.从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。</p><p>设想：将查询的结果集，自动映射成java对象。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.mybatis.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import java.sql.*;</span></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/2/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据库连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//预编译的Statement，使用预编译的Statement提高数据库性能</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//结果集</span></span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">            connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"123"</span>);</span><br><span class="line">            <span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">            <span class="comment">//获取预处理statement</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">            <span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">            resultSet =  preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历查询结果集</span></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结jdbc编程的一般步骤，总结这样编程存在的问题，并附上典型地jdbc示例demo&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="https://brianway.github.io/tags/MyBatis/"/>
    
      <category term="JDBC" scheme="https://brianway.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(6)-注解</title>
    <link href="https://brianway.github.io/2016/02/20/javase-learn-note-6-Annotation/"/>
    <id>https://brianway.github.io/2016/02/20/javase-learn-note-6-Annotation/</id>
    <published>2016-02-20T01:45:12.000Z</published>
    <updated>2019-04-07T16:16:59.883Z</updated>
    
    <content type="html"><![CDATA[<p>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><a id="more"></a><p>API</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/annotation/package-summary.html" target="_blank" rel="noopener">Package java.lang.annotation</a></p></blockquote><h2 id="注解的应用结构图"><a href="#注解的应用结构图" class="headerlink" title="注解的应用结构图"></a>注解的应用结构图</h2><p>调用/结构关系：<strong>A&lt;–B&lt;–C</strong></p><p>A,B,C解释如下：</p><p>A:注解类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> A&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B:应用了“注解类”的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@A</span></span><br><span class="line">Class B&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C:对“应用了注解类的类”进行反射操作的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class C&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">     B.class.isAnnotationPresent(A.class);</span><br><span class="line">     A a = B.class.getAnnotion(A.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解的作用就是负责注解其他注解。四个元注解分别是：<code>@Target,@Retention,@Documented,@Inherited</code></p><ul><li><code>@Retention</code></li></ul><p>表示在什么级别保存该注解信息。可选的参数值在枚举类型 <code>RetentionPolicy</code>中，包括<code>RetentionPolicy.SOURCE</code>,<code>RetentionPolicy.CLASS</code>(默认),<code>RetentionPolicy.RUNTIME</code>分别对应：java源文件–&gt;class文件–&gt;内存中的字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RetentionPolicy.SOURCE 注解将被编译器丢弃</span><br><span class="line">RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃</span><br><span class="line">RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。</span><br></pre></td></tr></table></figure><ul><li><code>@Target</code></li></ul><p>表示该注解用于什么地方，可能的值在枚举类<code>ElemenetType</code>中,包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ElemenetType.CONSTRUCTOR 构造器声明</span><br><span class="line">ElemenetType.FIELD 域声明（包括 enum 实例）</span><br><span class="line">ElemenetType.LOCAL_VARIABLE 局部变量声明</span><br><span class="line">ElemenetType.METHOD 方法声明</span><br><span class="line">ElemenetType.PACKAGE 包声明</span><br><span class="line">ElemenetType.PARAMETER 参数声明</span><br><span class="line">ElemenetType.TYPE 类，接口（包括注解类型）或enum声明</span><br></pre></td></tr></table></figure><ul><li><code>@Documented</code></li></ul><p>将此注解包含在javadoc中 ，它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当于<code>@see,@param</code>等</p><ul><li><code>@Inherited</code></li></ul><p>允许子类继承父类中的注解</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><strong>使用<code>@interface</code>自定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。<code>@interface</code>用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</strong></p><p>定义注解格式：</p><p><code>public @interface 注解名 {定义体}</code></p><p>注解参数的可支持数据类型：</p><p>1.所有基本数据类型(int,float,boolean,byte,double,char,long,short)<br>2.String类型<br>3.Class类型<br>4.enum类型<br>5.Annotation类型<br>6.以上所有类型的数组</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>参考文末的<a href="#参考资料">【参考资料】</a>中<a href="http://blog.csdn.net/tigerdsh/article/details/8848890" target="_blank" rel="noopener">《java 注解的几大作用及使用方法详解（完）》</a></p><p>下面的示例，是上文提到的<strong>A&lt;–B&lt;–C</strong>的扩充版本。自定义了一个注解<code>@A</code>，然后在B类中使用了注解<code>@A</code>,最后在类C中利用反射读取<code>@A</code>中的信息</p><ul><li><code>A.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD,ElementType.FIELD,ElementType.CONSTRUCTOR&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">Class&lt;Long&gt; <span class="title">gid</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>B.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@A</span>(name=<span class="string">"type"</span>,gid=Long.class)<span class="comment">//类注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@A</span>(name=<span class="string">"param"</span>,id=<span class="number">1</span>,gid=Long.class) <span class="comment">//类成员注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@A</span>(name=<span class="string">"construct"</span>,id=<span class="number">2</span>,gid=Long.class) <span class="comment">//构造方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@A</span>(name=<span class="string">"public method"</span>,id=<span class="number">3</span>,gid=Long.class) <span class="comment">//类方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@A</span>(name=<span class="string">"protected method"</span>,id=<span class="number">4</span>,gid=Long.class) <span class="comment">//类方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; m = <span class="keyword">new</span> HashMap&lt;String,String&gt;(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@A</span>(name=<span class="string">"private method"</span>,id=<span class="number">5</span>,gid=Long.class) <span class="comment">//类方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; m = <span class="keyword">new</span> HashMap&lt;String,String&gt;(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(Integer a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>C.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单打印出B类中所使用到的类注解</span></span><br><span class="line"><span class="comment">     * 该方法只打印了 Type 类型的注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseTypeAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.iot.annotation.B"</span>);</span><br><span class="line"></span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span>(Annotation annotation :annotations)&#123;</span><br><span class="line">            A a = (A)annotation;</span><br><span class="line">            System.out.println(<span class="string">"id = "</span>+a.id()+<span class="string">" ;name = "</span>+a.name()+<span class="string">" ;gid = "</span>+a.gid());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单打印出B类中所使用到的方法注解</span></span><br><span class="line"><span class="comment">     * 该方法只打印了 Method 类型的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseMethodAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Method[] methods = B.class.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 判断方法中是否有指定注解类型的注解</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">boolean</span> hasAnnotation = method.isAnnotationPresent(A.class);</span><br><span class="line">            <span class="keyword">if</span> (hasAnnotation) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 根据注解类型返回方法的指定类型注解</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                A annotation = method.getAnnotation(A.class);</span><br><span class="line">                System.out.println(<span class="string">"method = "</span> + method.getName()</span><br><span class="line">                        + <span class="string">" ; id = "</span> + annotation.id() + <span class="string">" ; description = "</span></span><br><span class="line">                        + annotation.name() + <span class="string">"; gid= "</span> + annotation.gid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单打印出B类中所使用到的方法注解</span></span><br><span class="line"><span class="comment">     * 该方法只打印了 Method 类型的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseConstructAnnotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Constructor[] constructors = B.class.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 判断构造方法中是否有指定注解类型的注解</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">boolean</span> hasAnnotation = constructor.isAnnotationPresent(A.class);</span><br><span class="line">            <span class="keyword">if</span> (hasAnnotation) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 根据注解类型返回方法的指定类型注解</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                A annotation =(A) constructor.getAnnotation(A.class);</span><br><span class="line">                System.out.println(<span class="string">"constructor = "</span> + constructor.getName()</span><br><span class="line">                        + <span class="string">" ; id = "</span> + annotation.id() + <span class="string">" ; description = "</span></span><br><span class="line">                        + annotation.name() + <span class="string">"; gid= "</span>+annotation.gid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        parseTypeAnnotation();</span><br><span class="line">        parseMethodAnnotation();</span><br><span class="line">        parseConstructAnnotation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://blog.csdn.net/tigerdsh/article/details/8848890" target="_blank" rel="noopener">java 注解的几大作用及使用方法详解（完）</a></li><li><a href="http://strong-life-126-com.iteye.com/blog/806246" target="_blank" rel="noopener">另类的package-info.java文件探讨</a></li><li><a href="http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html" target="_blank" rel="noopener">深入理解Java：注解（Annotation）自定义注解入门</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="注解" scheme="https://brianway.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>我的java&amp;javaweb学习笔记(汇总)</title>
    <link href="https://brianway.github.io/2016/02/09/javase-note-TOC/"/>
    <id>https://brianway.github.io/2016/02/09/javase-note-TOC/</id>
    <published>2016-02-08T23:00:00.000Z</published>
    <updated>2019-04-07T16:16:59.939Z</updated>
    
    <content type="html"><![CDATA[<p>笔记分为两大部分：javase和javaweb</p><ul><li><a href="http://my.oschina.net/brianway/blog?catalog=3475426" target="_blank" rel="noopener">javase</a></li><li><a href="http://my.oschina.net/brianway/blog?catalog=3475425" target="_blank" rel="noopener">javaweb</a></li></ul><p>笔记内容主要是对一些基础特性和编程细节进行总结整理，适合了解java基础语法，想进一步深入学习的人</p><a id="more"></a><hr><p>github：</p><ul><li><a href="https://github.com/brianway/java-learning" target="_blank" rel="noopener">java-learning</a></li><li>git-clone:<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:brianway/java-learning.git`</li></ul><p>如果觉得不错，请给star，这也是对我的鼓励，有什么意见欢迎留言反馈</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="http://my.oschina.net/brianway/blog?catalog=3475426" target="_blank" rel="noopener">javase</a><ul><li><a href="http://my.oschina.net/brianway/blog/599795" target="_blank" rel="noopener">java基础巩固笔记(1)-反射</a></li><li><a href="http://my.oschina.net/brianway/blog/599796" target="_blank" rel="noopener">java基础巩固笔记(2)-泛型</a></li><li><a href="http://my.oschina.net/brianway/blog/613524" target="_blank" rel="noopener">java基础巩固笔记(3)-类加载器</a></li><li><a href="http://my.oschina.net/brianway/blog/613525" target="_blank" rel="noopener">java基础巩固笔记(4)-代理</a></li><li><a href="http://my.oschina.net/brianway/blog/613526" target="_blank" rel="noopener">java基础巩固笔记(4)-实现AOP功能的封装与配置的小框架</a></li><li><a href="http://my.oschina.net/brianway/blog/614175" target="_blank" rel="noopener">java基础巩固笔记(5)-多线程之传统多线程</a></li><li><a href="http://my.oschina.net/brianway/blog/614176" target="_blank" rel="noopener">java基础巩固笔记(5)-多线程之共享数据</a></li><li><a href="http://my.oschina.net/brianway/blog/614177" target="_blank" rel="noopener">java基础巩固笔记(5)-多线程之线程并发库</a></li><li><a href="http://my.oschina.net/brianway/blog/618037" target="_blank" rel="noopener">java基础巩固笔记(6)-注解</a></li></ul></li><li><a href="http://my.oschina.net/brianway/blog?catalog=3475425" target="_blank" rel="noopener">javaweb</a><ul><li><a href="http://my.oschina.net/brianway/blog/614205" target="_blank" rel="noopener">javaweb入门笔记(1)-Tomcat</a></li><li><a href="http://my.oschina.net/brianway/blog/614213" target="_blank" rel="noopener">javaweb入门笔记(2)-http入门</a></li><li><a href="http://my.oschina.net/brianway/blog/614214" target="_blank" rel="noopener">javaweb入门笔记(3)-Servlet</a></li><li><a href="http://my.oschina.net/brianway/blog/614215" target="_blank" rel="noopener">javaweb入门笔记(4)-request和response</a></li><li><a href="http://my.oschina.net/brianway/blog/614216" target="_blank" rel="noopener">javaweb入门笔记(5)-cookie和session</a></li><li><a href="http://my.oschina.net/brianway/blog/614217" target="_blank" rel="noopener">javaweb入门笔记(6)-JSP技术</a></li></ul></li></ul><hr><p><strong>all copyright reserved</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记分为两大部分：javase和javaweb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/brianway/blog?catalog=3475426&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/brianway/blog?catalog=3475425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaweb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔记内容主要是对一些基础特性和编程细节进行总结整理，适合了解java基础语法，想进一步深入学习的人&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="总结" scheme="https://brianway.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(6)-JSP技术</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-6-JSP/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-6-JSP/</id>
    <published>2016-02-06T02:46:12.000Z</published>
    <updated>2019-04-07T16:16:59.823Z</updated>
    
    <content type="html"><![CDATA[<p>JSP：Java Server Pages，一种动态web资源的开发技术</p><a id="more"></a><p>API文档</p><blockquote><p><a href="https://tomcat.apache.org/tomcat-8.0-doc/jspapi/index.html" target="_blank" rel="noopener">JSP 2.3 API - Apache Tomcat 8.0.30</a></p></blockquote><h2 id="调用和运行原理"><a href="#调用和运行原理" class="headerlink" title="调用和运行原理"></a>调用和运行原理</h2><p>JSP本质是一个servlet.</p><p>每个JSP页面在第一次被访问时，WEB容器会把请求交给JSP引擎(即一个JAVA程序)处理。JSP引擎先将JSP翻译成一个<code>_jspServlet</code>(实质也是一个servlet)，然后按照servlet的调用方式进行调用。</p><ul><li>服务器会将jsp先翻译成servlet，这个servlet位于tomcat服务器<code>work</code>目录，这jsp类的父类是<code>org.apache.jasper.runtime.HttpJspBase</code>,这个<code>HttpJspBase</code>类继承自<code>HttpServlet</code></li><li>向服务器发请求会调用servlet的service方法;同样地，访问jsp会调用这个JSP类的<code>_jspService</code>方法。</li><li>JSP中的标签语言会在<code>_jspService</code>方法中通过<code>out.write()</code>写出来；JSP中的Java代码会原封不动的搬到<code>_jspService</code>方法中。</li><li>在<code>_jspService</code>方法中提前准备好了一些对象供JSP调用，如：<code>out,page,application,request,response</code>等等。</li><li>由于第一次访问时会翻译成servlet，所以第一次访问较慢。</li></ul><p>下面以<code>demo1.jsp</code>为例，展示对应的类<code>%CATALINA_HOME%\work\Catalina\localhost\hello\org\apache\jsp\demo1_jsp.java</code>中的部分代码</p><p>示例1:<code>demo1.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2016</span>/<span class="number">1</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">45</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">当前时间时：</span><br><span class="line">&lt;%</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    out.write(date.toGMTString());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>示例2：<code>_jspService</code>方法中代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;html&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;head&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"    &lt;title&gt;demo1&lt;/title&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;/head&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;body&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"当前时间时：\r\n"</span>);</span><br><span class="line"></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">out.write(date.toGMTString());</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;/body&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;/html&gt;\r\n"</span>);</span><br></pre></td></tr></table></figure><p>示例3:<code>_jspService</code>方法中一些定义的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h2><ul><li><strong>JSP模板元素</strong>:JSP页面中的HTML内容。定义了网页的基本骨架，即结构和外观。</li><li><strong>JSP表达式</strong>:用于将程序数据输出到客户端。如，<code>&lt;%=变量或表达式 %&gt;</code>脚本表达式(无分号)，用于输出数据。</li><li><strong>JSP脚本片段</strong>:用于在JSP页面中编写多行java代码,严格遵循java语法。一个JSP页面可有多个脚本片段，它们可以相互访问(和放在一对<code>&lt;% %&gt;</code>中一样),单个片段可不完整。</li><li><strong>JSP声明</strong>:JSP中代码默认翻译到servlet的service方法中，而JSP声明中的代码被翻译到<code>_jspService</code>方法外。语法：<code>&lt;%! java代码 %&gt;</code>。</li><li><strong>JSP注释</strong>:格式<code>&lt;%-- 注释  --%&gt;</code>，注释的内容不会发给浏览器。</li><li><strong>JSP指令</strong>:是为JSP引擎设计的，定义了三个指令:page指令，include指令，taglib指令。语法:<code>&lt;%@ 指令 属性名=&quot;值&quot; %&gt;</code>。<ul><li>page指令:定义各种属性，作用于整个JSP页面。</li><li>include指令:用于包含JSP文件(页头、页脚)。属于静态包含(编译时包含)，它包含的所有JSP会编译成一个servlet。</li><li>taglib指令:用于在JSP页面导入标签库。</li></ul></li><li><strong>JSP标签</strong>:也称为jsp Action元素，用于在jsp页面中提供业务逻辑功能，避免在jsp页面中直接写java代码而难以维护</li><li><strong>JSP内置对象</strong>:九大隐式对象，<code>request,response,session,application,config,page,exception,out,pageContext</code></li></ul><hr><p>关于上述语法的一些说明</p><p>page指令语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page</span><br><span class="line">[ language=<span class="string">"java"</span> ]</span><br><span class="line">[ extends=<span class="string">"package.class"</span> ]</span><br><span class="line">[ <span class="keyword">import</span>=<span class="string">"&#123;package.class | package.*&#125;, ..."</span> ]</span><br><span class="line">[ session=<span class="string">"true | false"</span> ]</span><br><span class="line">[ buffer=<span class="string">"none | 8kb | sizekb"</span> ]</span><br><span class="line">[ autoFlush=<span class="string">"true | false"</span> ]</span><br><span class="line">[ isThreadSafe=<span class="string">"true | false"</span> ]</span><br><span class="line">[ info=<span class="string">"text"</span> ]</span><br><span class="line">[ errorPage=<span class="string">"relativeURL"</span> ]</span><br><span class="line">[ contentType=<span class="string">"mimeType [ ;charset=characterSet ]"</span> | <span class="string">"text/html ; charset=ISO-8859-1"</span> ]</span><br><span class="line">[ isErrorPage=<span class="string">"true | false"</span> ]</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li><code>errorPage</code>:错误提示页面。也可在<code>web.xml</code>的<code>&lt;error-page&gt;</code>标签配置，异常处理页面。在page指令设置的优先级高于在<code>web.xml</code>配置。</li><li><code>pageEncoding</code>:JSP引擎以何种码表翻译JSP,该值需和JSP文件的保存编码一致，且若要在浏览器正确显示，还要和<code>contentType</code>一致。</li></ul><p>动态包含(运行时包含):<code>request.getRequestDispatcher(&quot;/public/head.jsp&quot;).include(request,response)</code>,涉及到的jsp会生成单独的servlet，即有多个servlet，在浏览器访问时包含。静态包含性能优于动态包含</p><p>JSP常用标签</p><ul><li><code>&lt;jsp:include&gt;</code>:pageContext.include(),动态包含</li><li><code>&lt;jsp:forward&gt;</code></li><li><code>&lt;jsp:param&gt;</code></li></ul><hr><h2 id="九大隐式对象"><a href="#九大隐式对象" class="headerlink" title="九大隐式对象"></a>九大隐式对象</h2><p>JSP引擎在调用JSP对应的<code>_jspServlet</code>时，会传递和创建9个web开发相关的对象供使用。后两者(<code>out</code>和<code>pageContext</code>)为JSP独有</p><ul><li>request</li><li>response</li><li>session</li><li>application</li><li>config</li><li>page</li><li>exception</li><li>out</li><li>pageContext</li></ul><h3 id="out隐式对象"><a href="#out隐式对象" class="headerlink" title="out隐式对象"></a>out隐式对象</h3><p><strong>out隐式对象</strong>:用于向客户端发送文本数据。通过调用<code>pageContext</code>对象的<code>getOut</code>方法返回，类型为<code>JspWriter</code>，作用和<code>ServletResponse.getWriter</code>返回的<code>PrintWriter</code>对象相似。</p><p><code>JspWriter</code>相当于自带缓存功能的<code>PrintWriter</code>,设置page指令的buffer属性课调整缓存大小。满足如下条件之一，out对象才调用<code>ServletResponse.getWriter</code>方法，并通过返回的<code>PrintWriter</code>对象将out对象的缓冲区的内容真正写入到servlet引擎提供的缓冲区中：</p><ul><li>设置page指令的buffer属性关闭的out对象的缓存功能</li><li>out对象的缓冲区已满</li><li>整个JSP页面结束</li></ul><p>例子：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    out.write(<span class="string">"out.write&lt;br/&gt;"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"response.getWriter.write&lt;br/&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>浏览器显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter.write</span><br><span class="line">out.write</span><br></pre></td></tr></table></figure><p>可见，由于out有缓冲，所以后显示。</p><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><p><strong>pageContext对象</strong>:是JSP技术中最重要的一个对象，它代表JSP页面的运行环境</p><ul><li>封装了对其他8大隐式对象的引用(主要用于自定义标签开发)</li><li>自身是一个域对象，可用来保存数据(page域存的东西只能在页面范围内拿得出来)</li><li>封装了web开发中的一些常用操作(提供管理所有域的入口)，如：引入和跳转其他资源、检索其他域对象中的属性等</li></ul><p>Class PageContext的API文档</p><blockquote><p><a href="https://tomcat.apache.org/tomcat-8.0-doc/jspapi/index.html?javax/servlet/jsp/PageContext.html" target="_blank" rel="noopener">javax.servlet.jsp:Class PageContext</a></p></blockquote><p>javaweb中的四个域:</p><ul><li>application域:应用程序范围,servletContext,对应的常量<code>PageContext.APPLICATION_SCOPE</code></li><li>session域:会话范围,session,对应的常量<code>PageContext.SESSION_SCOPE</code></li><li>resquet域:请求范围,request,对应的常量<code>PageContext.REQUEST_SCOPE</code></li><li>page域:页面范围,pageContext,对应的常量<code>PageContext.PAGE_SCOPE</code></li></ul><p><strong><code>findAttribute(java.lang.String name)</code></strong>查找各个域中的属性，是<code>PageContext</code>从父类<code>javax.servlet.jsp.JspContext</code>继承的，实现了父类的抽象方法。会<strong>依次</strong>从<code>page,request,session,application</code>域中寻找相应的属性，找到为止。</p><h2 id="jsp映射和查错"><a href="#jsp映射和查错" class="headerlink" title="jsp映射和查错"></a>jsp映射和查错</h2><p>jsp映射</p><p>在<code>webxml</code>的<code>&lt;servlet&gt;</code>标签中加<code>&lt;jsp-file&gt;</code>标签，其他的和servlet映射一样</p><p>查找jsp页面中的错误</p><ul><li>JSP页面中的语法格式有问题，导致不能翻译成servlet源文件，JSP引擎将提示这类错误在JSP页面中的位置以及相关信息</li><li>JSP页面中的语法格式没有问题，但翻译承德servlet源文件出现java语法问题导致源文件编译不通过，JSP引擎将提示这类错误在JSP页面中的位置以及相关信息</li><li>JSP页面翻译成的servlet程序运行时出现异常，这和普通java程序运行时错误完全一样，java虚拟机将提示错误在servlet源文件中的位置以及相关信息</li></ul><h2 id="jsp与JavaBean"><a href="#jsp与JavaBean" class="headerlink" title="jsp与JavaBean"></a>jsp与JavaBean</h2><p>JavaBean是一个遵循特定写法的java类，JavaBean常用于封装数据，具有如下热点：</p><ul><li>该java类必须有一个无参的构造函数</li><li>属性必须私有化</li><li>私有化的属性必须通过public类型的方法暴露给其他程序，并且方法的命名也必须遵循一定的命名规范。</li></ul><p>JSP中提供了三个关于JavaBean的标签：</p><ul><li><code>&lt;jsp:useBean&gt;</code>:用于在JSP页面中查找或实例化一个JavaBean组件</li><li><code>&lt;jsp:setProperty</code>用于在JSP页面中设置一个JavaBean组件的属性</li><li><code>&lt;jsp:getProperty&gt;</code>:用于在JSP页面中获取一个JavaBean组件的属性</li></ul><p>一些细节</p><ul><li><code>&lt;jsp:useBean&gt;</code>标签的标签体只在实例化bean时才执行</li><li><code>&lt;jsp:setProperty&gt;</code>可用请求参数给bean属性赋值，支持8种基本数据类型的转换(把客户机提交的字符串转成相应的8种基本类型赋到bean的属性上)</li><li>在标签中将<code>property=&quot;*&quot;</code>，用所有请求参数为bean赋值，请求参数名称和bean属性名称必须要一致</li><li>如果JavaBean实例对象的某个属性值为null,那么使用<code>&lt;jsp:getProperty&gt;</code>标签输出结果为<strong>“null”字符串</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP：Java Server Pages，一种动态web资源的开发技术&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(5)-cookie和session</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-5-cookie-and-session/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-5-cookie-and-session/</id>
    <published>2016-02-06T02:44:12.000Z</published>
    <updated>2019-04-07T16:16:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>Cookie是客户端技术；Session是服务器端技术。</p><a id="more"></a><p>API:</p><blockquote><ul><li><a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/Cookie.html" target="_blank" rel="noopener">javax.servlet.http:Class Cookie</a></li><li><a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/HttpSession.html" target="_blank" rel="noopener">javax.servlet.http:Interface HttpSession</a></li></ul></blockquote><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>一些细节：</p><ul><li>一个cookie只能标识一种信息，至少含有标识该信息的名称和值</li><li>浏览器一般只允许存放300个cookie，每个站点最多存放20个，每个cookie大小限制为4KB</li><li>默认是会话级别cookie(存储于浏览器内存)，浏览器进程关闭则删除。有效期通过<code>maxAge</code>设置，存于硬盘，0表示删除</li><li>删除cookie时，path必须一致，否则不会删除</li></ul><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session对象由服务器创建,一个浏览器(会话)独占一个session对象</p><p>session对象由服务器创建生命周期</p><ul><li>创建：调用<code>request</code>对象的<code>getSession</code>方法后才会创建session对象;<code>getSession(false)</code>只获取， 不创建</li><li>销毁：默认30分钟没人使用则自动销毁。失效时间可在<code>web.xml</code>的<code>&lt;session-config&gt;</code>标签中使用<code>&lt;session-timeout&gt;</code>，单位分钟；也可调用<code>session</code>对象的<code>invalidate</code>方法销毁</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>session基于cookie实现，将<code>JSESSIONID</code>写回浏览器，这个cookie(<code>JSESSIONID</code>)默认没设置有效期,关浏览器即销毁。可以自行回写<code>JSESSIONID</code>覆盖原cookie值</p><p>示例代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    String sessionid = session.getId();</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,sessionid);</span><br><span class="line">    cookie.setPath(<span class="string">"/s1"</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><ul><li>用户登录</li><li>防止表单重复提交</li><li>一次性验证码的校验</li></ul><p><strong>小Tips</strong></p><ul><li>一般大型网站不用session,使用cookie,减小服务器压力</li><li>若浏览器禁用cookie,需使用url自带sessionid，相关方法:<code>encodeURL</code>和<code>encodeRedirectURL</code></li><li>禁止表单重复提交：在javascript或者服务器实现。javascript防不死，用户可通过修改js、自建表单提交，刷新页面，后退等方法重复提交；服务器实现是给每个表单一个随机表单号</li><li>生成表单号使用“令牌发生器”，为保证唯一性(减小重复概率)，使用单例。</li><li>base64编码，三字节变四字节，每6位变8位(一字节)，高位补零，每字节最大值为63，故得名。</li><li>md5，常用于保存密码(可能为防止破解会加随机数)，校验数据完整性</li></ul><p>防止表单重复提交之令牌例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.iot.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/1/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenProcessor</span> </span>&#123;<span class="comment">//令牌</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.构造方法私有</span></span><br><span class="line"><span class="comment">     * 2.自己创建一个</span></span><br><span class="line"><span class="comment">     * 3.对外暴露一个方法，允许获取上面创建的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TokenProcessor</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> TokenProcessor instance = <span class="keyword">new</span> TokenProcessor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TokenProcessor <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">genetateToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String token = System.currentTimeMillis()+<span class="keyword">new</span> Random().nextInt()+<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md =  MessageDigest.getInstance(<span class="string">"md5"</span>);</span><br><span class="line">            <span class="keyword">byte</span> [] md5 =  md.digest(token.getBytes());</span><br><span class="line">            <span class="comment">//base64编码</span></span><br><span class="line">            BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            <span class="keyword">return</span> encoder.encode(md5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三个域对象"><a href="#三个域对象" class="headerlink" title="三个域对象"></a>三个域对象</h2><ul><li>Session</li><li>Request</li><li>ServletContext</li></ul><p>容器选用经验：</p><ul><li>数据显示完了就没用了，则选用Request</li><li>数据除了显示外，稍后还会用，则选用Session</li><li>数据除了显示外，不仅稍后会用，还会给别人用，则选用<code>ServletContext</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cookie是客户端技术；Session是服务器端技术。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(4)-request和response</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-4-request-and-response/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-4-request-and-response/</id>
    <published>2016-02-06T02:30:12.000Z</published>
    <updated>2019-04-07T16:16:59.889Z</updated>
    
    <content type="html"><![CDATA[<p>API:</p><blockquote><ul><li><a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/HttpServletResponse.html" target="_blank" rel="noopener">Interface HttpServletResponse</a></li><li><a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/HttpServletRequest.html" target="_blank" rel="noopener">Interface HttpServletRequest</a></li></ul></blockquote><a id="more"></a><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><h3 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h3><p>程序以什么码表输出，就一定要控制浏览器以什么码表打开。可有如下两种写法：</p><ul><li><code>response.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=UTF-8&quot;)</code></li><li><code>response.setContentType(&quot;text/html;charset=UTF-8&quot;)</code>(默认调用<code>setHeader</code>和<code>setCharacterEncoding</code>)</li></ul><p>把分号<code>;</code>错写成逗号<code>,</code>，浏览器会提示下载</p><p>用html技术的<code>&lt;meta&gt;</code>标签可以模拟一个http响应头，<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</code></p><p>response可用<code>setCharacterEncoding</code>方法设置码表。字符流输出：<code>PrintWritet-&gt;response-&gt;浏览器</code>,<code>response-&gt;浏览器</code>默认使用<code>iso-8859</code>编码</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>使用<code>ServerContext</code>的<code>getRealPath</code>方法,再<code>InputStream</code>和<code>OutputStream</code></p><p>如果下载文件是中文名为中文，则文件名需要经过url编码<code>URLEncoder.encode</code></p><h3 id="随机图片"><a href="#随机图片" class="headerlink" title="随机图片"></a>随机图片</h3><p>使用<a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/image/BufferedImage.html" target="_blank" rel="noopener"><code>BufferedImage</code></a>在内存生成图片，再使用<a href="https://docs.oracle.com/javase/8/docs/api/index.html?javax/imageio/ImageIO.html" target="_blank" rel="noopener"><code>ImageIO</code></a>输出。</p><p>画图使用<a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Graphics.html" target="_blank" rel="noopener"><code>Graphics</code></a>,旋转使用<a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Graphics2D.html" target="_blank" rel="noopener"><code>Graphics2D</code></a></p><p>汉字的区间：<code>\u4e00</code>-<code>\u9fa5</code></p><h3 id="刷新和缓存"><a href="#刷新和缓存" class="headerlink" title="刷新和缓存"></a>刷新和缓存</h3><ul><li>刷新：一般不在servlet里加<code>refresh</code>头，而是在jsp加入<code>&lt;meta&gt;</code>头模拟。</li><li>缓存：加入<code>expires</code>头,当前时间+要缓存的时长</li></ul><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><p><strong>重定向</strong>：设置状态码和<code>location</code>头即可，或者直接使用<code>response</code>的<code>sendRedirect</code>方法。向服务器两次请求。浏览器会改变地址栏，一般适用于登录、购物等场景。</p><p><strong>转发</strong>:则是调用<code>ServletContex</code>对象的<code>getRequestDispatcher</code>方法，再调用<code>forward</code>方法。向服务器一次请求，浏览器地址栏不变。</p><p>一些细节：</p><ul><li><code>getOutputStream</code>和<code>getWriter</code>方法跟别用于输出二进制数据、输出文本数据的<code>ServletOutputStream</code>、<code>Printwriter</code>对象，这两个方法相互排斥，只能调用其中一个，否则抛<code>IllegalStateException</code>异常。</li><li>response的输出流会自己关闭。<code>Servlet</code>的<code>service</code>方法结束后，Servlet引擎会检查并调用<code>close</code>方法关闭该输出流对象。</li></ul><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><ul><li>URI:标识某个资源</li><li>URL:标识互联网上某个资源</li></ul><p>一些方法</p><ul><li><code>getRequestURI</code>用于权限拦截，访问统计</li><li><code>getRemoteAddr</code>用于得到客户机IP地址</li><li><code>getMethod</code>得到客户机请求方式</li></ul><p>requst对象获取数据的四种方式</p><ul><li><code>getParameter</code></li><li><code>getParameterNames</code></li><li><code>getParameterValues</code></li><li><code>getParameterMap</code>(可结合JavaBean使用)</li></ul><p>(<code>getInputStream</code>用于文件上传)</p><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>url后面如果有中文数据，需要编码后再提交</p><p>表单提交的数据使用的码表和该页面的码表一致，而<code>getParameter</code>方法默认使用<code>ISO-8859</code>码表。</p><p>解决：</p><ul><li>对于post提交的数据，在获取数据前要使用<code>request</code>对象的<code>setCharacterEncoding</code>设置码表。</li><li>对于get提交的数据，只能手工解决。先对数据调用<code>getBytes(&quot;ISO-8859-1&quot;)</code>获取二进制字节，再用特定码表构建字符串。</li><li>超链提交的中文，解决办法同get提交的数据。</li></ul><p><em>也可以通过改服务器配置来解决乱码问题，但一般<strong>不建议</strong>使用。</em></p><ul><li><code>URIEncoding</code>:改tomcat的配置文件<code>conf/server.xml</code>的连接器<code>&lt;Connector&gt;</code>中的<code>URIEncoding</code>属性</li><li><code>useBodyEncodingForURI</code>:将<code>conf/server.xml</code>的连接器<code>&lt;Connector&gt;</code>中的<code>useBodyEncodingForURI</code>置为<code>true</code></li></ul><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>应用场景：MVC设计模式</p><ul><li>model : javabean;</li><li>view : jsp;</li><li>controller : servlet</li></ul><p>使用request域对象把数据带给转发资源。调用<code>request</code>对象的<code>getRequestDispatcher</code>方法，再调用<code>forward</code>方法。一次请求，浏览器地址栏不变。</p><p><code>forward</code>一些细节</p><ul><li>不能在关闭输出流后再调用转发，也不能调用两次，否则会抛出异常。</li><li>跳转之前会清空response中的数据。即数据只是写入到缓冲区而没真正输出到客户端，则可调用<code>forward</code>方法，原来写入到缓冲区的内容被清空，但响应头字段信息保持。</li></ul><p><code>include</code>方法可以用于包含一些公共页面(一般不在servlet中包含)</p><h3 id="地址的写法"><a href="#地址的写法" class="headerlink" title="地址的写法"></a>地址的写法</h3><p>以斜杠<code>/</code>开头。如果是给服务器用，则<code>/</code>代表当前web应用；如果给浏览器用，则<code>/</code>代表网站。</p><p>例子:目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mail---------------------------Web应用所在目录</span><br><span class="line">           |----form1.html</span><br><span class="line">           |----WEB-INF目录</span><br><span class="line">                    |---------classes目录</span><br><span class="line">                    |---------lib目录</span><br><span class="line">                    |---------web.xml</span><br></pre></td></tr></table></figure><ol><li><code>request.getRequestDispatcher(&quot;/form1.html&quot;)</code></li><li><code>response.sendRedirect(&quot;mail/form1.html&quot;)</code></li><li><code>this.getServletContext().getRealPath(&quot;/form1.html&quot;)</code></li><li><code>this.getServletContext().getResourceAsStream(&quot;/form1.html&quot;)</code></li><li><code>&lt;a href=&quot;/mail/form1.html&quot;&gt;</code></li><li><code>&lt;form action=&quot;/mail/form1.html&quot;&gt;</code></li></ol><p>其中，1,3,4是给服务器用;2,5,6是浏览器用</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>读取<code>referer</code>请求头，不合要求则重定向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;API:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/HttpServletResponse.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interface HttpServletResponse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/http/HttpServletRequest.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interface HttpServletRequest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(3)-Servlet</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-3-servlet/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-3-servlet/</id>
    <published>2016-02-06T02:29:12.000Z</published>
    <updated>2019-04-07T16:16:59.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="servlet入门"><a href="#servlet入门" class="headerlink" title="servlet入门"></a>servlet入门</h2><p>开发步骤：</p><ul><li>编写一个java类，实现servlet接口</li><li>把开发好的java类部署到web服务器</li></ul><a id="more"></a><p>API文档</p><blockquote><p><a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html" target="_blank" rel="noopener">Servlet API Documentation</a></p></blockquote><p>生命周期相关方法(life-cycle methods)</p><p>Servlet的生命周期通过<code>java.servlet.Servlet</code>接口中的<code>init()</code>、<code>service()</code>、和<code>destroy()</code>方法表示。Servlet的生命周期有四个阶段：加载并实例化、初始化、请求处理、销毁。（见文末【参考链接】）</p><h2 id="手动编写第一个servlet"><a href="#手动编写第一个servlet" class="headerlink" title="手动编写第一个servlet"></a>手动编写第一个servlet</h2><p>1.在tomcat中新建一个web应用<code>hello</code>，在web应用中新建一个<code>WEB-INF/classes</code>目录</p><p>2.在<code>classes</code>目录新建一个<code>FirstServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.iot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req,ServletResponse res)</span><span class="keyword">throws</span> ServletException,java.io.IOException</span>&#123;</span><br><span class="line">OutputStream out = res.getOutputStream();</span><br><span class="line">out.write(<span class="string">"hello servlet!!!"</span>.getBytes());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编译，<code>javac -cp %CATALINA_HOME%/lib/servlet-api.jar  -d . FirstServlet.java</code>,命令行手动编译参考<a href="http://www.iitshare.com/under-the-cmd-compile-the-java.html" target="_blank" rel="noopener">这里</a></p><p>4.在<code>WEB-INF</code>目录中新建一个<code>web.xml</code>文件，配置servlet的对外访问路径</p><p>5.启动tomcat访问</p><h2 id="servlet的调用过程和生命周期"><a href="#servlet的调用过程和生命周期" class="headerlink" title="servlet的调用过程和生命周期"></a>servlet的调用过程和生命周期</h2><p>时序图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaweb_servlet-lifecycle.png" alt="servlet的调用过程和生命周期" title>                </div>                <div class="image-caption">servlet的调用过程和生命周期</div>            </figure><h2 id="servlet开发的一些细节"><a href="#servlet开发的一些细节" class="headerlink" title="servlet开发的一些细节"></a>servlet开发的一些细节</h2><ul><li><strong>标签</strong>:<code>&lt;servlet&gt;</code>包含<code>&lt;servlet-name&gt;</code>和<code>&lt;servlet-class&gt;</code>；<code>&lt;servlet-mapping&gt;</code>包含<code>&lt;servlet-name&gt;</code>和<code>&lt;url-pattern&gt;</code></li><li><strong>映射</strong>:<code>web.xml</code>中一个<code>&lt;servlet&gt;</code>可对应多个<code>&lt;servlet-mapping&gt;</code></li><li><strong>通配符</strong>:<code>&lt;servlet-mapping&gt;</code>的<code>&lt;url-pattern&gt;</code>可以使用通配符，两种固定格式：<code>*.扩展名</code>；以<code>/</code>开头，以<code>/*</code>结尾</li></ul><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/javaweb_servlet-url%E5%8C%B9%E9%85%8D.png" alt="javaweb_servlet-url匹配.png"></p><ul><li><strong>对象</strong>:servlet由servlet引擎调用，不能独立运行。客户端多次请求，服务器只创建一个servlet实例，之后驻留内存中继续服务直至web容器退出才销毁它。</li><li><strong>请求</strong>:服务器针对客户端的每一次请求都会创建新的<code>request</code>和<code>response</code>对象(它们的生命周期很短)，传给<code>service</code>方法。</li><li><strong>加载</strong>:servlet实例的创建和<code>init</code>方法的调用是在第一次请求时，而非服务器启动时，除非在<code>&lt;servlet&gt;</code>标签配置<code>&lt;load-on-start-up&gt;</code>,数字越小优先级越高</li><li><strong>缺省</strong>:映射路径为正斜杠<code>/</code>，则为当前web应用的缺省servlet,不匹配的都交给缺省</li><li><strong>线程安全</strong>:访问同一资源会引发线程安全问题; <code>SingleThreadModel</code>标记接口(已弃用)</li><li><strong>ServletConfig</strong>:在<code>&lt;servlet&gt;</code>标签配置<code>&lt;init-param&gt;</code>，通过<code>getServletConfig</code>方法获得配置。可配置输出字符集，读哪个配置文件等等。</li><li><strong>ServletContext</strong>:代表当前web应用，含有一些web应用全局性方法，实现web资源共享、servlet转发等。通过<code>ServletConfig.getServletContext</code>方法获得，在<code>&lt;context-param&gt;</code>标签配置。</li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>API:<a href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html?javax/servlet/ServletContext.html" target="_blank" rel="noopener">Interface ServletContext</a></p><p>概念</p><p>一个web应用所有servlet共享同一个ServletContext对象，可实现数据共享。ServletContext被称为context<strong>域</strong>对象。</p><p>域：作用范围；context域：整个应用程序范围。</p><p>ServletContext域：</p><ol><li>这是一个容器</li><li>说明了这个容器的作用范围，也就是应用程序范围</li></ol><p>转发:客户机一次请求；重定向：客户机两次请求</p><p>作用</p><ul><li>获取web应用的初始化参数</li><li>实现servlet转发</li><li>利用ServletContext对象读取资源文件<ul><li>获得文件路径</li><li>读取资源文件的三种方式</li><li>.properties文件（属性文件）</li></ul></li></ul><p>配置文件：properties文件和xml文件；数据有关系使用xml文件，没有关系则使用properties文件。</p><p>1.通过<code>ServletContext</code>的<code>getResourceAsStream</code>方法，读取properties文件</p><p>模板代码(注意文件位置不同写路径会不同)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/classes/org/iot/servlet/db.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();<span class="comment">//map</span></span><br><span class="line">properties.load(in);</span><br></pre></td></tr></table></figure><p>2.通过<code>servletContext</code>的<code>getRealPath</code>方法得到资源的绝对路径，再通过传统方式(<code>FileInputStream</code>)读取</p><p>3.通过类装载器去读，<code>ClassLoader</code>的<code>getResourceAsStream</code>(如果读取资源文件的程序不是servlet)，文件不能太大。<strong>只装载一次</strong>，所以如要读到更新后的数据，通过类装载的方式得到资源文件的位置，再通过传统方式读取资源文件的数据（用<code>getResource</code>得到path，再用<code>FileInputStream</code>）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="http://blog.csdn.net/evankaka/article/details/46673051" target="_blank" rel="noopener">servlet和Jsp生命周期解读</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;servlet入门&quot;&gt;&lt;a href=&quot;#servlet入门&quot; class=&quot;headerlink&quot; title=&quot;servlet入门&quot;&gt;&lt;/a&gt;servlet入门&lt;/h2&gt;&lt;p&gt;开发步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个java类，实现servlet接口&lt;/li&gt;
&lt;li&gt;把开发好的java类部署到web服务器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
      <category term="Servlet" scheme="https://brianway.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(2)-http入门</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-2-http/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-2-http/</id>
    <published>2016-02-06T02:04:12.000Z</published>
    <updated>2019-04-07T16:16:59.845Z</updated>
    
    <content type="html"><![CDATA[<p>对HTTP协议早有了解，最近在看javaweb，视频中讲到了这部分，就把视频的内容整理归纳下</p><a id="more"></a><h2 id="请求-Request"><a href="#请求-Request" class="headerlink" title="请求(Request)"></a>请求(Request)</h2><p>一个完整的HTTP请求包括：一个请求行、若干请求头、以及实体内容</p><h3 id="请求头字段"><a href="#请求头字段" class="headerlink" title="请求头字段"></a>请求头字段</h3><ul><li>Accept:用于告诉服务器，客户机支持的数据类型</li><li>Accept-Charset:用于告诉服务器，客户机采用的编码</li><li>Accept-Encoding:用于告诉服务器，客户机支持数据压缩格式</li><li>Accept-Language:客户机的语言环境</li><li>Host:客户机通过这个头告诉服务器，想访问的主机名</li><li>If-Modified-Since:客户机通过这个头告诉服务器，资源的缓存时间</li><li>Refer:客户机通过这个头告诉服务器，它是从哪个资源访问服务器的(防盗链)</li><li>User-Agent:客户机通过这个头告诉服务器，客户机的软件环境</li><li>Cookie:客户机通过这个头向服务器带数据</li><li>Connection:这个请求完了，是保持连接还是关闭</li><li>Range:断点下载<ul><li><code>bytes=n1-n2</code>,传输范围n1到n2字节</li><li><code>bytes=n-</code>，传输web资源中第n个字节以后的所有内容</li><li><code>bytes=n</code>,传输最后n个字节</li></ul></li></ul><h2 id="响应-Response"><a href="#响应-Response" class="headerlink" title="响应(Response)"></a>响应(Response)</h2><p>一个HTTP响应代表服务器向客户端回送的数据，包括：一个状态行、若干消息头、以及实体内容</p><h3 id="响应状态行"><a href="#响应状态行" class="headerlink" title="响应状态行"></a>响应状态行</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaweb_HttpResponseStatus.png" alt="HTTP响应状态码简表" title>                </div>                <div class="image-caption">HTTP响应状态码简表</div>            </figure><p>详情可参考</p><blockquote><p><a href="http://www.w3school.com.cn/tags/html_ref_httpmessages.asp" target="_blank" rel="noopener">HTTP 状态消息</a></p></blockquote><h3 id="响应头字段"><a href="#响应头字段" class="headerlink" title="响应头字段"></a>响应头字段</h3><ul><li>Location:这个头配合302状态码使用，用于告诉客户机找谁(location和302实现请求重定向)</li><li>Server:服务器通过这个头，告诉浏览器服务器的类型</li><li>Content-Encoding:服务器通过这个头，数据的压缩格式<br>(相关java知识:<code>GZIPOutputStream</code>,包装流/底层流)</li><li>Content-Length:服务器通过这个头，告诉浏览器回送数据的长度</li><li>Content-Type:服务器通过这个头，告诉浏览器回送数据的类型</li><li>Last-Modified:服务器通过这个头，告诉浏览器当前资源的缓存时间</li><li>Refresh:服务器通过这个头，告诉浏览器隔多长时间刷新一次</li><li>Content-Disposition:服务器通过这个头，告诉浏览器以下载方式打开</li><li>Transfer-Encoding:服务器通过这个头，告诉浏览器数据的传送格式</li><li>Etag:缓存相关的头部，用于实时性要求高的系统</li><li>Expires:服务器通过这个头，告诉浏览器把回送的资源缓存多长时间，-1或0则不缓存</li><li>Cache-Control和Pragma:no-cache,服务器通过这两个头，也是控制浏览器不要缓存数据</li><li>Connection:断开连接/保持连接</li><li>Date:当前时间</li><li>Accept-Ranges:用来说明web服务器是否支持range。支持返回bytes;不支持返回none</li><li>Content-Range:制定了返回web资源的字节范围，格式：<code>n1-n2/n_total</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对HTTP协议早有了解，最近在看javaweb，视频中讲到了这部分，就把视频的内容整理归纳下&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
      <category term="HTTP" scheme="https://brianway.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>javaweb入门笔记(1)-Tomcat</title>
    <link href="https://brianway.github.io/2016/02/06/javaweb-note-1-Tomcat/"/>
    <id>https://brianway.github.io/2016/02/06/javaweb-note-1-Tomcat/</id>
    <published>2016-02-06T01:55:12.000Z</published>
    <updated>2019-04-07T16:16:59.838Z</updated>
    
    <content type="html"><![CDATA[<p>下载链接</p><blockquote><ul><li><a href="http://jakarta.apache.org" target="_blank" rel="noopener">Apache Jakarta Project</a></li><li><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a></li></ul></blockquote><a id="more"></a><h2 id="Tomcat目录层次结构"><a href="#Tomcat目录层次结构" class="headerlink" title="Tomcat目录层次结构"></a>Tomcat目录层次结构</h2><ul><li>bin:存放启动和关闭Tomcat的脚本文件</li><li>conf:存放Tomcat服务器的配置文件</li><li>lib:存放Tomcat服务器的支撑jar包</li><li>logs:存放Tomcat的日志文件</li><li>temp:存放Tomcat运行时产生的临时文件</li><li>webapps:web应用所在的目录，即供外接访问的web资源的存放目录</li><li>work:Tomcat的工作目录</li></ul><p>上面的内容直接可在<a href="http://tomcat.apache.org/tomcat-8.0-doc/introduction.html#Terminology" target="_blank" rel="noopener">Tomcat Doc-Directories and Files</a>找到答案</p><h2 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h2><p><code>%CATALINA_HOME%/RUNNING.txt</code>有详细步骤，简单来说，已经配置好JDK环境的话，windows下直接双击<code>bin/startyp.bat</code>就行了</p><p>默认端口是8080，改端口：tomcat的<code>conf/server.xml</code>的<code>Connector</code>标签</p><p>常见启动问题</p><ul><li>JAVA_HOME环境变量</li><li>端口占用问题</li><li>Catalina_home环境变量的设置问题</li></ul><h2 id="官当配置文档"><a href="#官当配置文档" class="headerlink" title="官当配置文档"></a>官当配置文档</h2><p>多种配置方式</p><ul><li><code>/META-INF/context.xml</code></li><li><code>$CATALINA_BASE/conf/[enginename]/[hostname]/</code></li><li><code>conf/server.xml</code></li></ul><blockquote><p>具体参考<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Defining_a_context" target="_blank" rel="noopener">Context配置</a></p></blockquote><h2 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h2><p>1.web应用与web应用所在的目录<br>一个<strong>web应用</strong>由多个静态web资源和动态web资源组成；组成web应用的这些文件会由一个目录组织起来，这个目录称为<strong>web应用所在目录</strong></p><p>2.虚拟目录的映射<br>把主机上的资源映射到服务器对外提供的访问路径上</p><p>3.例子</p><p>tomcat的<code>conf/server.xml</code>:<code>&lt;Host&gt;</code>元素-&gt;<code>&lt;Context&gt;</code>,一个<code>&lt;Context&gt;</code>对应一个web应用。</p><p><code>&lt;Context path=&quot;/virtual-path&quot; docBase=&quot;webapps-path&quot; /&gt;</code>,重启web服务器</p><p>4.web应用的组成结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mail---------------------------Web应用所在目录</span><br><span class="line">           |----html、jsp、css、js等文件，根目录下的文件外界可以直接访问</span><br><span class="line">           |----WEB-INF目录</span><br><span class="line">                    |---------classes目录(java类)</span><br><span class="line">                    |---------lib目录(java类运行所需的jar包)</span><br><span class="line">                    |---------web.xml(web应用的配置文件)</span><br><span class="line">             WEB-INF 这个目录下的文件外界无法直接访问，由web服务器负责调用</span><br></pre></td></tr></table></figure><h2 id="Tomcat体系结构"><a href="#Tomcat体系结构" class="headerlink" title="Tomcat体系结构"></a>Tomcat体系结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaweb_tomcat%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Tomcat体系结构" title>                </div>                <div class="image-caption">Tomcat体系结构</div>            </figure><ul><li>tomcat的https连接器</li></ul><p><code>keytool -genkey alias tomcat -keyalg RSA</code>得到<code>.keystore</code>文件</p><ul><li>Tomcat管理平台<br>主页-&gt;Tomcat Manager</li></ul><p>相关权限和用户配置在<code>conf/tomcat-users.xml</code></p><h2 id="相关小知识"><a href="#相关小知识" class="headerlink" title="相关小知识"></a>相关小知识</h2><p>1.域名和主机名的区别</p><table><thead><tr><th style="text-align:right">域名</th><th style="text-align:center">sina.com</th></tr></thead><tbody><tr><td style="text-align:right">主机名</td><td style="text-align:center"><a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></td></tr></tbody></table><p>2.url中主机名的作用：</p><ul><li>用于访问DNS服务器获取IP</li><li>用于告诉代理服务器要访问哪个主机名</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="http://www.cnblogs.com/rocomp/p/4802396.html" target="_blank" rel="noopener">Tomcat安装、配置、优化及负载均衡详解</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jakarta.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Jakarta Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tomcat官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="https://brianway.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaWeb" scheme="https://brianway.github.io/tags/JavaWeb/"/>
    
      <category term="Tomcat" scheme="https://brianway.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(5)-多线程之线程并发库</title>
    <link href="https://brianway.github.io/2016/02/06/javase-learn-note-5-ThreadPool/"/>
    <id>https://brianway.github.io/2016/02/06/javase-learn-note-5-ThreadPool/</id>
    <published>2016-02-05T22:23:12.000Z</published>
    <updated>2019-04-07T16:16:59.951Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要概述<code>java.util.concurrent</code>包下的相关类和使用方法</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/package-summary.html" target="_blank" rel="noopener">Package java.util.concurrent</a></p></blockquote><a id="more"></a><h2 id="原子性操作类"><a href="#原子性操作类" class="headerlink" title="原子性操作类"></a>原子性操作类</h2><p><code>java.util.concurrent.atomic</code>包下的类:</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/atomic/package-summary.html" target="_blank" rel="noopener">Package java.util.concurrent.atomic</a></p></blockquote><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/Executors.html" target="_blank" rel="noopener">java.util.concurrent:Class Executors</a></p></blockquote><h3 id="常用线程池"><a href="#常用线程池" class="headerlink" title="常用线程池"></a>常用线程池</h3><p>几种常用的的生成线程池的方法：</p><ul><li><code>newCachedThreadPool</code></li><li><code>newFixedThreadPool</code></li><li><code>newScheduledThreadPool</code></li><li><code>newSingleThreadExecutor</code></li><li><code>newSingleThreadScheduledExecutor</code></li></ul><p>例子：<code>newFixedThreadPool</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单线程<code>newSingleThreadExecutor</code>可用于重启</p><p>用线程池启动定时器</p><p>例子：类似Timer的定时执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Executors.newScheduledThreadPool(<span class="number">3</span>).scheduleAtFixedRate(</span><br><span class="line">            <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"ScheduledThreadPool "</span>+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">3</span>,<span class="number">1</span>, TimeUnit.SECONDS</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="Callable-amp-Future"><a href="#Callable-amp-Future" class="headerlink" title="Callable&amp;Future"></a>Callable&amp;Future</h3><p><code>ExecutorService</code>在<code>Executor</code>的基础上增加了一些方法，其中有两个核心的方法：</p><ul><li><code>Future&lt;?&gt; submit(Runnable task)</code></li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code></li></ul><p>这两个方法都是向线程池中提交任务，它们的区别在于<code>Runnable</code>在执行完毕后没有结果，<code>Callable</code>执行完毕后有一个结果。这在多个线程中传递状态和结果是非常有用的。另外他们的相同点在于都返回一个Future对象。<code>Future</code>对象可以阻塞线程直到运行完毕（获取结果，如果有的话），也可以取消任务执行，当然也能够检测任务是否被取消或者是否执行完毕。</p><h2 id="Lock-amp-Condition"><a href="#Lock-amp-Condition" class="headerlink" title="Lock&amp;Condition"></a>Lock&amp;Condition</h2><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>Lock功能类似传统多线程技术里的<code>synchronized</code>，实现线程互斥，但更加面向对象。将需要互斥的代码片段放到<code>lock.lock();</code>和<code>lock.unlock();</code>之间。</p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//功能代码</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读写锁</li></ul><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html" target="_blank" rel="noopener">java.util.concurrent.locks:Class ReentrantReadWriteLock</a></p></blockquote><p>javaDoc文档读写锁例子,缓存:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</span><br><span class="line">   Object data;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</span><br><span class="line">   <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     rwl.readLock().lock();</span><br><span class="line">     <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">       <span class="comment">// Must release read lock before acquiring write lock</span></span><br><span class="line">       rwl.readLock().unlock();</span><br><span class="line">       rwl.writeLock().lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Recheck state because another thread might have</span></span><br><span class="line">         <span class="comment">// acquired write lock and changed state before we did.</span></span><br><span class="line">         <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">           data = ...</span><br><span class="line">           cacheValid = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// Downgrade by acquiring read lock before releasing write lock</span></span><br><span class="line">         rwl.readLock().lock();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         rwl.writeLock().unlock(); <span class="comment">// Unlock write, still hold read</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       use(data);</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       rwl.readLock().unlock();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>重点注意在释放写锁前加读锁那部分代码，注释为<code>// Downgrade by acquiring read lock before releasing write lock</code>。自己挂了写锁，再挂读锁是可以的，这面涉及的技巧以后再研究。</p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition类似于传统多线程技术中的<code>Object.wait</code>和<code>Object.notify</code>,实现线程间同步。</p><p>javaDoc文档例子，可阻塞队列</p><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/locks/Condition.html" target="_blank" rel="noopener">class BoundedBuffer例子</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="keyword">final</span> Condition notFull  = lock.newCondition();</span><br><span class="line">   <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span> putptr, takeptr, count;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == items.length)</span><br><span class="line">         notFull.await();</span><br><span class="line">       items[putptr] = x;</span><br><span class="line">       <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;</span><br><span class="line">       ++count;</span><br><span class="line">       notEmpty.signal();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">         notEmpty.await();</span><br><span class="line">       Object x = items[takeptr];</span><br><span class="line">       <span class="keyword">if</span> (++takeptr == items.length) takeptr = <span class="number">0</span>;</span><br><span class="line">       --count;</span><br><span class="line">       notFull.signal();</span><br><span class="line">       <span class="keyword">return</span> x;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用了两个<code>condition</code></p><h2 id="同步工具"><a href="#同步工具" class="headerlink" title="同步工具"></a>同步工具</h2><ul><li><code>Semaphore</code></li></ul><p>类似占坑</p><ul><li><code>CyclicBarrier</code></li></ul><p>阶段性使进度一致</p><ul><li><code>CountDownLatch</code></li></ul><p>一人通知多人/多人通知一人</p><ul><li><code>Exchanger</code></li></ul><p>线程间数据交换，都到达则自然交换</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://www.blogjava.net/xylz/archive/2010/12/21/341281.html" target="_blank" rel="noopener">深入浅出 Java Concurrency (29): 线程池 part 2 Executor 以及Executors</a></li><li><a href="http://www.blogjava.net/xylz/archive/2010/07/08/325587.html" target="_blank" rel="noopener">《深入浅出 Java Concurrency》目录</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要概述&lt;code&gt;java.util.concurrent&lt;/code&gt;包下的相关类和使用方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Package java.util.concurrent&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://brianway.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(5)-多线程之共享数据</title>
    <link href="https://brianway.github.io/2016/02/06/javase-learn-note-5-ShareData/"/>
    <id>https://brianway.github.io/2016/02/06/javase-learn-note-5-ShareData/</id>
    <published>2016-02-05T22:20:12.000Z</published>
    <updated>2019-04-07T16:16:59.863Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结线程共享数据的相关知识，主要包括两方面:一是某个线程内如何共享数据，保证各个线程的数据不交叉；一是多个线程间如何共享数据，保证数据的一致性。</p><a id="more"></a><h2 id="线程范围内共享数据"><a href="#线程范围内共享数据" class="headerlink" title="线程范围内共享数据"></a>线程范围内共享数据</h2><p>自己实现的话，是定义一个Map,线程为键，数据为值,表中的每一项即是为每个线程准备的数据,这样在一个线程中数据是一致的。</p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadScopeShareData</span> </span>&#123;</span><br><span class="line">    <span class="comment">//准备一个哈希表，为每个线程准备数据</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Map&lt;Thread,Integer&gt; threadData = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(</span><br><span class="line">                    <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> data = <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">                    threadData.put(Thread.currentThread(),data);</span><br><span class="line">                    System.out.println(Thread.currentThread()+<span class="string">" put data："</span>+data);</span><br><span class="line">                    <span class="keyword">new</span> A().get();</span><br><span class="line">                    <span class="keyword">new</span> B().get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> data = threadData.get(Thread.currentThread());</span><br><span class="line">            System.out.println(<span class="string">"A from "</span>+Thread.currentThread()+<span class="string">" get data "</span>+data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> data = threadData.get(Thread.currentThread());</span><br><span class="line">            System.out.println(<span class="string">"B from "</span>+Thread.currentThread()+<span class="string">" get data "</span>+data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码偶尔会报异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-0&quot; java.lang.NullPointerException</span><br><span class="line">at com.iot.thread.ThreadScopeShareData$A.get(ThreadScopeShareData.java:29)</span><br><span class="line">at com.iot.thread.ThreadScopeShareData$1.run(ThreadScopeShareData.java:21)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><p>具体原因还不知道</p><h3 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h3><p>API:</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/ThreadLocal.html" target="_blank" rel="noopener"><code>java.lang:Class ThreadLocal&lt;T&gt;</code></a></p></blockquote><ul><li>单变量</li></ul><p>使用<code>ThreadLocal</code>类型的对象代替上面的<code>Map</code>即可</p><ul><li>多变量</li></ul><p>定义一个对象来封装多个变量，然后在ThreadLocal中存储整个对象</p><p>多变量时，最好将ThreadLocal类放在数据类的内部，数据类采用单例模式，这样，新建对象和获取对象都会更方便，同时封装性更强。</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadInger = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> data = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">                    threadInger.set(data);</span><br><span class="line">                    System.out.println(Thread.currentThread()+<span class="string">" put data："</span>+data);</span><br><span class="line">                    MyThreadScopeData.getThreadInstance().setName(Thread.currentThread().toString());</span><br><span class="line">                    MyThreadScopeData.getThreadInstance().setAge(data%<span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">new</span> A().get();</span><br><span class="line">                    <span class="keyword">new</span> B().get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> data = threadInger.get();</span><br><span class="line">            System.out.println(<span class="string">"A from "</span>+Thread.currentThread()+<span class="string">" get data "</span>+data);</span><br><span class="line">            MyThreadScopeData myThreadScopeData = MyThreadScopeData.getThreadInstance();</span><br><span class="line">            System.out.println(<span class="string">"A from "</span>+myThreadScopeData);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> data = threadInger.get();</span><br><span class="line">            System.out.println(<span class="string">"B from "</span>+Thread.currentThread()+<span class="string">" get data "</span>+data);</span><br><span class="line">            MyThreadScopeData myThreadScopeData = MyThreadScopeData.getThreadInstance();</span><br><span class="line">            System.out.println(<span class="string">"B from "</span>+myThreadScopeData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将多变量封装起来的数据类</span></span><br><span class="line"><span class="comment"> * 单例模式，内置ThreadLocal类型变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadScopeData</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyThreadScopeData</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;MyThreadScopeData&gt; data = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  MyThreadScopeData <span class="title">getThreadInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyThreadScopeData instance = data.get();</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> MyThreadScopeData();</span><br><span class="line">            data.set(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String reVal = <span class="keyword">super</span>.toString()+<span class="string">"-&#123;name,age&#125;"</span>+<span class="string">":&#123;"</span>+getName()+<span class="string">","</span>+getAge()+<span class="string">"&#125;"</span>;</span><br><span class="line">        <span class="keyword">return</span> reVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程访问共享数据"><a href="#多线程访问共享数据" class="headerlink" title="多线程访问共享数据"></a>多线程访问共享数据</h2><h3 id="几种方式"><a href="#几种方式" class="headerlink" title="几种方式"></a>几种方式</h3><ul><li>线程执行代码相同，使用同一Runnable对象，Runnable对象中有共享数据</li><li>线程执行代码不同，将共享数据封装在另一对象中（操作数据的方法也在该对象完成），将这个对象逐一传递给各个Runnable对象。[<strong>本质：共享数据的对象作为参数传入Runnable对象</strong>]</li><li>线程执行代码不同，将Runnable对象作为某一个类的内部类，共享数据作为这个外部类的成员变量（操作数据的方法放在外部类）。[<strong>本质:不同内部类共享外部类数据</strong>]</li><li>结合上两种方式，将共享数据封装在另一对象中（操作数据的方法也在该对象完成），该对象作为这个外部类的成员变量，将Runnable对象作为内部类</li></ul><p>最后一种方式的示例:</p><p>设计5个线程，其中三个线程每次对j增加1，另外两个线程对j每次减少1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutiThreadShareData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MutiShareData mutiShareData = <span class="keyword">new</span> MutiShareData();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(</span><br><span class="line">                    <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            System.out.println(Thread.currentThread()+<span class="string">":&#123;j from "</span>+ mutiShareData.getJ()+<span class="string">" + to: "</span>+mutiShareData.increment()+<span class="string">"&#125;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            ).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(</span><br><span class="line">                    <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            System.out.println(Thread.currentThread()+<span class="string">":&#123;j from "</span>+ mutiShareData.getJ()+<span class="string">" - to: "</span>+mutiShareData.decrement()+<span class="string">"&#125;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            ).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将共享数据封装在另一对象中（操作数据的方法也在该对象完成）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutiShareData</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">int</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span>  <span class="title">decrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> --j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getJ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setJ</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.j = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结线程共享数据的相关知识，主要包括两方面:一是某个线程内如何共享数据，保证各个线程的数据不交叉；一是多个线程间如何共享数据，保证数据的一致性。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://brianway.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(5)-多线程之传统多线程</title>
    <link href="https://brianway.github.io/2016/02/06/javase-learn-note-5-TraditionalThread/"/>
    <id>https://brianway.github.io/2016/02/06/javase-learn-note-5-TraditionalThread/</id>
    <published>2016-02-05T22:18:12.000Z</published>
    <updated>2019-04-07T16:16:59.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统线程技术"><a href="#传统线程技术" class="headerlink" title="传统线程技术"></a>传统线程技术</h1><a id="more"></a><h2 id="传统创建线程方式"><a href="#传统创建线程方式" class="headerlink" title="传统创建线程方式"></a>传统创建线程方式</h2><p>1.继承Thread类，覆盖run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread();</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>2.实现Runnable接口</p><p>Runnable不是线程，是线程要运行的代码的宿主。</p><p>1.看看Thread类源码，捋清Runnable，target,run,start关系</p><ul><li><code>Runnable</code>是一个接口</li><li><code>target</code>是<code>Thread</code>类中类型为<code>Runnable</code>，名为<code>target</code>的属性</li><li><code>run</code>是<code>Thread</code>类实现了<code>Runnable</code>的接口，重写的方法。</li><li><code>start</code>是启动线程的方法</li><li><strong>在<code>Thread</code>类中，调用关系为：<code>start</code>-&gt;<code>start0</code>-&gt;<code>run</code>-&gt;<code>target.run</code></strong></li></ul><p><code>Thread</code>类的<code>run</code>方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thread</code>类的<code>target</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* What will be run. */</span></span><br><span class="line"><span class="keyword">private</span> Runnable target;</span><br></pre></td></tr></table></figure><p><code>target</code>属性由<code>private void init(ThreadGroup g, Runnable target, String name,long stackSize, AccessControlContext acc)</code>方法初始化。<code>init</code>方法在<code>Thread</code>类的构造方法里被调用</p><p>2.匿名内部类对象的构造方法如何调用父类的非默认构造方法</p><h2 id="传统定时器技术"><a href="#传统定时器技术" class="headerlink" title="传统定时器技术"></a>传统定时器技术</h2><p>API：</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/Timer.html" target="_blank" rel="noopener">java.util:Class Timer</a></p></blockquote><p>例子：一个定时器实现交替2秒、3秒打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">" bomb!"</span>);</span><br><span class="line">            <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> MyTimerTask(), <span class="number">2000</span>+<span class="number">1000</span>*(count++%<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3s后开启定时器</span></span><br><span class="line">    <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> MyTimerTask(),<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<code>quarlz</code>开源工具</p><h2 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h2><p>关键字:<code>synchronized</code>，检查锁对象</p><ul><li><code>synchronized(this)</code></li><li><code>synchronized void function(){}</code></li><li><code>synchronized(A.class)</code></li></ul><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>经验：</p><blockquote><ul><li>要用到共同数据(包括同步锁)或共同算法的若干个方法应该归在同一个类身上，这种设计体现了高聚类和程序的健壮性。</li><li>同步互斥不是在线程上实现，而是在线程访问的资源上实现，线程调用资源。</li></ul></blockquote><p>例子: 子线程循环5次，主线程循环10次，如此交替50次</p><p>设计：</p><p>使用一个Business类来包含子线程和主线程要运行的代码，从而，该类的对象成为加锁的对象。同步互斥在该类实现，由线程调用该类的方法，即调用了资源。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraditionalThreadCommunication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Business business = <span class="keyword">new</span> Business();</span><br><span class="line">        <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">                            business.sub(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">            business.main(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> bShouldSub = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!bShouldSub)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"sub thread count "</span>+j+<span class="string">","</span>+i+<span class="string">"/50"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bShouldSub = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(bShouldSub)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"main thread count "</span>+j+<span class="string">","</span>+i+<span class="string">"/50"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bShouldSub = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断条件时，while与if的区别:while防止伪唤醒</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;传统线程技术&quot;&gt;&lt;a href=&quot;#传统线程技术&quot; class=&quot;headerlink&quot; title=&quot;传统线程技术&quot;&gt;&lt;/a&gt;传统线程技术&lt;/h1&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://brianway.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(4)-实现AOP功能的封装与配置的小框架</title>
    <link href="https://brianway.github.io/2016/02/03/javase-learn-note-4-AopFramework/"/>
    <id>https://brianway.github.io/2016/02/03/javase-learn-note-4-AopFramework/</id>
    <published>2016-02-03T06:46:12.000Z</published>
    <updated>2019-04-07T16:16:59.916Z</updated>
    
    <content type="html"><![CDATA[<p>本文通过是动态代理实现的AOP功能的封装与配置的小框架.加深对动态代理和AOP编程的理解</p><a id="more"></a><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>根据配置文件的键<code>xxx</code>对应的值(类全名)创建相应类的对象。</p><p>当且仅当<code>xxx</code>对应的值为<code>com.iot.proxy.aopframework.ProxyFactoryBean</code>时，则生成相应的动态代理类对象。代理对象的目标类和通知实现类分别由<code>xxx.target</code>和<code>xxx.advice</code>配置</p><p>配置文件</p><p><code>config.propertiest</code>位于<code>aopframework</code>包下</p><ul><li><code>xxx</code>代表要加载的类</li><li><code>xxx.advice</code>代表通知接口的某个实现类</li><li><code>xxx.target</code>代表委托类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#xxx=java.util.ArrayList</span><br><span class="line">xxx=com.iot.proxy.aopframework.ProxyFactoryBean</span><br><span class="line">xxx.advice=com.iot.proxy.MyAdvice</span><br><span class="line">xxx.target=java.util.ArrayList</span><br></pre></td></tr></table></figure><p>包:<code>com.iot.proxy.aopframework</code>,有如下几个类/接口：</p><ul><li><code>BeanFactory</code>,用于读取配置文件，根据配置创建相应的对象</li><li><code>ProxyFactoryBean</code>,用于生成代理对象，含有两个私有属性:目标和通知</li><li><code>Advice</code>,通知接口，用于把切面的代码以<strong>对象</strong>的形式传递给InvocationHandler的的invoke方法</li><li><code>MyAdvice</code>,<code>Advice</code>接口的一个实现类，打印执行方法前的时间及执行耗时</li><li><code>AopFrameWorkTest</code>，测试效果</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Advice接口"><a href="#Advice接口" class="headerlink" title="Advice接口"></a><code>Advice</code>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy.aopframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">aftereMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyAdvice类"><a href="#MyAdvice类" class="headerlink" title="MyAdvice类"></a><code>MyAdvice</code>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy.aopframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = <span class="number">0</span> ;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">" before at "</span>+beginTime);</span><br><span class="line">        beginTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aftereMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(method.getName()+<span class="string">" cost total "</span>+ (endTime-beginTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanFactory类"><a href="#BeanFactory类" class="headerlink" title="BeanFactory类"></a><code>BeanFactory</code>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy.aopframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanFactory</span><span class="params">(InputStream inputStream)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String className = properties.getProperty(name);</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(className);</span><br><span class="line">            bean = clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ProxyFactoryBean)&#123;</span><br><span class="line">            ProxyFactoryBean proxyFactoryBean = (ProxyFactoryBean)bean;</span><br><span class="line">            Advice advice = <span class="keyword">null</span>;</span><br><span class="line">            Object target = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                advice = (Advice) Class.forName(properties.getProperty(name+<span class="string">".advice"</span>)).newInstance();</span><br><span class="line">                target = Class.forName(properties.getProperty(name+<span class="string">".target"</span>)).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            proxyFactoryBean.setAdvice(advice);</span><br><span class="line">            proxyFactoryBean.setTarget(target);</span><br><span class="line">            Object proxy = ((ProxyFactoryBean) bean).getProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProxyFactoryBean类"><a href="#ProxyFactoryBean类" class="headerlink" title="ProxyFactoryBean类"></a><code>ProxyFactoryBean</code>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy.aopframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        advice.beforeMethod(method);</span><br><span class="line">                        Object retVal = method.invoke(target,args);</span><br><span class="line">                        advice.aftereMethod(method);</span><br><span class="line">                        <span class="keyword">return</span> retVal;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advice <span class="title">getAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> advice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advice = advice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AopFrameWorkTest类"><a href="#AopFrameWorkTest类" class="headerlink" title="AopFrameWorkTest类"></a><code>AopFrameWorkTest</code>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy.aopframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2016/2/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopFrameWorkTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputStream inputStream = AopFrameWorkTest.class.getResourceAsStream(<span class="string">"config.properties"</span>);</span><br><span class="line">        Object bean = <span class="keyword">new</span> BeanFactory(inputStream).getBean(<span class="string">"xxx"</span>);</span><br><span class="line">        System.out.println(bean.getClass().getName());</span><br><span class="line">        ((Collection) bean).clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li>配置<code>xxx=com.iot.proxy.aopframework.ProxyFactoryBean</code></li></ul><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.sun.proxy.$Proxy0</span><br><span class="line">clear before at 0</span><br><span class="line">clear cost total 0</span><br></pre></td></tr></table></figure><ul><li>配置<code>xxx=java.util.ArrayList</code></li></ul><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.ArrayList</span><br></pre></td></tr></table></figure><p>可以看出，只改变配置文件，就可改变代码的运行结果，从而达到灵活的效果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过是动态代理实现的AOP功能的封装与配置的小框架.加深对动态代理和AOP编程的理解&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="代理" scheme="https://brianway.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="AOP" scheme="https://brianway.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(4)-代理</title>
    <link href="https://brianway.github.io/2016/02/03/javase-learn-note-4-Proxy/"/>
    <id>https://brianway.github.io/2016/02/03/javase-learn-note-4-Proxy/</id>
    <published>2016-02-03T06:43:13.000Z</published>
    <updated>2019-04-07T16:16:59.866Z</updated>
    
    <content type="html"><![CDATA[<p>代理是实现AOP(Aspect oriented program，面向切面编程)的核心和关键技术。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>代理是一种设计模式，其目的是为其他对象提供一个代理以控制对某个对象的访问，代理类负责为委托类预处理消息，过滤消息并转发消息以及进行消息被委托类执行后的后续处理。为了保持行为的一致性，代理类和委托类通常会实现相同的接口</p><ul><li>静态代理：由程序员创建代理类或特定工具自动生成源代码再对其编译，也就是说在程序运行前代理类的.class文件就已经存在。</li><li>动态代理：在程序运行时运用反射机制动态创建生成。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E4%BB%A3%E7%90%86%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="代理架构图" title>                </div>                <div class="image-caption">代理架构图</div>            </figure><p><em>紫色箭头代表类的继承关系，红色连线表示调用关系</em></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>JVM可以在运行期动态生成类的字节码，该类往往被用作动态代理类。</li><li>JVM生成的动态类必须实现一个或多个接口，所以这种只能用作具有相同接口的目标类的代理。</li><li>CGLIB库可以动态生成一个类的子类，一个类的子类也可作为该类的代理，这个可用来为没有实现接口的类生成动态代理类。</li><li>代理类可在<em>调用目标方法之前、之后、前后、以及处理目标方法异常的catch块中</em>添加系统功能代码。</li></ul><h3 id="创建动态类"><a href="#创建动态类" class="headerlink" title="创建动态类"></a>创建动态类</h3><p>API:</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/reflect/Proxy.html" target="_blank" rel="noopener">java.lang.reflect:Class Proxy</a><br><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/reflect/InvocationHandler.html" target="_blank" rel="noopener">java.lang.reflect:Interface InvocationHandler</a></p></blockquote><ul><li>查看代理类方法列表信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brian on 2015/12/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazzProxy1 = Proxy.getProxyClass(Collection.class.getClassLoader(), Collection.class);</span><br><span class="line">        System.out.println(clazzProxy1);</span><br><span class="line">        printConstructors(clazzProxy1);</span><br><span class="line">        printMethods(clazzProxy1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印构造方法列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------------constructors list-------------"</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        System.out.print(getExecutableList(constructors));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印成员方法列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------------methods list-------------"</span>);</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        System.out.print(getExecutableList(methods));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取要打印的列表数据</span></span><br><span class="line"><span class="comment">     * 每行一个方法,按照func(arg1,arg2)的格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executables</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getExecutableList</span><span class="params">(Executable[] executables)</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Executable executable : executables) &#123;</span><br><span class="line">            String name = executable.getName();</span><br><span class="line">            stringBuilder.append(name);</span><br><span class="line">            stringBuilder.append(<span class="string">"("</span>);</span><br><span class="line">            Class[] clazzParams = executable.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class clazzParam : clazzParams) &#123;</span><br><span class="line">                stringBuilder.append(clazzParam.getName()).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (clazzParams != <span class="keyword">null</span> &amp;&amp; clazzParams.length != <span class="number">0</span>) &#123;</span><br><span class="line">                stringBuilder.deleteCharAt(stringBuilder.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(<span class="string">")\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class com.sun.proxy.$Proxy0</span><br><span class="line">-------------constructors list-------------</span><br><span class="line">com.sun.proxy.$Proxy0(java.lang.reflect.InvocationHandler)</span><br><span class="line">-------------methods list-------------</span><br><span class="line">add(java.lang.Object)</span><br><span class="line">remove(java.lang.Object)</span><br><span class="line">equals(java.lang.Object)</span><br><span class="line">toString()</span><br><span class="line">hashCode()</span><br><span class="line">clear()</span><br><span class="line">contains(java.lang.Object)</span><br><span class="line">isEmpty()</span><br><span class="line">iterator()</span><br><span class="line">size()</span><br><span class="line">toArray([Ljava.lang.Object;)</span><br><span class="line">toArray()</span><br><span class="line">spliterator()</span><br><span class="line">addAll(java.util.Collection)</span><br><span class="line">stream()</span><br><span class="line">forEach(java.util.function.Consumer)</span><br><span class="line">containsAll(java.util.Collection)</span><br><span class="line">removeAll(java.util.Collection)</span><br><span class="line">removeIf(java.util.function.Predicate)</span><br><span class="line">retainAll(java.util.Collection)</span><br><span class="line">parallelStream()</span><br><span class="line">isProxyClass(java.lang.Class)</span><br><span class="line">getInvocationHandler(java.lang.Object)</span><br><span class="line">getProxyClass(java.lang.ClassLoader,[Ljava.lang.Class;)</span><br><span class="line">newProxyInstance(java.lang.ClassLoader,[Ljava.lang.Class;,java.lang.reflect.InvocationHandler)</span><br><span class="line">wait()</span><br><span class="line">wait(long,int)</span><br><span class="line">wait(long)</span><br><span class="line">getClass()</span><br><span class="line">notify()</span><br><span class="line">notifyAll()</span><br></pre></td></tr></table></figure><ul><li>创建实例对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试创建实例对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createProxyInstance</span><span class="params">( )</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1：先创建代理类，再使用反射创建实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class clazzProxy1 = Proxy.getProxyClass(Collection.class.getClassLoader(), Collection.class);</span><br><span class="line">    Constructor constructor = clazzProxy1.getConstructor(InvocationHandler.class);</span><br><span class="line">    Collection proxy1 = (Collection) constructor.newInstance(<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法2：直接使用newProxyInstance方法创建实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Collection proxy2 = (Collection)Proxy.newProxyInstance(</span><br><span class="line">            Collection.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> Class[]&#123;Collection.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                ArrayList target = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">//ArrayList targetTmp = new ArrayList();</span></span><br><span class="line">            System.out.println(<span class="string">"before invoke method: "</span>+method.getName());</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target,args);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    proxy2.add(<span class="string">"aaa"</span>);</span><br><span class="line">    proxy2.add(<span class="string">"bbb"</span>);</span><br><span class="line">    System.out.println(proxy2.size());</span><br><span class="line">    System.out.println(proxy2);</span><br><span class="line">    System.out.println(proxy2.getClass().getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before invoke method: add</span><br><span class="line">before invoke method: add</span><br><span class="line">before invoke method: size</span><br><span class="line">2</span><br><span class="line">before invoke method: toString</span><br><span class="line">[aaa, bbb]</span><br><span class="line">com.sun.proxy.$Proxy0</span><br></pre></td></tr></table></figure><p>上述代码相关说明:</p><ul><li>若将<code>method.invoke(target,args);</code>改为<code>method.invoke(proxy,args);</code>会出现死循环</li><li>从输出结果可知，每次调用代理类的方法，实际都是调用<code>invoke</code>方法</li><li>若将<code>method.invoke(target,args);</code>改为<code>method.invoke(targetTmp,args);</code>，则<code>proxy2.size()</code>为0。因为每次调用<code>invoke</code>方法时，<code>targetTmp</code>为新的局部变量</li><li><code>Object</code>类只有的<code>hashCode</code>, <code>equals</code>, or <code>toString</code>方法会被交到<code>InvocationHandler</code>，其他方法自己有实现，不交给handler,所以最后打印结果为<code>com.sun.proxy.$Proxy0</code>而不是<code>Collection</code></li></ul><ul><li><code>InvocationHandler</code>对象的运行原理</li></ul><p><code>InvocationHandler</code>接口只有一个<code>invoke</code>方法，每次调用代理类的方法，即调用了<code>InvocationHandler</code>对象的<code>invoke</code>方法</p><p><code>invoke</code>方法涉及三个要素：</p><ul><li>代理对象</li><li>代理对象调用的方法</li><li>方法接受的参数</li></ul><p>注：Object类的<code>hashCode</code>,<code>equals</code>,<code>toString</code>方法交给invoke,其他的Object类的方法，Proxy有自己的实现。</p><blockquote><p>If a proxy interface contains a method with the same name and parameter signature as the hashCode, equals, or toString methods of java.lang.Object, when such a method is invoked on a proxy instance, the Method object passed to the invocation handler will have java.lang.Object as its declaring class. In other words, the public, non-final methods of java.lang.Object logically precede all of the proxy interfaces for the determination of which Method object to pass to the invocation handler.</p></blockquote><h3 id="动态代理的工作原理"><a href="#动态代理的工作原理" class="headerlink" title="动态代理的工作原理"></a>动态代理的工作原理</h3><p>代理类创建时需要传入一个InvocationHandler对象，client调用代理类，代理类的相应方法调用InvocationHandler的的invoke方法，InvocationHandler的的invoke方法(可在其中加入日志记录、时间统计等附加功能)再找目标类的相应方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="动态代理的工作原理图" title>                </div>                <div class="image-caption">动态代理的工作原理图</div>            </figure><h3 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h3><p>把切面的代码以<strong>对象</strong>的形式传递给InvocationHandler的的invoke方法，invoke方法中执行该对象的方法就执行了切面的代码。</p><p>所以需要传递两个参数：</p><p>1.目标(Object target)<br>2.通知(自定义的adviser类)</p><p>定义<code>Advice</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">aftereMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个实现<code>Advice</code>接口的类<code>MyAdvice</code>,用于打印执行方法前和执行后的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = <span class="number">0</span> ;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">" before at "</span>+beginTime);</span><br><span class="line">        beginTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aftereMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(method.getName()+<span class="string">" cost total "</span>+ (endTime-beginTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个<code>getProxy</code>方法创建实例对象,接收两个参数:目标和通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> Object target,<span class="keyword">final</span> Advice advice)</span></span>&#123;</span><br><span class="line">    Object proxy = Proxy.newProxyInstance(</span><br><span class="line">            target.getClass().getClassLoader(),</span><br><span class="line">            target.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    advice.beforeMethod(method);</span><br><span class="line">                    Object retVal = method.invoke(target,args);</span><br><span class="line">                    advice.aftereMethod(method);</span><br><span class="line">                    <span class="keyword">return</span> retVal;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collection proxy3 = (Collection) getProxy(<span class="keyword">new</span> ArrayList(),<span class="keyword">new</span> MyAdvice());</span><br><span class="line">proxy3.add(<span class="string">"111"</span>);</span><br><span class="line">proxy3.add(<span class="string">"222"</span>);</span><br><span class="line">System.out.println(proxy3.size());</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add before at 0</span><br><span class="line">add cost total 0</span><br><span class="line">add before at 1454433980839</span><br><span class="line">add cost total 0</span><br><span class="line">size before at 1454433980839</span><br><span class="line">size cost total 0</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://developer.51cto.com/art/201509/492614.htm" target="_blank" rel="noopener">Java动态代理的实现机制</a></li><li><a href="http://www.cnblogs.com/xdp-gacl/p/3971367.html" target="_blank" rel="noopener">Java基础加强总结(三)——代理(Proxy)</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理是实现AOP(Aspect oriented program，面向切面编程)的核心和关键技术。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
      <category term="代理" scheme="https://brianway.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(3)-类加载器</title>
    <link href="https://brianway.github.io/2016/02/03/javase-learn-note-3-ClassLoader/"/>
    <id>https://brianway.github.io/2016/02/03/javase-learn-note-3-ClassLoader/</id>
    <published>2016-02-03T06:38:12.000Z</published>
    <updated>2019-04-07T16:16:59.950Z</updated>
    
    <content type="html"><![CDATA[<p>java类加载器就是在运行时在JVM中动态地加载所需的类，java类加载器基于三个机制：委托，可见，单一。</p><a id="more"></a><p>把 classpath 下的那些 <code>.class</code> 文件加载进内存，处理后形成可以被虚拟机直接使用的 Java 类型，这些工作是类加载器做的。</p><ul><li><strong>委托机制</strong>：指的是将加载类的请求传递给父加载器，如果父加载器找不到或者不能加载这个类，那么再加载他。</li><li><strong>可见性机制</strong>：指的是父加载器加载的类都能被子加载器看见，但是子加载器加载的类父加载器是看不见的。</li><li><strong>单一性机制</strong>：指的是一个类只能被同一种加载器加载一次。</li></ul><h2 id="默认类加载器"><a href="#默认类加载器" class="headerlink" title="默认类加载器"></a>默认类加载器</h2><p>系统默认三个类加载器:</p><ul><li><code>BootStrap</code></li><li><code>ExtClassLoader</code></li><li><code>AppClassLoader</code></li></ul><p><em>类加载器也是java类，而BootStrap不是。</em> 验证代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(System.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<code>null</code></p><p>如果使用<code>System.out.println(System.class.getClassLoader().toString);</code>，则报空指针异常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">at com.iot.classloader.ClassLoaderTest.main(ClassLoaderTest.java:10)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class="line">at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br></pre></td></tr></table></figure><p>可见，System类是由BootStrap类加载器加载。</p><h2 id="类加载器的委托机制"><a href="#类加载器的委托机制" class="headerlink" title="类加载器的委托机制"></a>类加载器的委托机制</h2><p>类加载器的树状图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="类加载器" title>                </div>                <div class="image-caption">类加载器</div>            </figure><p>一般加载类的顺序：</p><ul><li>首先当前线程的类加载器去加载线程中的第一个类</li><li>如果类A应用了类B，java虚拟机将使用加载类A的类加载器来加载类B</li><li>还可以直接调用ClassLoader.loadClass()方法来制定某个类加载器去加载某个类</li></ul><hr><h2 id="自定义类加载器的编写原理"><a href="#自定义类加载器的编写原理" class="headerlink" title="自定义类加载器的编写原理"></a>自定义类加载器的编写原理</h2><p>API:</p><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/ClassLoader.html" target="_blank" rel="noopener">Class ClassLoader</a></p></blockquote><p>模板方法设计模式</p><p>父类:</p><ul><li><code>loadClass</code>(类加载的流程，模板)</li><li><code>findClass</code>供子类覆盖的、被<code>loadClass</code>方法调用的类加载逻辑</li><li><code>defineClass</code>得到class文件转换成字节码</li></ul><p>子类:覆盖<code>findClass</code>方法</p><p>例子：</p><p><code>loadClass</code>方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API文档中的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">     String host;</span><br><span class="line">     <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">         <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">         <span class="comment">// load the class data from the connection</span></span><br><span class="line">          . . .</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://ju.outofmemory.cn/entry/142486" target="_blank" rel="noopener">java类加载机制工作原理</a></li><li><a href="http://blog.csdn.net/gjanyanlig/article/details/6818655" target="_blank" rel="noopener">Java类加载器总结 - 寂静大海 - 博客频道 - CSDN.NET</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java类加载器就是在运行时在JVM中动态地加载所需的类，java类加载器基于三个机制：委托，可见，单一。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>将nutch2.3的bin/crawl脚本改写为java类</title>
    <link href="https://brianway.github.io/2016/01/19/nutch-translate-bin-crawl-shell-to-java/"/>
    <id>https://brianway.github.io/2016/01/19/nutch-translate-bin-crawl-shell-to-java/</id>
    <published>2016-01-19T05:01:11.000Z</published>
    <updated>2019-04-07T16:16:59.861Z</updated>
    
    <content type="html"><![CDATA[<p>nutch1.8以后，以前的主控代码<code>org.apache.nutch.crawl.Crawl</code>类没了，只剩下对应的控制脚本<code>bin/crawl</code>，感觉在IDEA里面调试不方便，所以我了解了下shell脚本,根据nutch2.3的<code>bin/crawl</code>和<code>bin/nutch</code>脚本，把<code>bin/crawl</code>翻译成了java的Crawl类以便在IDEA里面调试</p><a id="more"></a><h2 id="代码设计说明"><a href="#代码设计说明" class="headerlink" title="代码设计说明"></a>代码设计说明</h2><p>我参考了nutch1.7的<code>crawl</code>类，nutch2.3的<code>bin/crawl</code>和<code>bin/nutch</code>,尽量按照shell脚本的原组织结构和逻辑进行翻译，有些地方不能直接使用的，就稍作了修改。</p><ul><li>主要的业务逻辑在<code>public int run(String[] args)</code>方法里</li><li>程序主入口是<code>main</code>，调用<code>ToolRunner.run(NutchConfiguration.create(), new Crawl(), args);</code>执行上面的<code>run</code>方法</li><li><code>public void binNutch4j(String jobName,String commandLine,String options)</code>相当于<code>bin/crawl</code>脚本里函数<code>__bin_nutch</code>的功能</li><li><code>public int runJob(String jobName,String commandLine,String options)</code>相当于脚本<code>bin/nutch</code>的功能，这里没有像脚本中那样用<code>if-else</code>，也没有使用<code>switch-case</code>,而是采用反射创建相应的job</li><li><code>public void preConfig(Configuration conf,String options)</code>用于根据带<code>-D</code>参数 commonOptions等指令设置每个Job的配置项</li><li><code>CLASS_MAP</code>是静态(<code>static</code>)属性，一个记录JobName和对应的类名的映射关系的哈希表(<code>HashMap</code>)</li></ul><h2 id="gora-BUG说明"><a href="#gora-BUG说明" class="headerlink" title="gora BUG说明"></a>gora BUG说明</h2><p>我之前是在每个job是按照脚本使用batchId参数的，遇到了下面这个问题:</p><blockquote><p><a href="http://stackoverflow.com/questions/30662489/gora-mongodb-exception-cant-serialize-utf8" target="_blank" rel="noopener">Gora MongoDb Exception, can’t serialize Utf8</a></p></blockquote><p>貌似是序列化问题，好像gora-0.6版本解决了这个BUG,但我的nutch代码是gora-0.5的，不会升级，所以就简单的把<code>-batchId</code>参数去掉，使用<code>-all</code>参数就行了，这点在代码里可以看到。</p><p>关于升级到gora-0.6,有空再研究好了。</p><p>通过这个脚本的改写，我了解了脚本的基本使用，同时对之前看的java反射等知识进行了实践，并对nutch的完整爬取流程、主要控制逻辑有了深刻的印象。主要是前面那个gora的BUG卡了我几天，我还以为自己翻译的有问题，看来调试能力还需要加强。</p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><p>这段代码是翻译nutch2.3的<code>bin/crawl</code>和<code>bin/nutch</code>脚本</p><p><code>Crawl</code>类加到在<code>org.apache.nutch.crawl</code>包下，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.nutch.crawl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by brianway on 2016/1/19.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> brianway</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> brianway.github.io</span></span><br><span class="line"><span class="comment"> * org.apache.nutch.crawl.Crawl;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.nutch.fetcher.FetcherJob;</span><br><span class="line"><span class="keyword">import</span> org.apache.nutch.util.NutchConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.nutch.util.NutchTool;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commons Logging imports</span></span><br><span class="line"><span class="comment">//import org.apache.hadoop.fs.*;</span></span><br><span class="line"><span class="comment">//import org.apache.hadoop.mapred.*;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.util.HadoopFSUtil;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.util.NutchJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.crawl.InjectorJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.crawl.GeneratorJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.fetcher.FetcherJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.parse.ParserJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.crawl.DbUpdaterJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.indexer.IndexingJob;</span></span><br><span class="line"><span class="comment">//import org.apache.nutch.indexer.solr.SolrDeleteDuplicates;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crawl</span> <span class="keyword">extends</span> <span class="title">NutchTool</span> <span class="keyword">implements</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(Crawl.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Perform complete crawling and indexing (to Solr) given a set of root urls and the -solr</span></span><br><span class="line"><span class="comment">   parameter respectively. More information and Usage parameters can be found below. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = ToolRunner.run(NutchConfiguration.create(), <span class="keyword">new</span> Crawl(), args);</span><br><span class="line">        System.exit(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了编译过</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">run</span><span class="params">(Map&lt;String, Object&gt; args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println</span><br><span class="line">                    (<span class="string">"Usage: Crawl -urls &lt;urlDir&gt; -crawlId &lt;crawlID&gt; -solr &lt;solrURL&gt;  [-threads n] [-depth i] [-topN N]"</span>);</span><br><span class="line">            <span class="comment">// ("Usage: crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrUrl&gt;] &lt;numberOfRounds&gt;");</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ------------check args---------</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        //！！由脚本直译的，感觉少参数,所以注释掉，换下面的方式</span></span><br><span class="line"><span class="comment">        String seedDir = args[1];</span></span><br><span class="line"><span class="comment">        String crawlID = args[2];</span></span><br><span class="line"><span class="comment">        String solrUrl=null;</span></span><br><span class="line"><span class="comment">        int limit=1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(args.length-1 == 3)&#123;</span></span><br><span class="line"><span class="comment">            limit = Integer.parseInt(args[3]);</span></span><br><span class="line"><span class="comment">        &#125;else if(args.length-1 == 4)&#123;</span></span><br><span class="line"><span class="comment">            solrUrl = args[3];</span></span><br><span class="line"><span class="comment">            limit = Integer.parseInt(args[4]);</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            System.out.println("Unknown # of arguments "+(args.length-1));</span></span><br><span class="line"><span class="comment">            System.out.println</span></span><br><span class="line"><span class="comment">                    ("Usage: crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrUrl&gt;] &lt;numberOfRounds&gt;");</span></span><br><span class="line"><span class="comment">            return -1;</span></span><br><span class="line"><span class="comment">            //"Usage: Crawl &lt;urlDir&gt; -solr &lt;solrURL&gt; [-dir d] [-threads n] [-depth i] [-topN N]"</span></span><br><span class="line"><span class="comment">            //"Usage: crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrUrl&gt;] &lt;numberOfRounds&gt;";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        String seedDir = <span class="keyword">null</span>;</span><br><span class="line">        String crawlID = <span class="keyword">null</span>;</span><br><span class="line">        String solrUrl=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> topN = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> threads = getConf().getInt(<span class="string">"fetcher.threads.fetch"</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//parameter-format in crawl class is</span></span><br><span class="line">        <span class="comment">// like nutch1.7 "Usage: Crawl &lt;urlDir&gt; -solr &lt;solrURL&gt; [-dir d] [-threads n] [-depth i] [-topN N]"</span></span><br><span class="line">        <span class="comment">//not like nutch2.3 "Usage: crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrUrl&gt;] &lt;numberOfRounds&gt;";</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"-urls"</span>.equals(args[i])) &#123;</span><br><span class="line">                seedDir = args[++i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-crawlId"</span>.equals(args[i])) &#123;</span><br><span class="line">                crawlID = args[++i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-threads"</span>.equals(args[i])) &#123;</span><br><span class="line">                threads = Integer.parseInt(args[++i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-depth"</span>.equals(args[i])) &#123;</span><br><span class="line">                limit = Integer.parseInt(args[++i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-topN"</span>.equals(args[i])) &#123;</span><br><span class="line">                topN =   Long.parseLong(args[++i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-solr"</span>.equals(args[i])) &#123;</span><br><span class="line">                solrUrl = args[++i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">                System.err.println(<span class="string">"Unrecognized arg "</span> + args[i]);</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(seedDir))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Missing seedDir : crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrURL&gt;] &lt;numberOfRounds&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(crawlID))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Missing crawlID : crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrURL&gt;] &lt;numberOfRounds&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(solrUrl))&#123;</span><br><span class="line">            System.out.println(<span class="string">"No SOLRURL specified. Skipping indexing."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(limit == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Missing numberOfRounds : crawl &lt;seedDir&gt; &lt;crawlID&gt; [&lt;solrURL&gt;] &lt;numberOfRounds&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * MODIFY THE PARAMETERS BELOW TO YOUR NEEDS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//set the number of slaves nodes</span></span><br><span class="line">        <span class="keyword">int</span> numSlaves = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//and the total number of available tasks</span></span><br><span class="line">        <span class="comment">// sets Hadoop parameter "mapred.reduce.tasks"</span></span><br><span class="line">        <span class="keyword">int</span> numTasks = numSlaves&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// number of urls to fetch in one iteration</span></span><br><span class="line">        <span class="comment">// 250K per task?</span></span><br><span class="line">        <span class="comment">//!!这里使用topN</span></span><br><span class="line">        <span class="keyword">long</span> sizeFetchlist = topN;<span class="comment">//numSlaves *5;</span></span><br><span class="line">        <span class="comment">// time limit for feching</span></span><br><span class="line">        <span class="keyword">int</span> timeLimitFetch=<span class="number">180</span>;</span><br><span class="line">        <span class="comment">//Adds &lt;days&gt; to the current time to facilitate</span></span><br><span class="line">        <span class="comment">//crawling urls already fetched sooner then</span></span><br><span class="line">        <span class="comment">//db.default.fetch.interval.</span></span><br><span class="line">        <span class="keyword">int</span> addDays=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// note that some of the options listed here could be set in the</span></span><br><span class="line">        <span class="comment">// corresponding hadoop site xml param file</span></span><br><span class="line">        String commonOptions=<span class="string">"-D mapred.reduce.tasks="</span>+numTasks+<span class="string">" -D mapred.child.java.opts=-Xmx1000m -D mapred.reduce.tasks.speculative.execution=false -D mapred.map.tasks.speculative.execution=false -D mapred.compress.map.output=true "</span>;</span><br><span class="line"></span><br><span class="line">        preConfig(getConf(),commonOptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//initial injection</span></span><br><span class="line">        System.out.println(<span class="string">"Injecting seed URLs"</span>);</span><br><span class="line">        String  inject_args = seedDir+<span class="string">" -crawlId "</span>+crawlID;</span><br><span class="line">        binNutch4j(<span class="string">"inject"</span>,inject_args,commonOptions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=limit;a++)&#123;</span><br><span class="line">            <span class="comment">//-----------generating-------------</span></span><br><span class="line">            System.out.println(<span class="string">"Generating batchId"</span>);</span><br><span class="line">            String batchId = System.currentTimeMillis()+<span class="string">"-"</span>+<span class="keyword">new</span> Random().nextInt(<span class="number">32767</span>);</span><br><span class="line">            System.out.println(<span class="string">"Generating a new fetchlist"</span>);</span><br><span class="line">            String  generate_args = <span class="string">"-topN "</span>+ sizeFetchlist +<span class="string">" -noNorm -noFilter -adddays "</span>+addDays+<span class="string">" -crawlId "</span>+crawlID+<span class="string">" -batchId "</span>+batchId;</span><br><span class="line">            <span class="comment">//String  generate_options = commonOptions;</span></span><br><span class="line">            <span class="keyword">int</span>  res = runJob(<span class="string">"generate"</span>,generate_args,commonOptions);</span><br><span class="line">            System.out.println(<span class="string">"binNutch4j generate "</span>+generate_args);</span><br><span class="line">            <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Generate returned 1 (no new segments created)"</span>);</span><br><span class="line">                System.out.println(<span class="string">"Escaping loop: no more URLs to fetch now"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Error running:"</span>);</span><br><span class="line">                System.out.println(<span class="string">"binNutch4j generate "</span>+generate_args);</span><br><span class="line">                System.out.println(<span class="string">"Failed with exit value "</span>+res);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//--------fetching-----------</span></span><br><span class="line">            System.out.println(<span class="string">"Fetching : "</span>);</span><br><span class="line">            <span class="comment">//String fetch_args = batchId+" -crawlId "+crawlID+" -threads "+threads;</span></span><br><span class="line">            String fetch_args = <span class="string">"-all"</span>+<span class="string">" -crawlId "</span>+crawlID+<span class="string">" -threads "</span>+threads;</span><br><span class="line">            String  fetch_options = commonOptions+<span class="string">" -D fetcher.timelimit.mins="</span>+timeLimitFetch;</span><br><span class="line">            <span class="comment">//10 threads</span></span><br><span class="line">            binNutch4j(<span class="string">"fetch"</span>,fetch_args,fetch_options);</span><br><span class="line">            <span class="comment">//----------parsing--------------</span></span><br><span class="line">            <span class="comment">// parsing the batch</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(!getConf().getBoolean(FetcherJob.PARSE_KEY, <span class="keyword">false</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Parsing : "</span>);</span><br><span class="line">                <span class="comment">//enable the skipping of records for the parsing so that a dodgy document</span></span><br><span class="line">                <span class="comment">// so that it does not fail the full task</span></span><br><span class="line">                <span class="comment">//String parse_args = batchId+" -crawlId "+crawlID;</span></span><br><span class="line">                String parse_args = <span class="string">"-all"</span>+<span class="string">" -crawlId "</span>+crawlID;</span><br><span class="line">                String  skipRecordsOptions=<span class="string">" -D mapred.skip.attempts.to.start.skipping=2 -D mapred.skip.map.max.skip.records=1"</span>;</span><br><span class="line">                binNutch4j(<span class="string">"parse"</span>,parse_args,commonOptions+skipRecordsOptions);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//----------updatedb------------</span></span><br><span class="line">            <span class="comment">// updatedb with this batch</span></span><br><span class="line">            System.out.println(<span class="string">"CrawlDB update for "</span>+crawlID);</span><br><span class="line">           <span class="comment">// String updatedb_args = batchId+" -crawlId "+crawlID;</span></span><br><span class="line">            String updatedb_args = <span class="string">"-all"</span>+<span class="string">" -crawlId "</span>+crawlID;</span><br><span class="line">            binNutch4j(<span class="string">"updatedb"</span>,updatedb_args,commonOptions);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!StringUtils.isEmpty(solrUrl))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Indexing "</span>+ crawlID+ <span class="string">" on SOLR index -&gt; "</span> +solrUrl);</span><br><span class="line">                String index_args = batchId+<span class="string">"  -all -crawlId "</span>+crawlID;</span><br><span class="line">                String  index_options = commonOptions+<span class="string">" -D solr.server.url="</span>+solrUrl;</span><br><span class="line">                binNutch4j(<span class="string">"index"</span>,index_args,index_options);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"SOLR dedup -&gt; "</span>+solrUrl);</span><br><span class="line">                binNutch4j(<span class="string">"solrdedup"</span>,solrUrl,commonOptions);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Skipping indexing tasks: no SOLR url provided."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于bin/crawl的函数__bin_nutch的功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName job</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commandLine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binNutch4j</span><span class="params">(String jobName,String commandLine,String options)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = runJob(jobName,commandLine,options);</span><br><span class="line">        <span class="keyword">if</span>(res!=<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Error running:"</span>);</span><br><span class="line">            System.out.println(jobName + <span class="string">" "</span> + commandLine);</span><br><span class="line">            System.out.println(<span class="string">"Error running:"</span>);</span><br><span class="line">            System.exit(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于脚本bin/nutch的功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commandLine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">runJob</span><span class="params">(String jobName,String commandLine,String options)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//这里为了方便，没有像脚本那样用多个if-elif语句，也没有用switch-case,直接用了反射来完成</span></span><br><span class="line">        Configuration conf = NutchConfiguration.create();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(options))&#123;</span><br><span class="line">            preConfig(conf,options);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] args =  commandLine.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        String className = CLASS_MAP.get(jobName);</span><br><span class="line">        Class&lt;?&gt; jobClass  =  Class.forName(className);</span><br><span class="line">        Constructor c = jobClass.getConstructor();</span><br><span class="line">        Tool  job =(Tool) c.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"---------------runJob: "</span>+jobClass.getName()+<span class="string">"----------------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>  ToolRunner.run(conf, job, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置每个job的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preConfig</span><span class="params">(Configuration conf,String options)</span></span>&#123;</span><br><span class="line">        String [] equations = options.split(<span class="string">"\\s*-D\\s+"</span>);</span><br><span class="line">        System.out.println(<span class="string">"options:"</span>+options);</span><br><span class="line">        <span class="comment">// i start from  1 not  0, skip the empty string ""</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;equations.length;i++) &#123;</span><br><span class="line">            String equation = equations[i];</span><br><span class="line">            String [] pair = equation.split(<span class="string">"="</span>);</span><br><span class="line">            <span class="comment">//System.out.println(pair[0]+":"+pair[1]);</span></span><br><span class="line">            conf.set(pair[<span class="number">0</span>],pair[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//System.out.println("conf print: "+pair[0]+"  "+conf.get(pair[0]));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the map to store the mapping relations jobName-&gt;ClassName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,String&gt; CLASS_MAP = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * init the CLASS_MAP，refer to "bin/nutch"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        CLASS_MAP.put(<span class="string">"inject"</span>,<span class="string">"org.apache.nutch.crawl.InjectorJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"generate"</span>,<span class="string">"org.apache.nutch.crawl.GeneratorJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"fetch"</span>,<span class="string">"org.apache.nutch.fetcher.FetcherJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"parse"</span>,<span class="string">"org.apache.nutch.parse.ParserJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"updatedb"</span>,<span class="string">"org.apache.nutch.crawl.DbUpdaterJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"readdb"</span>,<span class="string">"org.apache.nutch.crawl.WebTableReader"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"elasticindex"</span>,<span class="string">"org.apache.nutch.indexer.elastic.ElasticIndexerJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"index"</span>,<span class="string">"org.apache.nutch.indexer.IndexingJob"</span>);</span><br><span class="line">        CLASS_MAP.put(<span class="string">"solrdedup"</span>,<span class="string">"org.apache.nutch.indexer.solr.SolrDeleteDuplicates"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://datahref.com/book/article.php?article=nutch_bin_crawl" target="_blank" rel="noopener">Nutch流程控制源码详解（bin/crawl中文注释版）</a></li><li><a href="http://datahref.com/book/article.php?article=nutch_run_nutch_in_ide" target="_blank" rel="noopener">Nutch教程——导入Nutch工程，执行完整爬取</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nutch1.8以后，以前的主控代码&lt;code&gt;org.apache.nutch.crawl.Crawl&lt;/code&gt;类没了，只剩下对应的控制脚本&lt;code&gt;bin/crawl&lt;/code&gt;，感觉在IDEA里面调试不方便，所以我了解了下shell脚本,根据nutch2.3的&lt;code&gt;bin/crawl&lt;/code&gt;和&lt;code&gt;bin/nutch&lt;/code&gt;脚本，把&lt;code&gt;bin/crawl&lt;/code&gt;翻译成了java的Crawl类以便在IDEA里面调试&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Nutch" scheme="https://brianway.github.io/tags/Nutch/"/>
    
      <category term="shell" scheme="https://brianway.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>光盘和U盘安装win7和ubuntu14.04全步骤</title>
    <link href="https://brianway.github.io/2016/01/18/linux-win7-ubuntu-setup-by-USBandCD/"/>
    <id>https://brianway.github.io/2016/01/18/linux-win7-ubuntu-setup-by-USBandCD/</id>
    <published>2016-01-18T02:36:10.000Z</published>
    <updated>2019-04-07T16:16:59.956Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，作为一个学IT的，居然自己没重装过系统。一直想自己安装一次双系统，正好这个周日抽空研究了下，折腾了一天，总算如愿以偿。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文是先安装windows再安装linux，并通过windows引导linux的启动项。这样方便linux的反复重装、折腾等。</li><li>光盘安装和U盘安装基本差不多，只是U盘安装多了把镜像文件写到U盘制成启动盘的过程，启动时对应选择<em>从USB启动</em>/<em>从CD-ROM启动</em>即可</li><li>由于我有win7的光盘，就没研究怎么刻录win7到U盘</li><li>关于每一步的截图，文末的【参考资料】里别人已经截的很完善了，我就没重复造轮子(<em>知乎那个李彬的答案关于EasyBCD使用有问题，那是硬盘启动，而非U盘，U盘没那么麻烦</em>)</li><li>该文只是综合各个参考资料，按照安装顺序、更全面的把每一步需要注意的关键点用文字整理记录</li><li>关于原理部分，可以看《鸟叔私房菜-基础学习篇》(第三版)第3、4章相关内容，里面对MBR、分区表、引导加载程序的工作执行等有深入浅出的讲解</li></ul><hr><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><blockquote><ul><li><a href="http://www.drivergenius.com/" target="_blank" rel="noopener">驱动精灵</a>–用于安装win7的各种驱动，建议下载<strong>万能网卡版</strong>，把网络解决了才方便后面在线下载其他驱动</li><li><a href="http://www.xiazaizhijia.com/soft/6387.html" target="_blank" rel="noopener">WIN7 Activation(Win7激活工具) 1.8 绿色免费版</a>–用于激活win7</li><li><a href="http://www.softpedia.com/get/System/OS-Enhancements/EasyBCD.shtml" target="_blank" rel="noopener">EasyBCD</a> （<a href="http://www.softpedia.com/get/System/OS-Enhancements/EasyBCD.shtml" target="_blank" rel="noopener">Community Edition</a> / <a href="http://www.onlinedown.net/soft/58174.htm" target="_blank" rel="noopener">中文版下载</a>）–用于设置由windows引导ubuntu的启动加载程序,</li><li><a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/#button" target="_blank" rel="noopener">Universal-USB-Installer</a>–用于制作ubuntu的U盘启动盘</li><li><a href="http://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu Desktop</a> (附<a href="http://www.ubuntu.com/download/ubuntu-kylin" target="_blank" rel="noopener">kylin(优麒麟)版</a>)–Ubuntu的ISO镜像文件,用于制作U盘启动盘</li></ul></blockquote><hr><h2 id="步骤概述"><a href="#步骤概述" class="headerlink" title="步骤概述"></a>步骤概述</h2><ul><li><strong>win7安装</strong></li></ul><ol><li>插入光盘，重启电脑，狂按<code>F12</code></li><li>选择从CD-ROM启动</li><li>点安装，按提示进行就行了</li><li>用驱动精灵安装各种驱动</li><li>下载其他普通软件</li></ol><ul><li><strong>ubuntu 14.04安装</strong></li></ul><ol><li>刻录驱动盘,刻好后插入</li><li>重启电脑，狂按<code>F12</code>，选择USB启动</li><li>按照提示选择语言、分区、键盘布局等</li><li>重启电脑，在win7下添加启动菜单</li><li>重启电脑，选ubuntu，安装ubuntu的一些软件</li></ol><hr><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>这里对上面<strong>【步骤概述】</strong>相应步骤中需要注意的地方进行说明</p><h3 id="win7安装"><a href="#win7安装" class="headerlink" title="win7安装"></a>win7安装</h3><p>第1，2两步</p><ul><li>没什么好说的。我是戴尔的电脑，不同电脑进入启动界面的按键可能不同，戴尔的是<code>F12</code>,其他电脑的可能是<code>Delete</code>、<code>F2</code>、<code>F10</code>等</li><li>在BIOS里面，硬盘有时候不是 Hard Deice，有时候是HDD等，光驱不一定是CDROM，有时候是DVD-;</li></ul><p>第3步</p><ul><li>提示”进行何种类型的安装”-&gt;选择“自定义(高级)”；</li><li>分区时，如果不想影响其他盘的话，直接点系统盘(C盘)然后下一步即可，这时其他盘数据不会被影响；如果想重新分区，这里可以分区、格式化。点完就直接开始安装了。</li><li>需要注意的是，我不知道为什么，点分区只能分主分区，不能分逻辑分区。所以如果要安装双系统的话，需要留一个分区给linux，分区时主分区最多3个。</li><li>记得给linux留点硬盘空间，我这里留了100G</li><li>期间系统会自动重启，等进入到设置用户名密码、产品密钥等就说明好了，设置完就OK了。这里密钥能填正确最好，填失败了的话，后面还可以通过激活工具激活。</li><li>关于分区，其实可以在重装系统前进行，”开始-&gt;计算机-&gt;右键-&gt;管理-&gt;存储-&gt;磁盘管理”</li></ul><p>第4步</p><ul><li>把驱动精灵用U盘拷到电脑上，安装驱动精灵，然后先安装网卡驱动，能连网了再安装别的驱动。期间可能会多次询问重启，选择稍后重启，都安完了一次性重启</li></ul><p>第5步</p><ul><li>安装其他的软件，比如浏览器啊，上面提到的EasyBCD啊等</li></ul><h3 id="ubuntu安装"><a href="#ubuntu安装" class="headerlink" title="ubuntu安装"></a>ubuntu安装</h3><p>第1步</p><ul><li>下载ubuntu镜像，用上面提到的工具刻录U盘(格式化成FAT32的格式)，详情见文末的【参考链接4】</li><li>依次选择ubuntu版本，镜像文件，要写入的U盘。最后那个可选项可以不管，默认0MB</li></ul><p>第2步</p><ul><li>没什么特别的</li></ul><p>第3步</p><ul><li>选择第二项，安装ubuntu</li><li>选择语言，中文往下拉，在后面</li><li>选择“安装这个第三方软件”，其他不管</li><li>联网可选，有wifi这时可以先连</li><li><strong>重要</strong>：选择最后一个”其他选项”</li><li><strong>重要</strong>：分区。这里每个人不一样,我分配的大小都比较富裕，顺序是按表中由上到下分配的。关于分区，可以参考<a href="http://www.cnblogs.com/gylei/archive/2011/12/04/2275987.html" target="_blank" rel="noopener">Linux系统安装时分区的选择</a></li></ul><table><thead><tr><th>挂载点</th><th style="text-align:center">大小</th><th style="text-align:center">类型</th><th style="text-align:center">新分区位置</th><th style="text-align:center">用于</th></tr></thead><tbody><tr><td>/boot</td><td style="text-align:center">200M</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">EXT4日志文件系统</td></tr><tr><td>/</td><td style="text-align:center">20G</td><td style="text-align:center">主分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">EXT4日志文件系统</td></tr><tr><td>不设置</td><td style="text-align:center">2G</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">交换空间</td></tr><tr><td>/home</td><td style="text-align:center">60G</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">EXT4日志文件系统</td></tr></tbody></table><ul><li><p><strong>重要</strong>：上一步中，要记住/boot的设备号，比如我的是<code>/dev/sda6</code>,下面的”安装启动引导器的设备”-&gt;选择/boot所在的分区。这里不要选错，不然就是linux引导windows</p></li><li><p>后面无非就是一些用户设置了，没什么难的，键盘布局就选英文(美国)就行</p></li></ul><p>第4步</p><ul><li>安装好后ubuntu，重启电脑，进入win7设置启动菜单</li><li>打开EasyBCD，”添加新条目-&gt;linux/BSD-&gt;类型:GRUN(Legacy),设备/驱动器:刚才/boot对应的分区-&gt;点添加”</li><li>/boot的分区是以linux开头的，不记得就看大小，比如我的是200M</li><li>可以在工具栏的”编辑引导菜单”查看启动菜单</li></ul><p>第5步</p><ul><li>首先需要更新一下依赖：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li>校园网认证使用mentohust,可以在linux公社下载，<a href="http://linux.linuxidc.com/2013%E5%B9%B4%E8%B5%84%E6%96%99/1%E6%9C%88/20%E6%97%A5/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8MentoHUST%E4%BB%A3%E6%9B%BF%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/" target="_blank" rel="noopener">mentohust下载地址</a>,用户和密码都是<code>www.linuxidc.com</code></li><li>下载地址位于<code>http://linux.linuxidc.com/</code>的”/2013年资料/1月/20日/Ubuntu下使用MentoHUST代替锐捷认证上网”，或者”pub/ubuntu/Ubuntu 11.04校园网锐捷认证上网”下</li><li>可参考<a href="http://www.linuxidc.com/Linux/2013-10/91157.htm" target="_blank" rel="noopener">Ubuntu下使用MentoHUST搞定 锐捷校园网认证网络</a>和<a href="http://www.linuxidc.com/Linux/2013-10/91158.htm" target="_blank" rel="noopener">Ubuntu下Mentohust的配置</a>这两篇文章</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ol><li><a href="https://www.zhihu.com/question/19867618" target="_blank" rel="noopener">知乎：怎样安装 Windows 7 与 Linux 的双系统？</a></li><li><a href="http://www.linuxidc.com/Linux/2012-05/59663.htm" target="_blank" rel="noopener">linux公社：Ubuntu 12.04和Windows 7双系统安装图解</a></li><li><a href="http://blog.sina.com.cn/s/blog_86e874d30101e3d8.html" target="_blank" rel="noopener">Win7下安装CentOS 6.5双系统</a></li><li><a href="http://blog.csdn.net/liangcaiyun2013/article/details/10410797" target="_blank" rel="noopener">win7下制作ubuntu系统安装启动盘和U盘安装ubuntu全过程</a></li><li><a href="http://jingyan.baidu.com/article/597035520848d98fc00740f1.html" target="_blank" rel="noopener">重装Win7 系统(用光盘重装Win7系统)_百度经验</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，作为一个学IT的，居然自己没重装过系统。一直想自己安装一次双系统，正好这个周日抽空研究了下，折腾了一天，总算如愿以偿。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://brianway.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Linux" scheme="https://brianway.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://brianway.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>一个例子记住C++对象的生存周期</title>
    <link href="https://brianway.github.io/2016/01/11/cpp-memory-allocation-lifetime/"/>
    <id>https://brianway.github.io/2016/01/11/cpp-memory-allocation-lifetime/</id>
    <published>2016-01-11T06:41:10.000Z</published>
    <updated>2019-04-07T16:16:59.929Z</updated>
    
    <content type="html"><![CDATA[<p>最近要考C++，复习过程中遇到一些问题，总结记录一下。文中代码均在<a href="http://ideone.com" target="_blank" rel="noopener">ideone在线编译器</a>中运行的。</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码说明：</p><ul><li>类A，含构造函数和析构函数</li><li>普通函数fun，函数体里新建了类A的局部自动对象<code>FunObj</code>和局部静态对象<code>InStaObj</code></li><li>main方法新建了类A的局部自动对象<code>MainObj</code>,调用<code>fun</code>方法</li><li>外面新建了A的的外部静态对象<code>ExStaObj</code>和外部对象<code>GblObj</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">  A(<span class="keyword">char</span> * st);</span><br><span class="line">  ~A( );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A::A(<span class="keyword">char</span> * st)</span><br><span class="line">&#123; </span><br><span class="line">   <span class="built_in">strcpy</span>(<span class="built_in">string</span>, st);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span> &lt;&lt; <span class="string">"被创建时调用构造函数 ! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">A::~A( )</span><br><span class="line">&#123;  </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span> &lt;&lt; </span><br><span class="line">    <span class="string">"被撤消时调用析构函数 ! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在fun( )函数体内 : \n"</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="function">A <span class="title">FunObj</span><span class="params">(<span class="string">"fun( )函数体内的自动对象FunObj"</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">static</span> A <span class="title">InStaObj</span><span class="params">(<span class="string">"内部静态对象InStaObj"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="function">A <span class="title">MainObj</span><span class="params">(<span class="string">"主函数体内的自动对象MainObj"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"主函数体内，调用fun()函数前: \n"</span>;</span><br><span class="line">fun( );</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n主函数体内，调用fun()函数后:\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> A <span class="title">ExStaObj</span><span class="params">(<span class="string">"外部静态对象ExStaObj"</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">GblObj</span><span class="params">(<span class="string">"外部对象GblObj"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">外部静态对象ExStaObj被创建时调用构造函数 ! </span><br><span class="line">外部对象GblObj被创建时调用构造函数 ! </span><br><span class="line">主函数体内的自动对象MainObj被创建时调用构造函数 ! </span><br><span class="line">主函数体内，调用fun()函数前: </span><br><span class="line">在fun( )函数体内 : </span><br><span class="line"></span><br><span class="line">fun( )函数体内的自动对象FunObj被创建时调用构造函数 ! </span><br><span class="line">内部静态对象InStaObj被创建时调用构造函数 ! </span><br><span class="line">fun( )函数体内的自动对象FunObj被撤消时调用析构函数 ! </span><br><span class="line"></span><br><span class="line">主函数体内，调用fun()函数后:</span><br><span class="line">主函数体内的自动对象MainObj被撤消时调用析构函数 ! </span><br><span class="line">内部静态对象InStaObj被撤消时调用析构函数 ! </span><br><span class="line">外部对象GblObj被撤消时调用析构函数 ! </span><br><span class="line">外部静态对象ExStaObj被撤消时调用析构函数 !</span><br></pre></td></tr></table></figure><p>若将<code>A GblObj(&quot;外部对象GblObj&quot;);</code>写在<code>static A ExStaObj(&quot;外部静态对象ExStaObj&quot;);</code>前面，则输出时两者顺序也颠倒。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p>创建顺序</p><p>外部静态对象or外部对象优先于main函数</p></li><li><p>销毁顺序</p><p>和创建顺序相反，<strong>注意</strong>静态对象会在main函数执行完才会销毁</p></li></ul><h2 id="内存的三种分配方式"><a href="#内存的三种分配方式" class="headerlink" title="内存的三种分配方式"></a>内存的三种分配方式</h2><ul><li>从静态存储区分配：此时的内存在程序编译的时候已经分配好，并且在程序的整个运行期间都存在。全局变量，static变量等在此存储</li><li>在栈区分配：相关代码执行时创建，执行结束时被自动释放。局部变量在此存储。栈内存分配运算内置于处理器的指令集中，效率高，但容量有限</li><li>在堆区分配：动态分配内存。用new/malloc时开辟，delete/free时释放。生存期由用户指定，灵活。但有内存泄露等问题</li></ul><p><img src="http://7xph6d.com1.z0.glb.clouddn.com/cpp_%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" alt="内存分配"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要考C++，复习过程中遇到一些问题，总结记录一下。文中代码均在&lt;a href=&quot;http://ideone.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ideone在线编译器&lt;/a&gt;中运行的。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="cpp" scheme="https://brianway.github.io/tags/cpp/"/>
    
      <category term="examples" scheme="https://brianway.github.io/tags/examples/"/>
    
  </entry>
  
  <entry>
    <title>简单谈谈C++中的函数形参与浅拷贝</title>
    <link href="https://brianway.github.io/2016/01/11/cpp-formal-param-copy/"/>
    <id>https://brianway.github.io/2016/01/11/cpp-formal-param-copy/</id>
    <published>2016-01-11T05:35:10.000Z</published>
    <updated>2019-04-07T16:16:59.891Z</updated>
    
    <content type="html"><![CDATA[<p>最近要考C++，复习过程中遇到一些问题，总结记录一下。文中代码均在<a href="http://ideone.com" target="_blank" rel="noopener">ideone在线编译器</a>中运行的</p><p>字面上都知道，函数传递参数有值传递和引用传递，但具体区别是什么呢？除了一个传对象拷贝，一个传对象本身之外，还有哪些影响？</p><a id="more"></a><p>这里定义一个<code>str</code>类，只有一个<code>private char*st</code>变量；有几个基本的函数，重载了<code>=</code>和<code>==</code>运算符，<code>str &amp; operator=(str const &amp; a)</code>和<code>str &amp; operator==(str a)</code>,用于用不同方式实现赋值。代码如下：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">char</span> *st; </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  str(<span class="keyword">char</span> *a) &#123;</span><br><span class="line"><span class="built_in">set</span>(a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"构造函数：str addr "</span>&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="string">"  st addr "</span>&lt;&lt;&amp;st&lt;&lt;<span class="string">"  st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)st&lt;&lt;<span class="string">"  st  "</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">  &#125;  </span><br><span class="line">  str &amp; <span class="keyword">operator</span>==(str  a) &#123;<span class="comment">//二元操作符“==”，参数类型和后者一致</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"op:形参 str a addr  "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">"  a.st addr  "</span>&lt;&lt;&amp;(a.st)&lt;&lt;<span class="string">"  a.st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)(a.st)&lt;&lt;<span class="string">" a.st content  "</span>&lt;&lt;(a.st)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> st; </span><br><span class="line"><span class="built_in">set</span>(a.st);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  str &amp; <span class="keyword">operator</span>=(str <span class="keyword">const</span> &amp;  a) &#123;<span class="comment">//二元操作符“=”，参数类型和后者一致</span></span><br><span class="line">   <span class="comment">//str &amp; operator=(str  &amp;  a) &#123;//二元操作符“=”，参数类型和后者一致</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"op:形参 str const &amp; a addr  "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">"  a.st addr  "</span>&lt;&lt;&amp;(a.st)&lt;&lt;<span class="string">"  a.st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)(a.st)&lt;&lt;<span class="string">" a.st content  "</span>&lt;&lt;(a.st)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> st; </span><br><span class="line"><span class="built_in">set</span>(a.st);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"show func: "</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>;&#125; </span><br><span class="line">  ~str()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"~str:before str addr "</span>&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="string">"  st addr "</span>&lt;&lt;&amp;st&lt;&lt;<span class="string">"  st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)(st)&lt;&lt;<span class="string">"  st content "</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">delete</span> st;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"~str:after  str addr "&lt;&lt;this&lt;&lt;"  st addr "&lt;&lt;&amp;st&lt;&lt;"  st point to  "&lt;&lt;(void *)(st)&lt;&lt;"  st content "&lt;&lt;st&lt;&lt;endl; </span></span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">char</span> *s)</span><span class="comment">//初始化st </span></span></span><br><span class="line"><span class="function">  </span>&#123;   </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"set:before new st addr  "</span>&lt;&lt;&amp;st&lt;&lt;<span class="string">"  st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)(st)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">st = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s)+<span class="number">1</span>];<span class="comment">//先分配空间，否则野指针,+1存"\0"</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"set:after new st addr  "</span>&lt;&lt;&amp;st&lt;&lt;<span class="string">"  st point to  "</span>&lt;&lt;(<span class="keyword">void</span> *)(st)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(st)</span><br><span class="line"><span class="built_in">strcpy</span>(st,s); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">str s1("he"),</span><br><span class="line">s2(<span class="string">"she"</span>); </span><br><span class="line">s1.show(),</span><br><span class="line">s2.show(); </span><br><span class="line"><span class="comment">//s2=s1;  </span></span><br><span class="line">s2==s1;</span><br><span class="line">s1.show(),</span><br><span class="line">s2.show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>str &amp; operator==(str  a)</code>重载的输出：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">set:before new st addr  0xbfce5374  st point to  0xb785c680</span><br><span class="line">set:after new st addr  0xbfce5374  st point to  0x9bffa10</span><br><span class="line">构造函数：str addr 0xbfce5374  st addr 0xbfce5374  st point to  0x9bffa10  st  he</span><br><span class="line">set:before new st addr  0xbfce5378  st point to  0x804abc4</span><br><span class="line">set:after new st addr  0xbfce5378  st point to  0x9bffa20</span><br><span class="line">构造函数：str addr 0xbfce5378  st addr 0xbfce5378  st point to  0x9bffa20  st  she</span><br><span class="line">show func: he</span><br><span class="line">show func: she</span><br><span class="line">op:形参 str a addr  0xbfce537c  a.st addr  0xbfce537c  a.st point to  0x9bffa10 a.st content  he</span><br><span class="line">set:before new st addr  0xbfce5378  st point to  0x9bffa20</span><br><span class="line">set:after new st addr  0xbfce5378  st point to  0x9bffa20</span><br><span class="line">~str:before str addr 0xbfce537c  st addr 0xbfce537c  st point to  0x9bffa10  st content he</span><br><span class="line">show func: </span><br><span class="line">show func: he</span><br><span class="line">~str:before str addr 0xbfce5378  st addr 0xbfce5378  st point to  0x9bffa20  st content he</span><br><span class="line">~str:before str addr 0xbfce5374  st addr 0xbfce5374  st point to  0x9bffa10  st content</span><br></pre></td></tr></table></figure><p>注意第二次两行<code>show</code>之前的那句<code>~str:before str addr 0xbfce537c  st addr 0xbfce537c  st point to  0x9bffa10  st content he</code></p><ul><li>使用<code>str &amp; operator=(str const &amp;  a)</code>重载,将<code>main</code>中<code>s2==s1;</code>注释掉，使用<code>s2=s1;</code>, 输出：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set:before new st addr  0xbff47b38  st point to  0x804aba0</span><br><span class="line">set:after new st addr  0xbff47b38  st point to  0x9693a10</span><br><span class="line">构造函数：str addr 0xbff47b38  st addr 0xbff47b38  st point to  0x9693a10  st  he</span><br><span class="line">set:before new st addr  0xbff47b3c  st point to  0x8049302</span><br><span class="line">set:after new st addr  0xbff47b3c  st point to  0x9693a20</span><br><span class="line">构造函数：str addr 0xbff47b3c  st addr 0xbff47b3c  st point to  0x9693a20  st  she</span><br><span class="line">show func: he</span><br><span class="line">show func: she</span><br><span class="line">op:形参 str const &amp; a addr  0xbff47b38  a.st addr  0xbff47b38  a.st point to  0x9693a10 a.st content  he</span><br><span class="line">set:before new st addr  0xbff47b3c  st point to  0x9693a20</span><br><span class="line">set:after new st addr  0xbff47b3c  st point to  0x9693a20</span><br><span class="line">show func: he</span><br><span class="line">show func: he</span><br><span class="line">~str:before str addr 0xbff47b3c  st addr 0xbff47b3c  st point to  0x9693a20  st content he</span><br><span class="line">~str:before str addr 0xbff47b38  st addr 0xbff47b38  st point to  0x9693a10  st content he</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>使用<code>str &amp; operator==(str a)</code>重载时，s1的地址为<code>0xbfce5374</code>，a的地址为<code>0xbfce537c</code>,确实是另外创建了新变量a，但是，两者的st均指向同一个地址<code>0x9bffa10</code></li><li>使用<code>str &amp; operator=(str const &amp; a)</code>重载时，s1和a的地址均为<code>0xbff47b38</code></li><li>两次输出的区别在于使用值传递时，即第一个输出结果多了一句输出：<code>~str:before str addr 0xbfce537c st addr 0xbfce537c st point to 0x9bffa10 st content he</code></li></ul><p>可以看出，主要区别在于,参数类型不是引用时，形参为值传递，<strong>默认的复制构造函数就是简单的把成员变量依次赋值</strong>，所以<code>str a</code>的st和<code>s1</code>的st指向的同一段内存，函数<code>str &amp; operator==(str a)</code>执行完，自动变量a会销毁，调用析构函数，释放st所指向的内存并设指针为空，所以为null。而使用函数<code>str &amp; operator=(str const &amp; a)</code>，则不会代用析构函数。由于这里未对变量a做修改，所以去掉const不影响，不过最好保留。</p><h2 id="关于拷贝"><a href="#关于拷贝" class="headerlink" title="关于拷贝"></a>关于拷贝</h2><ul><li>对象间赋值(=)是一个拷贝过程</li><li>浅拷贝<ul><li>实现对象间数据元素的一一对应复制。</li></ul></li><li>深拷贝<ul><li>当被复制的对象数据成员是指针类型时，不是复制该指针成员本身，而是将指针所指的对象进行复制。<br>系统提供的拷贝(如默认拷贝构造函数等)只能实现浅拷贝，深拷贝必须自定义</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要考C++，复习过程中遇到一些问题，总结记录一下。文中代码均在&lt;a href=&quot;http://ideone.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ideone在线编译器&lt;/a&gt;中运行的&lt;/p&gt;
&lt;p&gt;字面上都知道，函数传递参数有值传递和引用传递，但具体区别是什么呢？除了一个传对象拷贝，一个传对象本身之外，还有哪些影响？&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="cpp" scheme="https://brianway.github.io/tags/cpp/"/>
    
      <category term="examples" scheme="https://brianway.github.io/tags/examples/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(2)-泛型</title>
    <link href="https://brianway.github.io/2016/01/08/javase-learn-note-2-Generics/"/>
    <id>https://brianway.github.io/2016/01/08/javase-learn-note-2-Generics/</id>
    <published>2016-01-07T22:14:12.000Z</published>
    <updated>2019-04-07T16:16:59.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文对泛型的基本知识进行较为全面的总结，并附上简短的代码实例，加深记忆。</p><a id="more"></a><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>将集合中的元素限定为一个特定的类型。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><code>ArrayList&lt;E&gt;</code> – 泛型类型</li><li><code>ArrayList</code> – 原始类型</li><li><code>E</code> – 类型参数</li><li><code>&lt;&gt;</code> – 读作”typeof”</li><li><code>ArrayList&lt;Integer&gt;</code> – 参数化的类型</li><li><code>Integer</code> – 实际类型参数</li></ul><p>几点注意：</p><ul><li>参数化类型和原始类型相互兼容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList  collection1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();<span class="comment">//通过,无warning</span></span><br><span class="line">ArrayList&lt;Integer&gt; collection2 = <span class="keyword">new</span> ArrayList();<span class="comment">//通过,有warning</span></span><br></pre></td></tr></table></figure><ul><li>参数化类型不考虑类型参数的继承关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; collection3 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();<span class="comment">//编译不通过</span></span><br><span class="line">ArrayList&lt;Object&gt; collection4 = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure><p>但是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList collection5 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">ArrayList&lt;String&gt; collection6 = collection5;<span class="comment">//编译通过</span></span><br></pre></td></tr></table></figure><hr><h2 id="“-”通配符"><a href="#“-”通配符" class="headerlink" title="“?”通配符"></a>“?”通配符</h2><p>“?”表示任意类型，使用”?”通配符可以引用各种参数化的类型，可以调用与参数化无关的方法(如size()方法)，不能调用与参数化有关的方法(如add()方法)</p><h3 id="通配符的扩展"><a href="#通配符的扩展" class="headerlink" title="通配符的扩展"></a>通配符的扩展</h3><ul><li>限定通配符的上边界</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;? extends Number &gt; collection1= <span class="keyword">new</span> ArrayList&lt;Integer &gt;();<span class="comment">//编译通过</span></span><br><span class="line">ArrayList&lt;? extends Number &gt; collection2= <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure><ul><li>限定通配符的下边界</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;? <span class="keyword">super</span> Integer &gt; collection3= <span class="keyword">new</span> ArrayList&lt;Number &gt;();<span class="comment">//编译通过</span></span><br><span class="line">ArrayList&lt;? <span class="keyword">super</span> Integer &gt; collection4= <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure><hr><h2 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h2><p>C++模板函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> (T)(x+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而java的泛型基本上完全在编译器中实现，用于编译器执行类型检查和类型判断，然后生成普通的<strong>非泛型</strong>的字节码，这种实现技术为“擦除”(erasure)。</p><h3 id="“擦除”实例"><a href="#“擦除”实例" class="headerlink" title="“擦除”实例"></a>“擦除”实例</h3><p>泛型是提供给javac编译器使用的，限定集合的输入类型，编译器编译带类型说明的集合时会去掉“类型”信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GenericTest().testType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; collection1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; collection2= <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.println(collection1.getClass()==collection2.getClass());</span><br><span class="line">        <span class="comment">//两者class类型一样,即字节码一致</span></span><br><span class="line"></span><br><span class="line">        System.out.println(collection2.getClass().getName());</span><br><span class="line">        <span class="comment">//class均为java.util.ArrayList,并无实际类型参数信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">java.util.ArrayList</span><br></pre></td></tr></table></figure><p><em>使用反射可跳过编译器，往某个泛型集合加入其它类型数据。</em></p><p>只有引用类型才能作为泛型方法的实际参数。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        swap(<span class="keyword">new</span> String[]&#123;<span class="string">"111"</span>,<span class="string">"222"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//编译通过</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//swap(new int[]&#123;1,2&#125;,0,1);</span></span><br><span class="line">        <span class="comment">//编译不通过,因为int不是引用类型</span></span><br><span class="line"></span><br><span class="line">        swap(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//编译通过</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*交换数组a 的第i个和第j个元素*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[]a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但注意基本类型<strong>有时</strong>可以作为实参，因为有<strong>自动装箱</strong>和<strong>拆箱</strong>。<br>例子(编译通过了)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GenericTest().testType();</span><br><span class="line">        <span class="keyword">int</span> a = biggerOne(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//int 和 double,取交为Number</span></span><br><span class="line">        Number b = biggerOne(<span class="number">3</span>,<span class="number">5.5</span>);</span><br><span class="line">        <span class="comment">//String和int 取交为Object</span></span><br><span class="line">        Object c = biggerOne(<span class="string">"1"</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从x,y中返回y</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">biggerOne</span><span class="params">(T x,T y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，该例还表明，<strong>当实参不一致时，T取交集，即第一个共同的父类。</strong><br>另外，如果用<code>Number b = biggerOne(3,5.5);</code>改为<code>String c = biggerOne(3,5.5);</code>则编译报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error:(17, 29) java: 不兼容的类型: 推断类型不符合上限</span><br><span class="line">    推断: java.lang.Number&amp;java.lang.Comparable&lt;? extends java.lang.Number&amp;java.lang.Comparable&lt;?&gt;&gt;</span><br><span class="line">    上限: java.lang.String,java.lang.Object</span><br></pre></td></tr></table></figure><p>但是有一点没搞清楚，我在IDEA里面单步调试，发现结果如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xph6d.com1.z0.glb.clouddn.com/javaSE_%E6%B3%9B%E5%9E%8B%E8%B0%83%E8%AF%95%E6%88%AA%E5%9B%BE-1.png" alt="泛型调试截图-1" title>                </div>                <div class="image-caption">泛型调试截图-1</div>            </figure><br>不知道b为什么是Double类型的（但直接<code>Double b</code>接收返回值会编译报错）。不知道跟IDE有没有关系，是不是IDE在debug时会显示这个对象最精确的类型？</p><h3 id="类型参数的类型推断"><a href="#类型参数的类型推断" class="headerlink" title="类型参数的类型推断"></a>类型参数的类型推断</h3><p>编译器判断泛型方法的实际类型参数的过程称为类型推断。</p><ul><li>当某个类型变量只在整个参数列表的所有参数和返回值中的<strong>一处被应用</strong>了，那么根据调用方法时该处的实际应用类型来确定。即直接根据调用方法时传递的参数类型或返回值来决定泛型参数的类型。<br>例如：</li></ul><p><code>swap(new String[3],1,2)</code> -&gt; <code>static &lt;E&gt; void swap(E[]a,int i,int j)</code></p><ul><li>当某个类型变量在整个参数列表的所有参数和返回值中的<strong>多处被应用</strong>了，如果调用方法时这么多处的实际应用类型都 <em>对应同一种类型</em>，则泛型参数的类型就是该类型。<br>例如：</li></ul><p><code>add(3,5)</code> -&gt; <code>static &lt;T&gt; T add(T a,T b)</code></p><ul><li>当某个类型变量在整个参数列表的所有参数和返回值中的<strong>*多处被应用</strong>了，如果调用方法时这么多处的实际应用类型 <em>对应不同的类型,且没有返回值</em>，则取多个参数中的最大交集类型，即第一个公共父类。<br>例如：</li></ul><p><code>fill(new Integer[3],3.5)</code> -&gt; <code>static &lt;T&gt; void fill(T a[],T v)</code></p><p>该例子实际对应的类型就是Number,编译通过，运行出问题。</p><ul><li>当某个类型变量在整个参数列表的所有参数和返回值中的<strong>多处被应用</strong>了，如果调用方法时这么多处的实际应用类型<em>对应不同的类型,且使用有返回值</em>，则<strong>优先考虑返回值的类型</strong></li></ul><p>例如：</p><p><code>int x = add(3,3.5)</code> -&gt; <code>static &lt;T&gt; T add(T a,T b)</code></p><p>上例编译报错,x类型改为float也报错，改为Number成功。</p><ul><li>参数类型的类型推断具有传递性</li></ul><p>例子：</p><p><code>copy(new Integer[5],new String[5])</code> -&gt; <code>static &lt;T&gt; void copy(T []a,T []b)</code></p><p>该例推断实际参数类型为Object,编译通过.</p><p> <code>copy(new ArrayList&lt;String&gt;,new Integer[5])</code> -&gt; <code>static &lt;T&gt; void copy(Collection&lt;T&gt;a,T[]b)</code></p><p>该例则根据参数化的ArrayList类实例将类型变量直接确定为String类型，编译报错。</p><hr><h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDao</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findByUserName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Set&lt;T&gt; <span class="title">findByConditions</span><span class="params">(String where)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：当一个变量被声明为泛型时，只能被实例变量和方法调用(还有内嵌类型)，而不能被静态变量和静态方法调用。<em>因为静态成员是被所参数化的类所共享的，所以静态成员不应该有类级别的类型参数</em>。</p><h3 id="泛型方法和泛型类的比较"><a href="#泛型方法和泛型类的比较" class="headerlink" title="泛型方法和泛型类的比较"></a>泛型方法和泛型类的比较</h3><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt;()</span>&#123;</span><br><span class="line">    <span class="comment">//泛型类的成员方法，该T受A后面的T的限制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">memberFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型方法，这里的T和和类A的T是不同的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">genericFunc</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//Integer i = A&lt;String&gt;().findByUserName("s");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        Set&lt;Integer&gt; set=  A&lt;String&gt;().findByConditions(<span class="string">"s"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>Integer i = A&lt;String&gt;().findByUserName(&quot;s&quot;);</code>会编译报错：</p><p><code>Error:(35, 61) java: 不兼容的类型: java.lang.String无法转换为java.lang.Integer</code></p><p>由这个例子可知，泛型方法的T和和类A的T是不同的。</p><hr><h2 id="泛型和反射"><a href="#泛型和反射" class="headerlink" title="泛型和反射"></a>泛型和反射</h2><h3 id="通过反射获得泛型的实际类型参数"><a href="#通过反射获得泛型的实际类型参数" class="headerlink" title="通过反射获得泛型的实际类型参数"></a>通过反射获得泛型的实际类型参数</h3><p>把泛型变量当成方法的参数，利用Method类的getGenericParameterTypes方法来获取泛型的实际类型参数<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        getParamType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*利用反射获取方法参数的实际参数类型*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getParamType</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException</span>&#123;</span><br><span class="line">        Method method = GenericTest.class.getMethod(<span class="string">"applyMap"</span>,Map.class);</span><br><span class="line">        <span class="comment">//获取方法的泛型参数的类型</span></span><br><span class="line">        Type[] types = method.getGenericParameterTypes();</span><br><span class="line">        System.out.println(types[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//参数化的类型</span></span><br><span class="line">        ParameterizedType pType  = (ParameterizedType)types[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//原始类型</span></span><br><span class="line">        System.out.println(pType.getRawType());</span><br><span class="line">        <span class="comment">//实际类型参数</span></span><br><span class="line">        System.out.println(pType.getActualTypeArguments()[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(pType.getActualTypeArguments()[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*供测试参数类型的方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyMap</span><span class="params">(Map&lt;Integer,String&gt; map)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.util.Map&lt;java.lang.Integer, java.lang.String&gt;</span><br><span class="line">interface java.util.Map</span><br><span class="line">class java.lang.Integer</span><br><span class="line">class java.lang.String</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对泛型的基本知识进行较为全面的总结，并附上简短的代码实例，加深记忆。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固笔记(1)-反射</title>
    <link href="https://brianway.github.io/2016/01/08/javase-learn-note-1-Reflect/"/>
    <id>https://brianway.github.io/2016/01/08/javase-learn-note-1-Reflect/</id>
    <published>2016-01-07T20:39:11.000Z</published>
    <updated>2019-04-07T16:16:59.857Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反射：将类的属性和方法映射成相应的类。</strong></p><a id="more"></a><h2 id="反射基本使用"><a href="#反射基本使用" class="headerlink" title="反射基本使用"></a>反射基本使用</h2><p>获取Class类的三种方法:</p><ul><li>类名.class</li><li>对象名.getClass()</li><li>Class.forName(“要加载的类名”)</li></ul><p>根据API写就行了，大致流程就是:</p><ul><li>用上述三种方式之一获取特定类的<code>Class</code>类，即该类对应的字节码</li><li>调用<code>Class</code>对象的<code>getConstructor(Class&lt;?&gt;... parameterTypes)</code>获取构造方法对象</li><li>调用是构造方法类<code>Constructor</code>的<code>newInstance(Object... initargs)</code>方法新建对象</li><li>调用<code>Class</code>对象的<code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>获取方法对象</li><li>调用方法对象类<code>Method</code>的<code>invoke(Object obj, Object... args)</code>方法，调用对象上相应方法</li></ul><p><em>用方法的参数类型唯一标识一个方法,依据：方法的重载</em></p><h2 id="数组的反射"><a href="#数组的反射" class="headerlink" title="数组的反射"></a>数组的反射</h2><p>下面这个例子主要说明几点：</p><ul><li>对于元素同类型的数组，同维数组，class一样</li><li>不同维，class不同</li><li>不同维的，父类都是Object,一样</li><li>基本类型一维数组不能直接转换为Object[]</li><li><code>java.util.Arrays</code>的<code>asList</code>方法API看看</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> [] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> [][] a3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        System.out.println(a1.getClass() == a2.getClass());<span class="comment">//true</span></span><br><span class="line">        System.out.println(a1.getClass());<span class="comment">//class [I</span></span><br><span class="line">        System.out.println(a3.getClass());<span class="comment">//class [[I</span></span><br><span class="line">        System.out.println(a1.getClass().getSuperclass() == a3.getClass().getSuperclass());<span class="comment">//true</span></span><br><span class="line">        System.out.println(a2.getClass().getSuperclass());<span class="comment">//class java.lang.Object</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//下句编译不通过：Error:(15, 42) java: 不可比较的类型: java.lang.Class&lt;capture#1, 共 ? extends int[]&gt;和java.lang.Class&lt;capture#2, 共 ? extends int[][]&gt;</span></span><br><span class="line">        <span class="comment">//System.out.println(a1.getClass() == a3.getClass());</span></span><br><span class="line"></span><br><span class="line">        Object []b3 = a3;<span class="comment">//通过</span></span><br><span class="line">        <span class="comment">//下句编译不通过   Error:(17, 24) java: 不兼容的类型: int[]无法转换为java.lang.Object[]</span></span><br><span class="line">        <span class="comment">//Object [] b1 = a1;</span></span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(Arrays.asList(a1));<span class="comment">//[[I@1540e19d]</span></span><br><span class="line">        System.out.println(Arrays.asList(s1));<span class="comment">//[abc]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">class [I</span><br><span class="line">class [[I</span><br><span class="line">true</span><br><span class="line">class java.lang.Object</span><br><span class="line">[[I@1540e19d]</span><br><span class="line">[abc]</span><br></pre></td></tr></table></figure><p>乱入：<br>hashcode与内存泄露问题<br>参考java api：</p><blockquote><ul><li>hashcode一旦生成，不要变</li><li>对象equals方法返回true,则hascode要一致</li><li>反之，equals方法返回false,hascode不一定互异</li></ul></blockquote><p>如果参与hascode计算的成员变量中途发生变化，则后面remove时失败，造成内存泄露</p><hr><h2 id="配置文件加载"><a href="#配置文件加载" class="headerlink" title="配置文件加载"></a>配置文件加载</h2><ul><li>类加载器加载只读配置文件</li></ul><p><code>类名.class.getClassLoader().getResourceAsStream(str);</code></p><ul><li>类名.class.getResourceAsStream(str),实质还是调用类加载器。<br>源码截取(java.lang包下的Class.java)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    name = resolveName(name);</span><br><span class="line">    ClassLoader cl = getClassLoader0();</span><br><span class="line">    <span class="keyword">if</span> (cl==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A system class.</span></span><br><span class="line">        <span class="keyword">return</span> ClassLoader.getSystemResourceAsStream(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cl.getResourceAsStream(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于路径str，写法有点讲究。</p><ul><li>不加斜杠，相对路径:<br><code>str = &quot;config.properties&quot;;</code></li><li>加斜杠，从classpath的根路径找:<br><code>str = &quot;/org/iot/ui/config.properties&quot;;</code></li></ul><p><em>以前编译java代码时，有些<code>conf/</code>文件夹还要添加进依赖或者标记成source文件夹，里面明明都是xml文件，没Java源码。从这里，我现在知道了，是使用反射加载配置文件的缘故</em></p><hr><h2 id="内省-Instropector-amp-JavaBean"><a href="#内省-Instropector-amp-JavaBean" class="headerlink" title="内省(Instropector) &amp; JavaBean"></a>内省(Instropector) &amp; JavaBean</h2><p>JavaBean读取属性x的值的流程：变大写、补前缀、获取方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;x&quot;--&gt;&quot;X&quot;--&gt;&quot;getX&quot;--&gt;&quot;MethodGetX&quot;</span><br></pre></td></tr></table></figure><ul><li>自己用内省操作</li></ul><p>我目前没用上，所以不贴代码了，只附上核心类</p><p>简单实现：<br>使用<code>java.beans.PropertyDescriptor</code>类</p><p>麻烦实现:<br>使用<code>java.beans.Introspector</code>类,遍历<code>getBeanInfo</code>方法的返回值</p><p><strong>JavaBean必须有一个不带参数的构造函数</strong></p><ul><li><p>使用BeanUtils工具包</p><ul><li>字符串和整数转换(对比(PropertyUtils)</li><li>属性级联操作</li><li>操作map</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;反射：将类的属性和方法映射成相应的类。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://brianway.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://brianway.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub搭建个人网站</title>
    <link href="https://brianway.github.io/2016/01/07/build-blog-with-jekyll-and-github/"/>
    <id>https://brianway.github.io/2016/01/07/build-blog-with-jekyll-and-github/</id>
    <published>2016-01-07T06:35:11.000Z</published>
    <updated>2019-04-14T13:10:07.437Z</updated>
    
    <content type="html"><![CDATA[<p>先搜篇中文博客了解下流程，再根据下面的官方文档<strong>按顺序</strong>看一遍就差不多了。</p><p>这里不得不吐槽windows太垃圾了，linux下三行指令解决的问题，windows还要一个个安装、改配置文件。</p><a id="more"></a><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><blockquote><ul><li><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Help</a></li><li><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></li><li><a href="http://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a><em>（附上<a href="http://jekyllcn.com/" target="_blank" rel="noopener">中文版</a>)</em></li><li><a href="http://jekyll-windows.juthilo.com/" target="_blank" rel="noopener">Run Jekyll on Windows</a></li></ul></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>首先默认你已经拥有了自己github账号，并会基本的git操作。</p><ol><li>新建一个和github用户名(username)同名的仓库，<code>username.github.io</code></li><li>在本地电脑安装</li></ol><ul><li>Ruby和devkit</li><li>jekyll</li><li>python</li></ul><ol start="3"><li>找一个好的模板</li><li>修改模板，导入自己的文章</li></ol><p>具体步骤懒得写了，不定期完善。</p><ul><li>Mac下安装</li></ul><p>1.安装ruby</p><p>由于我之前安装过Xcode还有Xcode command line tools,所以直接就有ruby了，Terminal里输入<code>ge</code>+<code>Tab键</code>能看到有<code>gem</code>指令</p><p>2.安装jekyll和bundle</p><p>参考：<a href="https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/" target="_blank" rel="noopener">Setting up your GitHub Pages site locally with Jekyll</a></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>主要是我完全不懂ruby和python,前端也只有少的可怜的一点常识。搭建环境不复杂，基本安装好了后<code>jekyll new myblog</code>就有个基础模板了，不过很难看。所以我主要花了一整天时间去找主题、P图、了解jekyll的目录结构和用法、测试显示效果。总算搞定了，不过markdown的语法高亮我还是不满意，比较喜欢SegmentFault的高亮。有空再说这部分。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1.windows下安装ruby的devkit遇到问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invalid configuration or no Rubies listed. Please fix &apos;config.yml&apos;</span><br><span class="line">and rerun &apos;ruby dk.rb install&apos;</span><br></pre></td></tr></table></figure><p>解决：<a href="http://stackoverflow.com/questions/20810653/how-do-i-configure-config-yml-so-that-i-can-install-devkit" target="_blank" rel="noopener">How do I configure config.yml so that I can install devkit?</a></p><p>2.kunka主题jekyll build问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deprecation: You appear to have pagination turned on, but you haven&apos;t included the `jekyll-paginate` gem. Ensure you have `gems: [jekyll-paginate]` in your configuration fil e.</span><br></pre></td></tr></table></figure><p>解决：<a href="https://teamtreehouse.com/community/jekyllpaginate-gem" target="_blank" rel="noopener">jekyll-paginate gem</a></p><p>3.markdown显示问题</p><p>这里很蛋疼，我写markdown的习惯是代码都是前后各三个反单引号包起来的。使用kramdown解析markdown不能对含三个反单引号的代码块进行识别，默认按单行代码处理，缩进都没了；使用redcarpet能识别代码块，但没高亮，rouge又提示什么要下1.3版本，反正神烦。</p><p>参考：</p><ul><li><a href="http://stackoverflow.com/questions/8648390/syntax-highlighting-markdown-code-blocks-in-jekyll-without-using-liquid-tags" target="_blank" rel="noopener">Syntax highlighting markdown code blocks in Jekyll (without using liquid tags)</a></li><li><a href="http://blog.javachen.com/2015/06/30/jekyll-kramdown-config.html" target="_blank" rel="noopener">Jekyll kramdown配置</a></li></ul><p>4.jekyll build失败报错(多版本冲突)</p><p>解决：<a href="http://stackoverflow.com/questions/31417469/jekyll-ruby-kramdown-missing-dependency" target="_blank" rel="noopener">Jekyll/Ruby Kramdown Missing Dependency</a></p><p>5.bundle install SSL接连不上(其实是网速不好，多试几次。下载前<code>gem update --system</code>)</p><p>查阅：<a href="http://stackoverflow.com/questions/10246023/bundle-install-fails-with-ssl-certificate-verification-error" target="_blank" rel="noopener">SSL Error When installing rubygems, Unable to pull data from ‘https://rubygems.org/</a></p><p>6.jekyll升级到3.0</p><blockquote><ul><li><a href="https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0" target="_blank" rel="noopener">GitHub Pages now faster and simpler with Jekyll 3.0</a></li><li><a href="http://jekyllrb.com/docs/upgrading/2-to-3/" target="_blank" rel="noopener">Upgrading from 2.x to 3.x</a></li></ul></blockquote><p>7.gem install出现error，伟大的防火墙问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brian@brianway:~$ gem install jekyll</span><br><span class="line">ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)</span><br><span class="line">Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://api.rubygems.org/quick/Marshal.4.8/jekyll-3.1.6.gemspec.rz)</span><br></pre></td></tr></table></figure><p>解决：换成淘宝的镜像 <a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a></p><p>8.MAC下<code>gem install jekyll</code>失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  While executing gem ... (Gem::FilePermissionError)</span><br><span class="line">You don&apos;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.</span><br></pre></td></tr></table></figure><p>好像不建议使用<code>sudo</code>,需要另外弄一套包管理rbenv或者RVM，图省事的话，可以直接安装在本地用户目录,指令格式：<code>gem install *** --user-install</code>，<code>***</code>是要安装的包名，具体可以输入<code>gem help install</code>查看参数意义</p><p>参考：</p><ul><li><a href="http://stackoverflow.com/questions/14607193/installing-gem-or-updating-rubygems-fails-with-permissions-error" target="_blank" rel="noopener">Installing gem or updating RubyGems fails with permissions error</a></li><li><a href="http://stackoverflow.com/questions/31972968/cant-install-gems-on-os-x-el-capitan" target="_blank" rel="noopener">Can’t install gems on OS X “El Capitan”</a></li></ul><p>9.mac下bundle执行失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">brian@brianway:~/mygit/brianway.github.io (master)$ bundle exec jekyll serve</span><br><span class="line">Configuration file: /Users/brian/mygit/brianway.github.io/_config.yml</span><br><span class="line">Source: /Users/brian/mygit/brianway.github.io</span><br><span class="line">Destination: /Users/brian/mygit/brianway.github.io/_site</span><br><span class="line">Incremental build: disabled. Enable with --incremental</span><br><span class="line">Generating...</span><br><span class="line">ERROR: YOUR SITE COULD NOT BE BUILT:</span><br><span class="line">------------------------------------</span><br><span class="line">Invalid date &apos;&lt;%= Time.now.strftime(&apos;%Y-%m-%d %H:%M:%S %z&apos;) %&gt;&apos;: Document &apos;vendor/bundle/ruby/2.0.0/gems/jekyll-3.1.6/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb&apos; does not have a valid date in the YAML front matter.</span><br></pre></td></tr></table></figure><p>解决：在<code>_config.yml</code>文件添加<code>exclude: [&quot;vendor&quot;]</code></p><p>参考：</p><ul><li><a href="http://www.markcampbell.me/jekyll/heroku/2013/05/18/how-to-set-up-jekyll-on-heroku.html" target="_blank" rel="noopener">How to set up a Jekyll blog on Heroku</a></li><li><a href="https://github.com/benbalter/jekyll-auth/issues/23" target="_blank" rel="noopener">Error building site: Post 0000-00-00… does not have a valid date (hurtstotouchfire 的回答)</a></li><li><a href="https://github.com/nparry/nparry.com/commit/2642e799a9b28ec866c405cccac379ae3770f0fe" target="_blank" rel="noopener">Fix Travis issue due to –deployment flag during bundle </a></li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>好多主题太闪，我跑不通，或者怕不好改，挑了几个简单的，我跑通的主题(不要吐槽我的审美)</p><blockquote><ul><li><a href="http://mmistakes.github.io/so-simple-theme/theme-setup/" target="_blank" rel="noopener">so-simple-theme</a></li><li><a href="http://mmistakes.github.io/hpstr-jekyll-theme" target="_blank" rel="noopener">hpstr-jekyll-theme</a></li><li><a href="http://chenjun.com/links.html" target="_blank" rel="noopener">陈俊的网：浮生志</a></li><li><a href="https://github.com/pizn/kunka" target="_blank" rel="noopener">kunka</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先搜篇中文博客了解下流程，再根据下面的官方文档&lt;strong&gt;按顺序&lt;/strong&gt;看一遍就差不多了。&lt;/p&gt;
&lt;p&gt;这里不得不吐槽windows太垃圾了，linux下三行指令解决的问题，windows还要一个个安装、改配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://brianway.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="GitHub" scheme="https://brianway.github.io/tags/GitHub/"/>
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hadoop完全分布式模式的安装和配置步骤</title>
    <link href="https://brianway.github.io/2015/12/17/hadoop-Fully-distributed-setup/"/>
    <id>https://brianway.github.io/2015/12/17/hadoop-Fully-distributed-setup/</id>
    <published>2015-12-17T06:35:11.000Z</published>
    <updated>2019-04-07T16:16:59.932Z</updated>
    
    <content type="html"><![CDATA[<p>本文是入门教程，以<strong>hadoop-1.2.1</strong>为例，介绍hadoop完全分布式的部署和配置步骤</p><a id="more"></a><p>实验条件：</p><blockquote><ul><li>三台阿里云云服务器(已经配置好Java环境)</li><li>一台PC机用于远程登录服务器</li></ul></blockquote><p>前排提示：</p><blockquote><ul><li>JAVA环境需每个服务器单独配置(注意路径一致)</li><li>hadoop相关配置只需配置一个master即可，其他的机子直接scp复制</li></ul></blockquote><hr><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="0-下载解压"><a href="#0-下载解压" class="headerlink" title="0.下载解压"></a>0.下载解压</h3><ul><li>下载解压Hadoop安装包</li></ul><blockquote><ul><li>国内镜像<a href="http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-1.2.1/hadoop-1.2.1.tar.gz" target="_blank" rel="noopener">hadoop-1.2.1.tar.gz</a></li><li>官网<a href="https://dist.apache.org/repos/dist/release/hadoop/common/hadoop-1.2.1/hadoop-1.2.1.tar.gz" target="_blank" rel="noopener">hadoop-1.2.1.tar.gz</a></li></ul></blockquote><p>下载：<br><code>wget https://dist.apache.org/repos/dist/release/hadoop/common/hadoop-1.2.1/hadoop-1.2.1.tar.gz</code></p><p>解压：<code>tar xzvf hadoop-1.2.1.tar.gz</code></p><h3 id="1-配置hosts文件和hadoop-env-sh文件"><a href="#1-配置hosts文件和hadoop-env-sh文件" class="headerlink" title="1.配置hosts文件和hadoop-env.sh文件"></a>1.配置hosts文件和hadoop-env.sh文件</h3><ul><li>修改/etc/host，使彼此能解析主机名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@RfidLabMaster:/etc# cat hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">127.0.1.1       localhost.localdomain   localhost</span><br><span class="line"># The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">#10.116.155.242 iZ945z9p7yxZ</span><br><span class="line">#10.116.155.242 RfidLabMaster</span><br><span class="line">120.25.162.238 RfidLabMaster</span><br><span class="line">120.27.138.14  RfidLabSlave1</span><br><span class="line">120.27.137.211 RfidLabSlave2</span><br></pre></td></tr></table></figure><ul><li>进入hadoop的解压目录，编辑conf/hadoop-env.sh(版本不同，配置文件位置有所变化)</li></ul><p>查看本机的JAVA_HOME：<code>env |grep JAVA_HOME</code></p><p>显示：<code>JAVA_HOME=/usr/lib/jvm/jdk1.8.0_60</code></p><p>编辑hadoop-env.sh：<code>vim hadoop-env.sh</code></p><p>找到<code>export JAVA_HOME</code>，去掉<code>#</code>注释改为本机的<br><code>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_60</code></p><h3 id="2-ssh配置"><a href="#2-ssh配置" class="headerlink" title="2.ssh配置"></a>2.ssh配置</h3><p>2.1.以brian用户登录，在brian主目录下进行操作<br>进入root目录：<br><code>cd /root</code><br>生成密钥:</p><p><code>ssh-keygen -t rsa</code><br><code>cd .ssh</code><br><code>cp id_rsa.pub authorized_keys</code></p><p>2.2分发ssh公钥<br>把各个节点的authorized_keys的内容相互拷贝到对方的此文件中，即可免密码彼此ssh连入<br>把所有节点的authorized_keys的内容拷贝到一起形成一个大文件，再用这个新的大authorized_keys覆盖所有节点的原来的该文件。</p><h3 id="3-编辑conf目录下core-site-xml-hdfs-site-xml-mapred-site-xml三个核心配置文件"><a href="#3-编辑conf目录下core-site-xml-hdfs-site-xml-mapred-site-xml三个核心配置文件" class="headerlink" title="3.编辑conf目录下core-site.xml,hdfs-site.xml,mapred-site.xml三个核心配置文件"></a>3.编辑conf目录下core-site.xml,hdfs-site.xml,mapred-site.xml三个核心配置文件</h3><ul><li>修改core-site.xml文件<br>在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>标签中添加：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://RfidLabMaster:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/brian/hadoopdir/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改hdfs-site.xml文件<br>在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>标签中添加：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/brian/hadoopdir/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span> #hadoop的name目录路径</span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/brian/hadoopdir/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span> <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 我们的集群有两个结点，所以rep两份 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改mapred-site.xml文件<br>在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>标签中添加：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://RfidLabMaster:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/brian/hadoopdir/local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-修改masters和slaves文件"><a href="#4-修改masters和slaves文件" class="headerlink" title="4.修改masters和slaves文件"></a>4.修改masters和slaves文件</h3><p>conf/masters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RfidLabMaster</span><br></pre></td></tr></table></figure><p>conf/slaves</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RfidLabSlave1</span><br><span class="line">RfidLabSlave2</span><br></pre></td></tr></table></figure><h3 id="5-向各个节点复制hadoop"><a href="#5-向各个节点复制hadoop" class="headerlink" title="5.向各个节点复制hadoop"></a>5.向各个节点复制hadoop</h3><p><code>scp -r ./hadoop-1.2.1 RfidLabSlave1:/home/brian</code></p><h3 id="6-格式化分布式文件系统"><a href="#6-格式化分布式文件系统" class="headerlink" title="6.格式化分布式文件系统"></a>6.格式化分布式文件系统</h3><p>在hadoop目录下输入<br><code>bin/hadoop namenode -format</code></p><h3 id="7-启动守护进程"><a href="#7-启动守护进程" class="headerlink" title="7.启动守护进程"></a>7.启动守护进程</h3><p>在hadoop目录下输入<br><code>bin/start-all.sh</code></p><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>主节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brian@RfidLabMaster:~/hadoop-1.2.1/logs$ jps</span><br><span class="line">26721 JobTracker</span><br><span class="line">26449 NameNode</span><br><span class="line">26889 Jps</span><br><span class="line">26633 SecondaryNameNode</span><br></pre></td></tr></table></figure><p>从节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brian@RfidLabSlave1:~$ jps</span><br><span class="line">20402 Jps</span><br><span class="line">20204 DataNode</span><br><span class="line">20302 TaskTracker</span><br></pre></td></tr></table></figure><p>查看日志文件，均无ERROR和异常</p><hr><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1.[mater日志异常]:hadoop/hdfs/name is in an inconsistent state: storage directory(hadoop/hdfs/data/) does not exist or is not accessible</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/27271970/hadoop-hdfs-name-is-in-an-inconsistent-state-storage-directoryhadoop-hdfs-data" target="_blank" rel="noopener">stack overflow question 1.1</a></li></ul></blockquote><p>2.[slave日志异常]:Hadoop : java.io.IOException: Call to  failed on local exception: java.io.EOFException</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/25130799/hadoop-java-io-ioexception-call-to-localhost-127-0-0-154310-failed-on-local" target="_blank" rel="noopener">stack overflow question 2.1</a></li></ul></blockquote><p><strong>问题1和2:好像是忘记先格式化分布式文件系统了，[问题2]好像是[问题1]的连带问题，参看[6.格式化分布式文件系统]</strong></p><p>3.[slave日志异常]：ERROR org.apache.hadoop.hdfs.server.datanode.DataNode: java.io.IOException: Incompatible namespaceIDs in</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/3425688/why-does-the-hadoop-incompatible-namespaceids-issue-happen" target="_blank" rel="noopener">stack overflow question 3.1</a></li><li><a href="http://www.hadoopinrealworld.com/fixing-java-io-ioexception-incompatible-namespaceids/" target="_blank" rel="noopener">stack overflow question 3.2</a></li></ul></blockquote><p><strong>问题3：好像是重复格式化后ID冲突的问题，上面的两个链接有各种解决办法，什么在版本文件里改ID之类的，最简单的好像是直接删掉在文件[3.编辑conf目录下core-site.xml,hdfs-site.xml,mapred-site.xml三个核心配置文件]中涉及到的文件夹</strong></p><p>4.[master日志]：ERROR org.apache.hadoop.security.UserGroupInformation: PriviledgedActionException as:brian cause:java.io.IOException: File/home/brian/hadoop_dir/tmp/mapred/system/jobtracker.info could only be replicated to 0 nodes, instead of 1</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/15585630/file-jobtracker-info-could-only-be-replicated-to-0-nodes-instead-of-1" target="_blank" rel="noopener">stack overflow question 4.1</a></li><li><a href="http://stackoverflow.com/questions/5293446/hdfs-error-could-only-be-replicated-to-0-nodes-instead-of-1" target="_blank" rel="noopener">stack overflow question 4.2</a></li></ul></blockquote><p><strong>问题4：可能我之前的配置有问题，重新配置了一遍，然后按照[问题3]里删文件解决的</strong></p><blockquote><p>补充参考<br><a href="http://wwangcg.iteye.com/blog/1152481" target="_blank" rel="noopener">hadoop 可能遇到的错误</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是入门教程，以&lt;strong&gt;hadoop-1.2.1&lt;/strong&gt;为例，介绍hadoop完全分布式的部署和配置步骤&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://brianway.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="安装部署" scheme="https://brianway.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Hadoop" scheme="https://brianway.github.io/tags/Hadoop/"/>
    
  </entry>
  
</feed>
